## warning
```json
{
    "Project": "diffutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "lib/careadlinkat.c",
    "message": "Offset added: [-oo, max(9223372036854775808, `buffer_size`)] Size: 1024.",
    "warning_function_name": "careadlinkat",
    "warning_line": "memcpy (b, buf, link_size);",
    "warning_context": "char *\ncareadlinkat (int fd, char const *filename,\n              char *buffer, size_t buffer_size,\n              struct allocator const *alloc,\n              ssize_t (*preadlinkat) (int, char const *, char *, size_t))\n{\n  char *buf;\n  size_t buf_size;\n  size_t buf_size_max =\n    SSIZE_MAX < SIZE_MAX ? (size_t) SSIZE_MAX + 1 : SIZE_MAX;\n  char stack_buf[1024];\n\n  if (! alloc)\n    alloc = &stdlib_allocator;\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc().  This way, in the common case of a symlink\n         of small size, we get away with a single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf;\n      buffer_size = sizeof(stack_buf);\n    }\n\n  if (! buffer_size)\n    {\n      /* Allocate the initial buffer on the stack.  This way, in the\n         common case of a symlink of small size, we get away with a\n         single small malloc(). */\n      buffer = stack_buf