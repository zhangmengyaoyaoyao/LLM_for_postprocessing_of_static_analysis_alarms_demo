## Bug Report
```json
{
  "category": "DODGY_CODE",
  "vtype": "DLS_DEAD_LOCAL_STORE",
  "priority": "3",
  "rank": "20",
  "project": "net",
  "warning_line": "dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;\n",
  "warning_method": "public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {\nint bytesRead, timeouts, lastBlock, block, hostPort, dataLength, offset, totalThisPacket;\nTFTPPacket sent, received = null;\nTFTPErrorPacket error;\nTFTPDataPacket data = new TFTPDataPacket(host, port, 0, _sendBuffer, 4, 0);\nTFTPAckPacket ack;\nboolean justStarted = true;\nbeginBufferedOps();\ndataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;\ntotalBytesSent = 0L;\nblock = 0;\nboolean lastAckWait = false;\nif (mode == TFTP.ASCII_MODE) {\ninput = new ToNetASCIIInputStream(input);\n}\nsent = new TFTPWriteRequestPacket(host, port, filename, mode);\n_sendPacket: do {\n// first time: block is 0, lastBlock is 0, send a request packet.\n// subsequent: block is integer starting at 1, send data packet.\nbufferedSend(sent);\n_receivePacket: while (true) {\ntimeouts = 0;\ndo {\ntry {\nreceived = bufferedReceive();\nbreak;\n} catch (SocketException e) {\nif (++timeouts >= __maxTimeouts) {\nendBufferedOps();\nthrow new IOException(\"Connection timed out.\");\n}\ncontinue _sendPacket;\n} catch (InterruptedIOException e) {\nif (++timeouts >= __maxTimeouts) {\nendBufferedOps();\nthrow new IOException(\"Connection timed out.\");\n}\ncontinue _sendPacket;\n} catch (TFTPPacketException e) {\nendBufferedOps();\nthrow new IOException(\"Bad packet: \" + e.getMessage());\n}\n} while (timeouts < __maxTimeouts);\nif (justStarted) {\njustStarted = false;\nhostPort = received.getPort();\ndata.setPort(hostPort);\nif (!host.equals(received.getAddress())) {\nhost = received.getAddress();\ndata.setAddress(host);\nsent.setAddress(host);\n}\n}\nif (host.equals(received.getAddress()) && received.getPort() == hostPort) {\nswitch(received.getType()) {\ncase TFTPPacket.ERROR:\nerror = (TFTPErrorPacket) received;\nendBufferedOps();\nthrow new IOException(\"Error code \" + error.getError() + \" received: \" + error.getMessage());\ncase TFTPPacket.ACKNOWLEDGEMENT:\nack = (TFTPAckPacket) received;\nlastBlock = ack.getBlockNumber();\nif (lastBlock == block) {\n++block;\nif (block > 65535) {\nblock = 0;\n}\nif (lastAckWait) {\nbreak _sendPacket;\n} else {\nbreak _receivePacket;\n}\n} else {\ndiscardPackets();\ncontinue _receivePacket;\n}\ndefault:\nendBufferedOps();\nthrow new IOException(\"Received unexpected packet type.\");\n}\n} else {\nerror = new TFTPErrorPacket(received.getAddress(), received.getPort(), TFTPErrorPacket.UNKNOWN_TID, \"Unexpected host or port.\");\nbufferedSend(error);\ncontinue _sendPacket;\n}\n}\nif (mode == TFTP.ASCII_MODE) {\ninput = new ToNetASCIIInputStream(input);\n}\nsent = new TFTPDataPacket(host, port, block, _sendBuffer, 4, totalThisPacket);\ntotalBytesSent += totalThisPacket;\n} while (totalThisPacket > 0 || lastAckWait);\n// Note: this was looping while dataLength == 0 || lastAckWait,\nendBufferedOps();\n}"
}
```

## Your Answer
//your reason
The warning indicates that the local variables `dataLength`, `lastBlock`, `hostPort`, `bytesRead`, and `totalThisPacket` are assigned values but are never used after being initialized. This could be a sign of unused code or a mistake in the logic of the program. Since these variables are used in the method to track the state of the file transfer, their initialization without usage could lead to incorrect behavior or unexpected results. Therefore, it is advisable to review the code to determine why these variables are not being used and either remove them or use them appropriately.

@@ actionable @@