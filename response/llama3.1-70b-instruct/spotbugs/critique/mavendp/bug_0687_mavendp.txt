Upon reviewing the warning, I realize that the code actually checks if `artifact` is null earlier in the method and throws an exception if it is null. Then, it checks if `artifact` is not null later in the method. This is not a redundant null check, but rather a deliberate check to ensure that the `artifact` is not null before proceeding with the rest of the method.

The warning "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE" is actually incorrect in this case, because the `artifact` variable is not guaranteed to be non-null at the point of the second check. The first null check and the exception throw do not make the `artifact` variable non-null for the rest of the method.

In fact, the second null check is actually unnecessary because the method will not reach that point if `artifact` is null, due to the earlier null check and exception throw. However, the warning is not accurate, and the code is not necessarily "dodgy" or problematic.

Therefore, the correct conclusion is:

@@ unactionable @@