{
    "category": "BAD_PRACTICE",
    "vtype": "NM_CLASS_NOT_EXCEPTION",
    "priority": "2",
    "rank": "16",
    "project": "bcel",
    "warning_line": "this(c.getStartPC(), c.getEndPC(), c.getHandlerPC(), c.getCatchType());\n}\nCodeException(final DataInput file) throws IOException {\nthis(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), file\n.readUnsignedShort());\n}\npublic CodeException(final int startPc, final int endPc, final int handlerPc, final int catchType) {\nthis.startPc = startPc;\nthis.endPc = endPc;\nthis.handlerPc = handlerPc;\nthis.catchType = catchType;\n}\n@Override\npublic void accept( final Visitor v ) {\nv.visitCodeException(this);\n}\npublic void dump( final DataOutputStream file ) throws IOException {\nfile.writeShort(startPc);\nfile.writeShort(endPc);\nfile.writeShort(handlerPc);\nfile.writeShort(catchType);\n}\npublic int getCatchType() {\nreturn catchType;\n}\npublic int getEndPC() {\nreturn endPc;\n}\npublic int getHandlerPC() {\nreturn handlerPc;\n}\npublic int getStartPC() {\nreturn startPc;\n}\npublic void setCatchType( final int catchType ) {\nthis.catchType = catchType;\n}\npublic void setEndPC( final int endPc ) {\nthis.endPc = endPc;\n}\npublic void setHandlerPC( final int handlerPc ) { \nthis.handlerPc = handlerPc;\n}\npublic void setStartPC( final int startPc ) { \nthis.startPc = startPc;\n}\n@Override\npublic String toString() {\nreturn \"CodeException(startPc = \" + startPc + \", endPc = \" + endPc + \", handlerPc = \"\n+ handlerPc + \", catchType = \" + catchType + \")\";\n}\npublic String toString( final ConstantPool cp, final boolean verbose ) {\nString str;\nif (catchType == 0) {\nstr = \"<Any exception>(0)\";\n} else {\nstr = Utility.compactClassName(cp.getConstantString(catchType, Const.CONSTANT_Class), false)\n+ (verbose ? \"(\" + catchType + \")\" : \"\");\n}\nreturn startPc + \"\\t\" + endPc + \"\\t\" + handlerPc + \"\\t\" + str;\n}\npublic String toString( final ConstantPool cp ) {\nreturn toString(cp, true);\n}\npublic CodeException copy() {\ntry {\nreturn (CodeException) clone();\n} catch (final CloneNotSupportedException e) {\n}\nreturn null;\n",
    "warning_method": "public int getEndPC() {\nreturn endPc;\n}"
}