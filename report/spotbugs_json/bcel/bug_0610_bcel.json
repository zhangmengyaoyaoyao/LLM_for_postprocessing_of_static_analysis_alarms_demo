{
    "category": "DODGY_CODE",
    "vtype": "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD",
    "priority": "3",
    "rank": "20",
    "project": "bcel",
    "warning_line": "wide = false; \n",
    "warning_method": "private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {\nshort opcode = (short) bytes.readUnsignedByte();\nString name;\nString signature;\nint default_offset = 0;\nint low;\nint high;\nint index;\nint class_index;\nint vindex;\nint constant;\nint[] jump_table;\nint no_pad_bytes = 0;\nint offset;\nStringBuilder buf = new StringBuilder(256);\nbuf.append(\"<TT>\").append(Const.getOpcodeName(opcode)).append(\"</TT></TD><TD>\");\nif ((opcode == Const.TABLESWITCH) || (opcode == Const.LOOKUPSWITCH)) {\nint remainder = bytes.getIndex() % 4;\nno_pad_bytes = (remainder == 0) ? 0 : 4 - remainder;\nfor (int i = 0; i < no_pad_bytes; i++) {\nbytes.readByte();\n}\ndefault_offset = bytes.readInt();\n}\nswitch(opcode) {\ncase Const.TABLESWITCH:\nlow = bytes.readInt();\nhigh = bytes.readInt();\noffset = bytes.getIndex() - 12 - no_pad_bytes - 1;\ndefault_offset += offset;\nbuf.append(\"<TABLE BORDER=1><TR>\");\njump_table = new int[high - low + 1];\nfor (int i = 0; i < jump_table.length; i++) {\njump_table[i] = offset + bytes.readInt();\nbuf.append(\"<TH>\").append(low + i).append(\"</TH>\");\n}\nbuf.append(\"<TH>default</TH></TR>\\n<TR>\");\nfor (int element : jump_table) {\nbuf.append(\"<TD><A HREF=\\\"#code\").append(method_number).append(\"@\").append(element).append(\"\\\">\").append(element).append(\"</A></TD>\");\n}\nbuf.append(\"<TD><A HREF=\\\"#code\").append(method_number).append(\"@\").append(default_offset).append(\"\\\">\").append(default_offset).append(\"</A></TD></TR>\\n</TABLE>\\n\");\nbreak;\ncase Const.LOOKUPSWITCH:\nint npairs = bytes.readInt();\noffset = bytes.getIndex() - 8 - no_pad_bytes - 1;\njump_table = new int[npairs];\ndefault_offset += offset;\nbuf.append(\"<TABLE BORDER=1><TR>\");\nfor (int i = 0; i < npairs; i++) {\nint match = bytes.readInt();\njump_table[i] = offset + bytes.readInt();\nbuf.append(\"<TH>\").append(match).append(\"</TH>\");\n}\nbuf.append(\"<TH>default</TH></TR>\\n<TR>\");\nfor (int i = 0; i < npairs; i++) {\nbuf.append(\"<TD><A HREF=\\\"#code\").append(method_number).append(\"@\").append(jump_table[i]).append(\"\\\">\").append(jump_table[i]).append(\"</A></TD>\");\n}\nbuf.append(\"<TD><A HREF=\\\"#code\").append(method_number).append(\"@\").append(default_offset).append(\"\\\">\").append(default_offset).append(\"</A></TD></TR>\\n</TABLE>\\n\");\nbreak;\ncase Const.GOTO:\ncase Const.IFEQ:\ncase Const.IFGE:\ncase Const.IFGT:\ncase Const.IFLE:\ncase Const.IFLT:\ncase Const.IFNE:\ncase Const.IFNONNULL:\ncase Const.IFNULL:\ncase Const.IF_ACMPEQ:\ncase Const.IF_ACMPNE:\ncase Const.IF_ICMPEQ:\ncase Const.IF_ICMPGE:\ncase Const.IF_ICMPGT:\ncase Const.IF_ICMPLE:\ncase Const.IF_ICMPLT:\ncase Const.IF_ICMPNE:\ncase Const.JSR:\nindex = bytes.getIndex() + bytes.readShort() - 1;\nbuf.append(\"<A HREF=\\\"#code\").append(method_number).append(\"@\").append(index).append(\"\\\">\").append(index).append(\"</A>\");\nbreak;\ncase Const.GOTO_W:\ncase Const.JSR_W:\nint windex = bytes.getIndex() + bytes.readInt() - 1;\nbuf.append(\"<A HREF=\\\"#code\").append(method_number).append(\"@\").append(windex).append(\"\\\">\").append(windex).append(\"</A>\");\nbreak;\ncase Const.ALOAD:\ncase Const.ASTORE:\ncase Const.DLOAD:\ncase Const.DSTORE:\ncase Const.FLOAD:\ncase Const.FSTORE:\ncase Const.ILOAD:\ncase Const.ISTORE:\ncase Const.LLOAD:\ncase Const.LSTORE:\ncase Const.RET:\nif (wide) {\nvindex = bytes.readShort();\nwide = false;\n} else {\nvindex = bytes.readUnsignedByte();\n}\nbuf.append(\"%\").append(vindex);\nbreak;\ncase Const.WIDE:\nwide = true;\nbuf.append(\"(wide)\");\nbreak;\ncase Const.NEWARRAY:\nbuf.append(\"<FONT COLOR=\\\"#00FF00\\\">\").append(Const.getTypeName(bytes.readByte())).append(\"</FONT>\");\nbreak;\ncase Const.GETFIELD:\ncase Const.GETSTATIC:\ncase Const.PUTFIELD:\ncase Const.PUTSTATIC:\nindex = bytes.readShort();\nConstantFieldref c1 = (ConstantFieldref) constant_pool.getConstant(index, Const.CONSTANT_Fieldref);\nclass_index = c1.getClassIndex();\nname = constant_pool.getConstantString(class_index, Const.CONSTANT_Class);\nname = Utility.compactClassName(name, false);\nindex = c1.getNameAndTypeIndex();\nString field_name = constant_pool.constantToString(index, Const.CONSTANT_NameAndType);\nif (name.equals(class_name)) {\nbuf.append(\"<A HREF=\\\"\").append(class_name).append(\"_methods.html#field\").append(field_name).append(\"\\\" TARGET=Methods>\").append(field_name).append(\"</A>\\n\");\n} else {\nbuf.append(constant_html.referenceConstant(class_index)).append(\".\").append(field_name);\n}\nbreak;\ncase Const.CHECKCAST:\ncase Const.INSTANCEOF:\ncase Const.NEW:\nindex = bytes.readShort();\nbuf.append(constant_html.referenceConstant(index));\nbreak;\ncase Const.INVOKESPECIAL:\ncase Const.INVOKESTATIC:\ncase Const.INVOKEVIRTUAL:\ncase Const.INVOKEINTERFACE:\ncase Const.INVOKEDYNAMIC:\nint m_index = bytes.readShort();\nString str;\nif (opcode == Const.INVOKEINTERFACE) {\nbytes.readUnsignedByte();\nbytes.readUnsignedByte();\nConstantInterfaceMethodref c = (ConstantInterfaceMethodref) constant_pool.getConstant(m_index, Const.CONSTANT_InterfaceMethodref);\nclass_index = c.getClassIndex();\nindex = c.getNameAndTypeIndex();\nname = Class2HTML.referenceClass(class_index);\n} else if (opcode == Const.INVOKEDYNAMIC) {\nbytes.readUnsignedByte();\nbytes.readUnsignedByte();\nConstantInvokeDynamic c = (ConstantInvokeDynamic) constant_pool.getConstant(m_index, Const.CONSTANT_InvokeDynamic);\nindex = c.getNameAndTypeIndex();\nname = \"#\" + c.getBootstrapMethodAttrIndex();\n} else {\n// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to\nConstantMethodref c = (ConstantMethodref) constant_pool.getConstant(m_index, Const.CONSTANT_Methodref);\nclass_index = c.getClassIndex();\nindex = c.getNameAndTypeIndex();\nname = Class2HTML.referenceClass(class_index);\n}\nstr = Class2HTML.toHTML(constant_pool.constantToString(constant_pool.getConstant(index, Const.CONSTANT_NameAndType)));\nConstantNameAndType c2 = (ConstantNameAndType) constant_pool.getConstant(index, Const.CONSTANT_NameAndType);\nsignature = constant_pool.constantToString(c2.getSignatureIndex(), Const.CONSTANT_Utf8);\nString[] args = Utility.methodSignatureArgumentTypes(signature, false);\nString type = Utility.methodSignatureReturnType(signature, false);\nbuf.append(name).append(\".<A HREF=\\\"\").append(class_name).append(\"_cp.html#cp\").append(m_index).append(\"\\\" TARGET=ConstantPool>\").append(str).append(\"</A>\").append(\"(\");\nfor (int i = 0; i < args.length; i++) {\nbuf.append(Class2HTML.referenceType(args[i]));\nif (i < args.length - 1) {\nbuf.append(\", \");\n}\n}\nbuf.append(\"):\").append(Class2HTML.referenceType(type));\nbreak;\ncase Const.LDC_W:\ncase Const.LDC2_W:\nindex = bytes.readShort();\nbuf.append(\"<A HREF=\\\"\").append(class_name).append(\"_cp.html#cp\").append(index).append(\"\\\" TARGET=\\\"ConstantPool\\\">\").append(Class2HTML.toHTML(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag()))).append(\"</a>\");\nbreak;\ncase Const.LDC:\nindex = bytes.readUnsignedByte();\nbuf.append(\"<A HREF=\\\"\").append(class_name).append(\"_cp.html#cp\").append(index).append(\"\\\" TARGET=\\\"ConstantPool\\\">\").append(Class2HTML.toHTML(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag()))).append(\"</a>\");\nbreak;\ncase Const.ANEWARRAY:\nindex = bytes.readShort();\nbuf.append(constant_html.referenceConstant(index));\nbreak;\ncase Const.MULTIANEWARRAY:\nindex = bytes.readShort();\nint dimensions = bytes.readByte();\nbuf.append(constant_html.referenceConstant(index)).append(\":\").append(dimensions).append(\"-dimensional\");\nbreak;\ncase Const.IINC:\nif (wide) {\nvindex = bytes.readShort();\nconstant = bytes.readShort();\nwide = false;\n} else {\nvindex = bytes.readUnsignedByte();\nconstant = bytes.readByte();\n}\nbuf.append(\"%\").append(vindex).append(\" \").append(constant);\nbreak;\ndefault:\nif (Const.getNoOfOperands(opcode) > 0) {\nfor (int i = 0; i < Const.getOperandTypeCount(opcode); i++) {\nswitch(Const.getOperandType(opcode, i)) {\ncase Const.T_BYTE:\nbuf.append(bytes.readUnsignedByte());\nbreak;\ncase // Either branch or index\nConst.T_SHORT:\nbuf.append(bytes.readShort());\nbreak;\ncase Const.T_INT:\nbuf.append(bytes.readInt());\nbreak;\ndefault:\n// Never reached\nthrow new IllegalStateException(\"Unreachable default case reached! \" + Const.getOperandType(opcode, i));\n}\nbuf.append(\"&nbsp;\");\n}\n}\n}\nbuf.append(\"</TD>\");\nreturn buf.toString();\n}"
}