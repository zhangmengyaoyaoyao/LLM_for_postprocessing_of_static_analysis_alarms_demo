{
    "category": "BAD_PRACTICE",
    "vtype": "SE_NO_SERIALVERSIONID",
    "priority": "3",
    "rank": "19",
    "project": "configuration",
    "warning_line": "{\nthis.config = config;\nthis.path = path;\nthis.trailing = path.endsWith(\"/\");\nthis.init = true;\n}\n@Override\nprotected void addPropertyInternal(String key, Object value)\n{\nconfig.addProperty(makePath(key), value);\n}\n@Override\nprotected void clearInternal()\n{\ngetConfig().clear();\n}\n@Override\nprotected void clearPropertyDirect(String key)\n{\nconfig.clearProperty(makePath(key));\n}\n@Override\nprotected boolean containsKeyInternal(String key)\n{\nreturn config.containsKey(makePath(key));\n}\n@Override\npublic BigDecimal getBigDecimal(String key, BigDecimal defaultValue)\n{\nreturn config.getBigDecimal(makePath(key), defaultValue);\n}\n@Override\npublic BigDecimal getBigDecimal(String key)\n{\nreturn config.getBigDecimal(makePath(key));\n}\n@Override\npublic BigInteger getBigInteger(String key, BigInteger defaultValue)\n{\nreturn config.getBigInteger(makePath(key), defaultValue);\n}\n@Override\npublic BigInteger getBigInteger(String key)\n{\nreturn config.getBigInteger(makePath(key));\n}\n@Override\npublic boolean getBoolean(String key, boolean defaultValue)\n{\nreturn config.getBoolean(makePath(key), defaultValue);\n}\n@Override\npublic Boolean getBoolean(String key, Boolean defaultValue)\n{\nreturn config.getBoolean(makePath(key), defaultValue);\n}\n@Override\npublic boolean getBoolean(String key)\n{\nreturn config.getBoolean(makePath(key));\n}\n@Override\npublic byte getByte(String key, byte defaultValue)\n{\nreturn config.getByte(makePath(key), defaultValue);\n}\n@Override\npublic Byte getByte(String key, Byte defaultValue)\n{\nreturn config.getByte(makePath(key), defaultValue);\n}\n@Override\npublic byte getByte(String key)\n{\nreturn config.getByte(makePath(key));\n}\n@Override\npublic double getDouble(String key, double defaultValue)\n{\nreturn config.getDouble(makePath(key), defaultValue);\n}\n@Override\npublic Double getDouble(String key, Double defaultValue)\n{\nreturn config.getDouble(makePath(key), defaultValue);\n}\n@Override\npublic double getDouble(String key)\n{\nreturn config.getDouble(makePath(key));\n}\n@Override\npublic float getFloat(String key, float defaultValue)\n{\nreturn config.getFloat(makePath(key), defaultValue);\n}\n@Override\npublic Float getFloat(String key, Float defaultValue)\n{\nreturn config.getFloat(makePath(key), defaultValue);\n}\n@Override\npublic float getFloat(String key)\n{\nreturn config.getFloat(makePath(key));\n}\n@Override\npublic int getInt(String key, int defaultValue)\n{\nreturn config.getInt(makePath(key), defaultValue);\n}\n@Override\npublic int getInt(String key)\n{\nreturn config.getInt(makePath(key));\n}\n@Override\npublic Integer getInteger(String key, Integer defaultValue)\n{\nreturn config.getInteger(makePath(key), defaultValue);\n}\n@Override\nprotected Iterator<String> getKeysInternal()\n{\nreturn config.getKeys(makePath());\n}\n@Override\nprotected Iterator<String> getKeysInternal(String prefix)\n{\nreturn config.getKeys(makePath(prefix));\n}\n@Override\npublic List<Object> getList(String key, List<Object> defaultValue)\n{\nreturn config.getList(makePath(key), defaultValue);\n}\n@Override\npublic List<Object> getList(String key)\n{\nreturn config.getList(makePath(key));\n}\n@Override\npublic long getLong(String key, long defaultValue)\n{\nreturn config.getLong(makePath(key), defaultValue);\n}\n@Override\npublic Long getLong(String key, Long defaultValue)\n{\nreturn config.getLong(makePath(key), defaultValue);\n}\n@Override\npublic long getLong(String key)\n{\nreturn config.getLong(makePath(key));\n}\n@Override\npublic Properties getProperties(String key)\n{\nreturn config.getProperties(makePath(key));\n}\n@Override\nprotected Object getPropertyInternal(String key)\n{\nreturn config.getProperty(makePath(key));\n}\n@Override\npublic short getShort(String key, short defaultValue)\n{\nreturn config.getShort(makePath(key), defaultValue);\n}\n@Override\npublic Short getShort(String key, Short defaultValue)\n{\nreturn config.getShort(makePath(key), defaultValue);\n}\n@Override\npublic short getShort(String key)\n{\nreturn config.getShort(makePath(key));\n}\n@Override\npublic String getString(String key, String defaultValue)\n{\nreturn config.getString(makePath(key), defaultValue);\n}\n@Override\npublic String getString(String key)\n{\nreturn config.getString(makePath(key));\n}\n@Override\npublic String[] getStringArray(String key)\n{\nreturn config.getStringArray(makePath(key));\n}\n@Override\nprotected boolean isEmptyInternal()\n{\nreturn getConfig().isEmpty();\n}\n@Override\nprotected void setPropertyInternal(String key, Object value)\n{\ngetConfig().setProperty(key, value);\n}\n@Override\npublic Configuration subset(String prefix)\n{\nreturn getConfig().subset(prefix);\n}\n@Override\npublic ConfigurationNode getRootNode()\n{\nreturn getConfig().getRootNode();\n}\n@Override\nprotected void setRootNodeInternal(ConfigurationNode rootNode)\n{\nif (init)\n{\ngetConfig().setRootNode(rootNode);\n}\nelse\n{\nsuper.setRootNodeInternal(rootNode);\n}\n}\n@Override\npublic ExpressionEngine getExpressionEngine()\n{\nreturn config.getExpressionEngine();\n}\n@Override\npublic void setExpressionEngine(ExpressionEngine expressionEngine)\n{\nif (init)\n{\nconfig.setExpressionEngine(expressionEngine);\n}\nelse\n{\nsuper.setExpressionEngine(expressionEngine);\n}\n}\n@Override\nprotected void addNodesInternal(String key, Collection<? extends ConfigurationNode> nodes)\n{\ngetConfig().addNodes(key, nodes);\n}\n@Override\npublic SubnodeConfiguration configurationAt(String key, boolean supportUpdates)\n{\nreturn config.configurationAt(makePath(key), supportUpdates);\n}\n@Override\npublic SubnodeConfiguration configurationAt(String key)\n{\nreturn config.configurationAt(makePath(key));\n}\n@Override\npublic List<SubnodeConfiguration> configurationsAt(String key)\n{\nreturn config.configurationsAt(makePath(key));\n}\n@Override\nprotected List<ConfigurationNode> clearTreeInternal(String key)\n{\nconfig.clearTree(makePath(key));\nreturn Collections.emptyList();\n}\n@Override\nprotected int getMaxIndexInternal(String key)\n{\nreturn config.getMaxIndex(makePath(key));\n}\n@Override\npublic Configuration interpolatedConfiguration()\n{\nreturn getConfig().interpolatedConfiguration();\n}\n@Override\npublic void addConfigurationListener(ConfigurationListener l)\n{\ngetConfig().addConfigurationListener(l);\n}\n@Override\npublic boolean removeConfigurationListener(ConfigurationListener l)\n{\nreturn getConfig().removeConfigurationListener(l);\n}\n@Override\npublic Collection<ConfigurationListener> getConfigurationListeners()\n{\nreturn getConfig().getConfigurationListeners();\n}\n@Override\npublic void clearConfigurationListeners()\n{\ngetConfig().clearConfigurationListeners();\n}\n@Override\npublic void addErrorListener(ConfigurationErrorListener l)\n{\ngetConfig().addErrorListener(l);\n}\n@Override\npublic boolean removeErrorListener(ConfigurationErrorListener l)\n{\nreturn getConfig().removeErrorListener(l);\n}\n@Override\npublic void clearErrorListeners()\n{\ngetConfig().clearErrorListeners();\n}\npublic void write(Writer writer) throws ConfigurationException, IOException\n{\nfetchFileBased().write(writer);\n}\npublic void read(Reader reader) throws ConfigurationException, IOException\n{\nfetchFileBased().read(reader);\n}\n@Override\npublic Collection<ConfigurationErrorListener> getErrorListeners()\n{\nreturn getConfig().getErrorListeners();\n}\nprivate BaseHierarchicalConfiguration getConfig()\n{\nreturn config.configurationAt(makePath());\n}\nprivate String makePath()\n{\nString pathPattern = trailing ? path.substring(0, path.length() - 1) : path;\nreturn substitute(pathPattern);\n}\nprivate String makePath(String item)\n{\nString pathPattern;\nif ((item.length() == 0 || item.startsWith(\"/\")) && trailing)\n{\npathPattern = path.substring(0, path.length() - 1);\n}\nelse  if (!item.startsWith(\"/\") || !trailing)\n{\npathPattern = path + \"/\";\n}\nelse\n{\npathPattern = path;\n}\nreturn substitute(pathPattern) + item;\n}\nprivate String substitute(String pattern)\n{\nObject value = getInterpolator().interpolate(pattern);\nreturn (value != null) ? value.toString() : null;\n}\nprivate FileBased fetchFileBased() throws ConfigurationException\n{\nif (!(config instanceof FileBased))\n{\nthrow new ConfigurationException(\n\"Wrapped configuration does not implement FileBased!\"\n+ \" No I/O operations are supported.\");\n}\nreturn (FileBased) config;\n",
    "warning_method": "@Override\nprotected boolean isEmptyInternal() {\nreturn getConfig().isEmpty();\n}"
}