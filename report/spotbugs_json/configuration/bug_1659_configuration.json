{
    "category": "PERFORMANCE",
    "vtype": "SIC_INNER_SHOULD_BE_STATIC",
    "priority": "2",
    "rank": "18",
    "project": "configuration",
    "warning_line": "{\nconfiguration = config;\nname = n;\natPath = parseAt(at);\nthis.at = at;\n}\npublic AbstractHierarchicalConfiguration<?> getConfiguration()\n{\nreturn configuration;\n}\npublic String getName()\n{\nreturn name;\n}\npublic String getAt()\n{\nreturn at;\n}\npublic Object getRootNode()\n{\nreturn rootNode;\n}\npublic CombinedNode getTransformedRoot()\n{\nCombinedNode result = new CombinedNode();\nCombinedNode atParent = result;\nif (atPath != null)\n{\nfor (String name : atPath)\n{\nCombinedNode node = new CombinedNode();\nnode.setName(name);\natParent.addChild(name, node);\natParent = node;\n}\n}\nrootNode = append(atParent, getConfiguration());\nreturn result;\n}\nprivate <T> T append(CombinedNode atParent,\nAbstractHierarchicalConfiguration<T> config)\n{\nT root = config.getRootNode();\natParent.appendChildren(root, config.getNodeHandler());\natParent.appendAttributes(root, config.getNodeHandler());\nreturn root;\n}\nprivate Collection<String> parseAt(String at)\n{\nif (at == null)\n{\nreturn null;\n}\nCollection<String> result = new ArrayList<String>();\nDefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(\nAT_ENGINE, at).iterator();\nwhile (it.hasNext())\n{\nresult.add(it.nextKey());\n}\nreturn result;\n",
    "warning_method": "private CombinedNode constructCombinedNode() {\ninitSubHandlers();\nif (getNumberOfConfigurations() < 1) {\nreturn new CombinedNode();\n} else {\nIterator<ConfigData> it = configurations.iterator();\nCombinedNode node = it.next().getTransformedRoot();\nwhile (it.hasNext()) {\nnode = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());\n}\nif (getLogger().isDebugEnabled()) {\nByteArrayOutputStream os = new ByteArrayOutputStream();\nPrintStream stream = new PrintStream(os);\nTreeUtils.printTree(stream, node, getNodeHandler());\ngetLogger().debug(os.toString());\n}\nreturn node;\n}\n}"
}