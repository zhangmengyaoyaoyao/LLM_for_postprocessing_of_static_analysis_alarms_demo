{
    "category": "PERFORMANCE",
    "vtype": "SIC_INNER_SHOULD_BE_STATIC_ANON",
    "priority": "3",
    "rank": "20",
    "project": "configuration",
    "warning_line": "{\n@Override\npublic InputSource resolveEntity(String publicId, String systemId)\n{\nreturn new InputSource(getClass().getClassLoader()\n.getResourceAsStream(\"PropertyList-1.0.dtd\"));\n",
    "warning_method": "private void printValue(PrintWriter out, int indentLevel, Object value) {\nString padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\nif (value instanceof Date) {\nsynchronized (PListNodeBuilder.FORMAT) {\nout.println(padding + \"<date>\" + PListNodeBuilder.FORMAT.format((Date) value) + \"</date>\");\n}\n} else if (value instanceof Calendar) {\nprintValue(out, indentLevel, ((Calendar) value).getTime());\n} else if (value instanceof Number) {\nif (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {\nout.println(padding + \"<real>\" + value.toString() + \"</real>\");\n} else {\nout.println(padding + \"<integer>\" + value.toString() + \"</integer>\");\n}\n} else if (value instanceof Boolean) {\nif (((Boolean) value).booleanValue()) {\nout.println(padding + \"<true/>\");\n} else {\nout.println(padding + \"<false/>\");\n}\n} else if (value instanceof List) {\nout.println(padding + \"<array>\");\nfor (Object o : (List<?>) value) {\nprintValue(out, indentLevel + 1, o);\n}\nout.println(padding + \"</array>\");\n} else if (value instanceof HierarchicalConfiguration) {\n@SuppressWarnings(\"unchecked\")\nHierarchicalConfiguration<ImmutableNode> config = (HierarchicalConfiguration<ImmutableNode>) value;\nprintNode(out, indentLevel, config.getNodeModel().getNodeHandler().getRootNode());\n} else if (value instanceof Configuration) {\nout.println(padding + \"<dict>\");\nConfiguration config = (Configuration) value;\nIterator<String> it = config.getKeys();\nwhile (it.hasNext()) {\nString key = it.next();\nImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();\nprintNode(out, indentLevel + 1, node);\nif (it.hasNext()) {\nout.println();\n}\n}\nout.println(padding + \"</dict>\");\n} else if (value instanceof Map) {\nMap<String, Object> map = transformMap((Map<?, ?>) value);\nprintValue(out, indentLevel, new MapConfiguration(map));\n} else if (value instanceof byte[]) {\nString base64;\ntry {\nbase64 = new String(Base64.encodeBase64((byte[]) value), DATA_ENCODING);\n} catch (UnsupportedEncodingException e) {\nthrow new AssertionError(e);\n}\nout.println(padding + \"<data>\" + StringEscapeUtils.escapeXml10(base64) + \"</data>\");\n} else if (value != null) {\nout.println(padding + \"<string>\" + StringEscapeUtils.escapeXml10(String.valueOf(value)) + \"</string>\");\n} else {\nout.println(padding + \"<string/>\");\n}\n}"
}