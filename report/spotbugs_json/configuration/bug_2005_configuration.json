{
    "category": "DODGY_CODE",
    "vtype": "RI_REDUNDANT_INTERFACES",
    "priority": "3",
    "rank": "20",
    "project": "configuration",
    "warning_line": "public class CombinedConfiguration extends HierarchicalConfiguration implements\nConfigurationListener, Cloneable\n{\npublic static final int EVENT_COMBINED_INVALIDATE = 40;\nprivate static final long serialVersionUID = 8338574525528692307L;\nprivate static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();\nprivate static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();\nprivate static final String PROP_RELOAD_CHECK = \"CombinedConfigurationReloadCheck\";\nprivate NodeCombiner nodeCombiner;\nprivate ConfigurationNode combinedRoot;\nprivate List configurations;\nprivate Map namedConfigurations;\nprivate boolean forceReloadCheck;\npublic CombinedConfiguration(NodeCombiner comb)\n{\nsetNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);\nclear();\n}\npublic CombinedConfiguration()\n{\nthis(null);\n}\npublic NodeCombiner getNodeCombiner()\n{\nreturn nodeCombiner;\n}\npublic void setNodeCombiner(NodeCombiner nodeCombiner)\n{\nif (nodeCombiner == null)\n{\nthrow new IllegalArgumentException(\n\"Node combiner must not be null!\");\n}\nthis.nodeCombiner = nodeCombiner;\ninvalidate();\n}\npublic boolean isForceReloadCheck()\n{\nreturn forceReloadCheck;\n}\npublic void setForceReloadCheck(boolean forceReloadCheck)\n{\nthis.forceReloadCheck = forceReloadCheck;\n}\npublic void addConfiguration(AbstractConfiguration config, String name,\nString at)\n{\nif (config == null)\n{\nthrow new IllegalArgumentException(\n\"Added configuration must not be null!\");\n}\nif (name != null && namedConfigurations.containsKey(name))\n{\nthrow new ConfigurationRuntimeException(\n\"A configuration with the name '\"\n+ name\n+ \"' already exists in this combined configuration!\");\n}\nConfigData cd = new ConfigData(config, name, at);\nconfigurations.add(cd);\nif (name != null)\n{\nnamedConfigurations.put(name, config);\n}\nconfig.addConfigurationListener(this);\ninvalidate();\n}\npublic void addConfiguration(AbstractConfiguration config, String name)\n{\naddConfiguration(config, name, null);\n}\npublic void addConfiguration(AbstractConfiguration config)\n{\naddConfiguration(config, null, null);\n}\npublic int getNumberOfConfigurations()\n{\nreturn configurations.size();\n}\npublic Configuration getConfiguration(int index)\n{\nConfigData cd = (ConfigData) configurations.get(index);\nreturn cd.getConfiguration();\n}\npublic Configuration getConfiguration(String name)\n{\nreturn (Configuration) namedConfigurations.get(name);\n}\npublic boolean removeConfiguration(Configuration config)\n{\nfor (int index = 0; index < getNumberOfConfigurations(); index++)\n{\nif (((ConfigData) configurations.get(index)).getConfiguration() == config)\n{\nremoveConfigurationAt(index);\nreturn true;\n}\n}\nreturn false;\n}\npublic Configuration removeConfigurationAt(int index)\n{\nConfigData cd = (ConfigData) configurations.remove(index);\nif (cd.getName() != null)\n{\nnamedConfigurations.remove(cd.getName());\n}\ncd.getConfiguration().removeConfigurationListener(this);\ninvalidate();\nreturn cd.getConfiguration();\n}\npublic Configuration removeConfiguration(String name)\n{\nConfiguration conf = getConfiguration(name);\nif (conf != null)\n{\nremoveConfiguration(conf);\n}\nreturn conf;\n}\npublic Set getConfigurationNames()\n{\nreturn namedConfigurations.keySet();\n}\npublic void invalidate()\n{\nsynchronized (getNodeCombiner()) \n{\ncombinedRoot = null;\n}\nfireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);\n}\npublic void configurationChanged(ConfigurationEvent event)\n{\ninvalidate();\n}\npublic ConfigurationNode getRootNode()\n{\nsynchronized (getNodeCombiner())\n{\nif (combinedRoot == null)\n{\ncombinedRoot = constructCombinedNode();\n}\nreturn combinedRoot;\n}\n}\npublic void clear()\n{\nfireEvent(EVENT_CLEAR, null, null, true);\nconfigurations = new ArrayList();\nnamedConfigurations = new HashMap();\nfireEvent(EVENT_CLEAR, null, null, false);\ninvalidate();\n}\npublic Object clone()\n{\nCombinedConfiguration copy = (CombinedConfiguration) super.clone();\ncopy.clear();\nfor (Iterator it = configurations.iterator(); it.hasNext();)\n{\nConfigData cd = (ConfigData) it.next();\ncopy.addConfiguration((AbstractConfiguration) ConfigurationUtils\n.cloneConfiguration(cd.getConfiguration()), cd.getName(),\ncd.getAt());\n}\ncopy.setRootNode(new DefaultConfigurationNode());\nreturn copy;\n}\npublic Object getProperty(String key)\n{\nif (isForceReloadCheck())\n{\nfor (Iterator it = configurations.iterator(); it.hasNext();)\n{\ntry\n{\n((ConfigData) it.next()).getConfiguration().getProperty(\nPROP_RELOAD_CHECK);\n}\ncatch (Exception ex)\n{\n;\n}\n}\n}\nreturn super.getProperty(key);\n}\nprivate ConfigurationNode constructCombinedNode()\n{\nif (getNumberOfConfigurations() < 1)\n{\nreturn new ViewNode();\n}\nelse\n{\nIterator it = configurations.iterator();\nConfigurationNode node = ((ConfigData) it.next())\n.getTransformedRoot();\nwhile (it.hasNext())\n{\nnode = getNodeCombiner().combine(node,\n((ConfigData) it.next()).getTransformedRoot());\n}\nreturn node;\n",
    "warning_method": "private ConfigurationNode combinedRoot;"
}