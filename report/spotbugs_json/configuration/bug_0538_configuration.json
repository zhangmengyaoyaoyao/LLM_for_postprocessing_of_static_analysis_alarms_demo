{
    "category": "BAD_PRACTICE",
    "vtype": "SE_NO_SERIALVERSIONID",
    "priority": "2",
    "rank": "16",
    "project": "configuration",
    "warning_line": "private static ThreadLocal recursive = new ThreadLocal()\n{\nprotected synchronized Object initialValue()\n{\nreturn Boolean.FALSE;\n}\n};\nprivate final Map configurationsMap = new HashMap();\nprivate String pattern;\nprivate boolean init;\nprivate boolean ignoreException = true;\nprivate boolean schemaValidation;\nprivate boolean validating;\nprivate boolean attributeSplittingDisabled;\nprivate String loggerName = MultiFileHierarchicalConfiguration.class.getName();\nprivate ReloadingStrategy fileStrategy;\nprivate EntityResolver entityResolver;\nprivate StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());\npublic MultiFileHierarchicalConfiguration()\n{\nsuper();\nthis.init = true;\nsetLogger(LogFactory.getLog(loggerName));\n}\npublic MultiFileHierarchicalConfiguration(String pathPattern)\n{\nsuper();\nthis.pattern = pathPattern;\nthis.init = true;\nsetLogger(LogFactory.getLog(loggerName));\n}\npublic void setLoggerName(String name)\n{\nthis.loggerName = name;\n}\npublic void setFilePattern(String pathPattern)\n{\nthis.pattern = pathPattern;\n}\npublic boolean isSchemaValidation()\n{\nreturn schemaValidation;\n}\npublic void setSchemaValidation(boolean schemaValidation)\n{\nthis.schemaValidation = schemaValidation;\n}\npublic boolean isValidating()\n{\nreturn validating;\n}\npublic void setValidating(boolean validating)\n{\nthis.validating = validating;\n}\npublic boolean isAttributeSplittingDisabled()\n{\nreturn attributeSplittingDisabled;\n}\npublic void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)\n{\nthis.attributeSplittingDisabled = attributeSplittingDisabled;\n}\npublic ReloadingStrategy getReloadingStrategy()\n{\nreturn fileStrategy;\n}\npublic void setReloadingStrategy(ReloadingStrategy strategy)\n{\nthis.fileStrategy = strategy;\n}\npublic void setEntityResolver(EntityResolver entityResolver)\n{\nthis.entityResolver = entityResolver;\n}\npublic EntityResolver getEntityResolver()\n{\nreturn this.entityResolver;\n}\npublic void setIgnoreException(boolean ignoreException)\n{\nthis.ignoreException = ignoreException;\n}\npublic void addProperty(String key, Object value)\n{\nthis.getConfiguration().addProperty(key, value);\n}\npublic void clear()\n{\nthis.getConfiguration().clear();\n}\npublic void clearProperty(String key)\n{\nthis.getConfiguration().clearProperty(key);\n}\npublic boolean containsKey(String key)\n{\nreturn this.getConfiguration().containsKey(key);\n}\npublic BigDecimal getBigDecimal(String key, BigDecimal defaultValue)\n{\nreturn this.getConfiguration().getBigDecimal(key, defaultValue);\n}\npublic BigDecimal getBigDecimal(String key)\n{\nreturn this.getConfiguration().getBigDecimal(key);\n}\npublic BigInteger getBigInteger(String key, BigInteger defaultValue)\n{\nreturn this.getConfiguration().getBigInteger(key, defaultValue);\n}\npublic BigInteger getBigInteger(String key)\n{\nreturn this.getConfiguration().getBigInteger(key);\n}\npublic boolean getBoolean(String key, boolean defaultValue)\n{\nreturn this.getConfiguration().getBoolean(key, defaultValue);\n}\npublic Boolean getBoolean(String key, Boolean defaultValue)\n{\nreturn this.getConfiguration().getBoolean(key, defaultValue);\n}\npublic boolean getBoolean(String key)\n{\nreturn this.getConfiguration().getBoolean(key);\n}\npublic byte getByte(String key, byte defaultValue)\n{\nreturn this.getConfiguration().getByte(key, defaultValue);\n}\npublic Byte getByte(String key, Byte defaultValue)\n{\nreturn this.getConfiguration().getByte(key, defaultValue);\n}\npublic byte getByte(String key)\n{\nreturn this.getConfiguration().getByte(key);\n}\npublic double getDouble(String key, double defaultValue)\n{\nreturn this.getConfiguration().getDouble(key, defaultValue);\n}\npublic Double getDouble(String key, Double defaultValue)\n{\nreturn this.getConfiguration().getDouble(key, defaultValue);\n}\npublic double getDouble(String key)\n{\nreturn this.getConfiguration().getDouble(key);\n}\npublic float getFloat(String key, float defaultValue)\n{\nreturn this.getConfiguration().getFloat(key, defaultValue);\n}\npublic Float getFloat(String key, Float defaultValue)\n{\nreturn this.getConfiguration().getFloat(key, defaultValue);\n}\npublic float getFloat(String key)\n{\nreturn this.getConfiguration().getFloat(key);\n}\npublic int getInt(String key, int defaultValue)\n{\nreturn this.getConfiguration().getInt(key, defaultValue);\n}\npublic int getInt(String key)\n{\nreturn this.getConfiguration().getInt(key);\n}\npublic Integer getInteger(String key, Integer defaultValue)\n{\nreturn this.getConfiguration().getInteger(key, defaultValue);\n}\npublic Iterator getKeys()\n{\nreturn this.getConfiguration().getKeys();\n}\npublic Iterator getKeys(String prefix)\n{\nreturn this.getConfiguration().getKeys(prefix);\n}\npublic List getList(String key, List defaultValue)\n{\nreturn this.getConfiguration().getList(key, defaultValue);\n}\npublic List getList(String key)\n{\nreturn this.getConfiguration().getList(key);\n}\npublic long getLong(String key, long defaultValue)\n{\nreturn this.getConfiguration().getLong(key, defaultValue);\n}\npublic Long getLong(String key, Long defaultValue)\n{\nreturn this.getConfiguration().getLong(key, defaultValue);\n}\npublic long getLong(String key)\n{\nreturn this.getConfiguration().getLong(key);\n}\npublic Properties getProperties(String key)\n{\nreturn this.getConfiguration().getProperties(key);\n}\npublic Object getProperty(String key)\n{\nreturn this.getConfiguration().getProperty(key);\n}\npublic short getShort(String key, short defaultValue)\n{\nreturn this.getConfiguration().getShort(key, defaultValue);\n}\npublic Short getShort(String key, Short defaultValue)\n{\nreturn this.getConfiguration().getShort(key, defaultValue);\n}\npublic short getShort(String key)\n{\nreturn this.getConfiguration().getShort(key);\n}\npublic String getString(String key, String defaultValue)\n{\nreturn this.getConfiguration().getString(key, defaultValue);\n}\npublic String getString(String key)\n{\nreturn this.getConfiguration().getString(key);\n}\npublic String[] getStringArray(String key)\n{\nreturn this.getConfiguration().getStringArray(key);\n}\npublic boolean isEmpty()\n{\nreturn this.getConfiguration().isEmpty();\n}\npublic void setProperty(String key, Object value)\n{\nif (init)\n{\nthis.getConfiguration().setProperty(key, value);\n}\n}\npublic Configuration subset(String prefix)\n{\nreturn this.getConfiguration().subset(prefix);\n}\npublic Object getReloadLock()\n{\nreturn this.getConfiguration().getReloadLock();\n}\npublic Node getRoot()\n{\nreturn this.getConfiguration().getRoot();\n}\npublic void setRoot(Node node)\n{\nif (init)\n{\nthis.getConfiguration().setRoot(node);\n}\nelse\n{\nsuper.setRoot(node);\n}\n}\npublic ConfigurationNode getRootNode()\n{\nreturn this.getConfiguration().getRootNode();\n}\npublic void setRootNode(ConfigurationNode rootNode)\n{\nif (init)\n{\nthis.getConfiguration().setRootNode(rootNode);\n}\nelse\n{\nsuper.setRootNode(rootNode);\n}\n}\npublic ExpressionEngine getExpressionEngine()\n{\nreturn super.getExpressionEngine();\n}\npublic void setExpressionEngine(ExpressionEngine expressionEngine)\n{\nsuper.setExpressionEngine(expressionEngine);\n}\npublic void addNodes(String key, Collection nodes)\n{\nthis.getConfiguration().addNodes(key, nodes);\n}\npublic SubnodeConfiguration configurationAt(String key, boolean supportUpdates)\n{\nreturn this.getConfiguration().configurationAt(key, supportUpdates);\n}\npublic SubnodeConfiguration configurationAt(String key)\n{\nreturn this.getConfiguration().configurationAt(key);\n}\npublic List configurationsAt(String key)\n{\nreturn this.getConfiguration().configurationsAt(key);\n}\npublic void clearTree(String key)\n{\nthis.getConfiguration().clearTree(key);\n}\npublic int getMaxIndex(String key)\n{\nreturn this.getConfiguration().getMaxIndex(key);\n}\npublic Configuration interpolatedConfiguration()\n{\nreturn this.getConfiguration().interpolatedConfiguration();\n}\npublic void addConfigurationListener(ConfigurationListener l)\n{\nsuper.addConfigurationListener(l);\n}\npublic boolean removeConfigurationListener(ConfigurationListener l)\n{\nreturn super.removeConfigurationListener(l);\n}\npublic Collection getConfigurationListeners()\n{\nreturn super.getConfigurationListeners();\n}\npublic void clearConfigurationListeners()\n{\nsuper.clearConfigurationListeners();\n}\npublic void addErrorListener(ConfigurationErrorListener l)\n{\nsuper.addErrorListener(l);\n}\npublic boolean removeErrorListener(ConfigurationErrorListener l)\n{\nreturn super.removeErrorListener(l);\n}\npublic void clearErrorListeners()\n{\nsuper.clearErrorListeners();\n}\npublic Collection getErrorListeners()\n{\nreturn super.getErrorListeners();\n}\npublic void save(Writer writer) throws ConfigurationException\n{\nif (init)\n{\nthis.getConfiguration().save(writer);\n}\n}\npublic void load(Reader reader) throws ConfigurationException\n{\nif (init)\n{\nthis.getConfiguration().load(reader);\n}\n}\npublic void load() throws ConfigurationException\n{\nthis.getConfiguration();\n}\npublic void load(String fileName) throws ConfigurationException\n{\nthis.getConfiguration().load(fileName);\n}\npublic void load(File file) throws ConfigurationException\n{\nthis.getConfiguration().load(file);\n}\npublic void load(URL url) throws ConfigurationException\n{\nthis.getConfiguration().load(url);\n}\npublic void load(InputStream in) throws ConfigurationException\n{\nthis.getConfiguration().load(in);\n}\npublic void load(InputStream in, String encoding) throws ConfigurationException\n{\nthis.getConfiguration().load(in, encoding);\n}\npublic void save() throws ConfigurationException\n{\nthis.getConfiguration().save();\n}\npublic void save(String fileName) throws ConfigurationException\n{\nthis.getConfiguration().save(fileName);\n}\npublic void save(File file) throws ConfigurationException\n{\nthis.getConfiguration().save(file);\n}\npublic void save(URL url) throws ConfigurationException\n{\nthis.getConfiguration().save(url);\n}\npublic void save(OutputStream out) throws ConfigurationException\n{\nthis.getConfiguration().save(out);\n}\npublic void save(OutputStream out, String encoding) throws ConfigurationException\n{\nthis.getConfiguration().save(out, encoding);\n}\npublic void configurationChanged(ConfigurationEvent event)\n{\nif (event.getSource() instanceof XMLConfiguration)\n{\nIterator iter = getConfigurationListeners().iterator();\nwhile (iter.hasNext())\n{\nConfigurationListener listener = (ConfigurationListener) iter.next();\nlistener.configurationChanged(event);\n}\n}\n}\npublic void configurationError(ConfigurationErrorEvent event)\n{\nif (event.getSource() instanceof XMLConfiguration)\n{\nIterator iter = getErrorListeners().iterator();\nwhile (iter.hasNext())\n{\nConfigurationErrorListener listener = (ConfigurationErrorListener) iter.next();\nlistener.configurationError(event);\n}\n}\nif (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)\n{\nif (isThrowable(event.getCause()))\n{\nthrow new ConfigurationRuntimeException(event.getCause());\n}\n}\n}\nprotected Object resolveContainerStore(String key)\n{\nif (((Boolean) recursive.get()).booleanValue())\n{\nreturn null;\n}\nrecursive.set(Boolean.TRUE);\ntry\n{\nreturn super.resolveContainerStore(key);\n}\nfinally\n{\nrecursive.set(Boolean.FALSE);\n}\n}\npublic void removeConfiguration()\n{\nString path = getSubstitutor().replace(pattern);\nsynchronized (configurationsMap)\n{\nconfigurationsMap.remove(path);\n}\n}\nprivate AbstractHierarchicalFileConfiguration getConfiguration()\n{\nif (pattern == null)\n{\nthrow new ConfigurationRuntimeException(\"File pattern must be defined\");\n}\nString path = localSubst.replace(pattern);\nsynchronized (configurationsMap)\n{\nif (configurationsMap.containsKey(path))\n{\nreturn (AbstractHierarchicalFileConfiguration) configurationsMap.get(path);\n}\n}\nif (path.equals(pattern))\n{\nXMLConfiguration configuration = new XMLConfiguration()\n{\npublic void load() throws ConfigurationException\n{\n}\npublic void save() throws ConfigurationException\n{\n}\n};\nsynchronized (configurationsMap)\n{\nconfigurationsMap.put(pattern, configuration);\n}\nreturn configuration;\n}\nXMLConfiguration configuration = new XMLConfiguration();\nif (loggerName != null)\n{\nLog log = LogFactory.getLog(loggerName);\nif (log != null)\n{\nconfiguration.setLogger(log);\n}\n}\nconfiguration.setBasePath(getBasePath());\nconfiguration.setFileName(path);\nconfiguration.setFileSystem(getFileSystem());\nconfiguration.setExpressionEngine(getExpressionEngine());\nReloadingStrategy strategy = createReloadingStrategy();\nif (strategy != null)\n{\nconfiguration.setReloadingStrategy(strategy);\n}\nconfiguration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\nconfiguration.setValidating(validating);\nconfiguration.setSchemaValidation(schemaValidation);\nconfiguration.setEntityResolver(entityResolver);\nconfiguration.setAttributeSplittingDisabled(attributeSplittingDisabled);\nconfiguration.setListDelimiter(getListDelimiter());\nconfiguration.addConfigurationListener(this);\nconfiguration.addErrorListener(this);\ntry\n{\nconfiguration.load();\n}\ncatch (ConfigurationException ce)\n{\nif (isThrowable(ce))\n{\nthrow new ConfigurationRuntimeException(ce);\n}\n}\nsynchronized (configurationsMap)\n{\nif (!configurationsMap.containsKey(path))\n{\nconfigurationsMap.put(path, configuration);\n}\n}\nreturn configuration;\n}\nprivate boolean isThrowable(Throwable throwable)\n{\nif (!ignoreException)\n{\nreturn true;\n}\nThrowable cause = throwable.getCause();\nwhile (cause != null && !(cause instanceof SAXParseException))\n{\ncause = cause.getCause();\n}\nreturn cause != null;\n}\nprivate ReloadingStrategy createReloadingStrategy()\n{\nif (fileStrategy == null)\n{\nreturn null;\n}\ntry\n{\nReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);\nstrategy.setConfiguration(null);\nreturn strategy;\n}\ncatch (Exception ex)\n{\nreturn null;\n",
    "warning_method": "public void setRootNode(ConfigurationNode rootNode) {\nif (init) {\nthis.getConfiguration().setRootNode(rootNode);\n} else {\nsuper.setRootNode(rootNode);\n}\n}"
}