{
    "category": "DODGY_CODE",
    "vtype": "RI_REDUNDANT_INTERFACES",
    "priority": "3",
    "rank": "20",
    "project": "configuration",
    "warning_line": "public class MultiFileHierarchicalConfiguration extends AbstractHierarchicalFileConfiguration\nimplements ConfigurationListener, ConfigurationErrorListener, EntityResolverSupport\n{\nprivate static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()\n{\n@Override\nprotected synchronized Boolean initialValue()\n{\nreturn Boolean.FALSE;\n}\n};\nprivate ConcurrentMap<String, XMLConfiguration> configurationsMap =\nnew ConcurrentHashMap<String, XMLConfiguration>();\nprivate String pattern;\nprivate boolean init;\nprivate boolean ignoreException = true;\nprivate boolean schemaValidation;\nprivate boolean validating;\nprivate boolean attributeSplittingDisabled;\nprivate String loggerName = MultiFileHierarchicalConfiguration.class.getName();\nprivate ReloadingStrategy fileStrategy;\nprivate EntityResolver entityResolver;\nprivate StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());\npublic MultiFileHierarchicalConfiguration()\n{\nsuper();\nthis.init = true;\nsetLogger(LogFactory.getLog(loggerName));\n}\npublic MultiFileHierarchicalConfiguration(String pathPattern)\n{\nsuper();\nthis.pattern = pathPattern;\nthis.init = true;\nsetLogger(LogFactory.getLog(loggerName));\n}\npublic void setLoggerName(String name)\n{\nthis.loggerName = name;\n}\npublic void setFilePattern(String pathPattern)\n{\nthis.pattern = pathPattern;\n}\npublic boolean isSchemaValidation()\n{\nreturn schemaValidation;\n}\npublic void setSchemaValidation(boolean schemaValidation)\n{\nthis.schemaValidation = schemaValidation;\n}\npublic boolean isValidating()\n{\nreturn validating;\n}\npublic void setValidating(boolean validating)\n{\nthis.validating = validating;\n}\npublic boolean isAttributeSplittingDisabled()\n{\nreturn attributeSplittingDisabled;\n}\npublic void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)\n{\nthis.attributeSplittingDisabled = attributeSplittingDisabled;\n}\n@Override\npublic ReloadingStrategy getReloadingStrategy()\n{\nreturn fileStrategy;\n}\n@Override\npublic void setReloadingStrategy(ReloadingStrategy strategy)\n{\nthis.fileStrategy = strategy;\n}\npublic void setEntityResolver(EntityResolver entityResolver)\n{\nthis.entityResolver = entityResolver;\n}\npublic EntityResolver getEntityResolver()\n{\nreturn this.entityResolver;\n}\npublic void setIgnoreException(boolean ignoreException)\n{\nthis.ignoreException = ignoreException;\n}\n@Override\npublic void addProperty(String key, Object value)\n{\nthis.getConfiguration().addProperty(key, value);\n}\n@Override\npublic void clear()\n{\nthis.getConfiguration().clear();\n}\n@Override\npublic void clearProperty(String key)\n{\nthis.getConfiguration().clearProperty(key);\n}\n@Override\npublic boolean containsKey(String key)\n{\nreturn this.getConfiguration().containsKey(key);\n}\n@Override\npublic BigDecimal getBigDecimal(String key, BigDecimal defaultValue)\n{\nreturn this.getConfiguration().getBigDecimal(key, defaultValue);\n}\n@Override\npublic BigDecimal getBigDecimal(String key)\n{\nreturn this.getConfiguration().getBigDecimal(key);\n}\n@Override\npublic BigInteger getBigInteger(String key, BigInteger defaultValue)\n{\nreturn this.getConfiguration().getBigInteger(key, defaultValue);\n}\n@Override\npublic BigInteger getBigInteger(String key)\n{\nreturn this.getConfiguration().getBigInteger(key);\n}\n@Override\npublic boolean getBoolean(String key, boolean defaultValue)\n{\nreturn this.getConfiguration().getBoolean(key, defaultValue);\n}\n@Override\npublic Boolean getBoolean(String key, Boolean defaultValue)\n{\nreturn this.getConfiguration().getBoolean(key, defaultValue);\n}\n@Override\npublic boolean getBoolean(String key)\n{\nreturn this.getConfiguration().getBoolean(key);\n}\n@Override\npublic byte getByte(String key, byte defaultValue)\n{\nreturn this.getConfiguration().getByte(key, defaultValue);\n}\n@Override\npublic Byte getByte(String key, Byte defaultValue)\n{\nreturn this.getConfiguration().getByte(key, defaultValue);\n}\n@Override\npublic byte getByte(String key)\n{\nreturn this.getConfiguration().getByte(key);\n}\n@Override\npublic double getDouble(String key, double defaultValue)\n{\nreturn this.getConfiguration().getDouble(key, defaultValue);\n}\n@Override\npublic Double getDouble(String key, Double defaultValue)\n{\nreturn this.getConfiguration().getDouble(key, defaultValue);\n}\n@Override\npublic double getDouble(String key)\n{\nreturn this.getConfiguration().getDouble(key);\n}\n@Override\npublic float getFloat(String key, float defaultValue)\n{\nreturn this.getConfiguration().getFloat(key, defaultValue);\n}\n@Override\npublic Float getFloat(String key, Float defaultValue)\n{\nreturn this.getConfiguration().getFloat(key, defaultValue);\n}\n@Override\npublic float getFloat(String key)\n{\nreturn this.getConfiguration().getFloat(key);\n}\n@Override\npublic int getInt(String key, int defaultValue)\n{\nreturn this.getConfiguration().getInt(key, defaultValue);\n}\n@Override\npublic int getInt(String key)\n{\nreturn this.getConfiguration().getInt(key);\n}\n@Override\npublic Integer getInteger(String key, Integer defaultValue)\n{\nreturn this.getConfiguration().getInteger(key, defaultValue);\n}\n@Override\npublic Iterator<String> getKeys()\n{\nreturn this.getConfiguration().getKeys();\n}\n@Override\npublic Iterator<String> getKeys(String prefix)\n{\nreturn this.getConfiguration().getKeys(prefix);\n}\n@Override\npublic <T> List<T> getList(String key, List<T> defaultValue)\n{\nreturn this.getConfiguration().getList(key, defaultValue);\n}\n@Override\npublic <T> List<T> getList(String key)\n{\nreturn this.getConfiguration().getList(key);\n}\n@Override\npublic long getLong(String key, long defaultValue)\n{\nreturn this.getConfiguration().getLong(key, defaultValue);\n}\n@Override\npublic Long getLong(String key, Long defaultValue)\n{\nreturn this.getConfiguration().getLong(key, defaultValue);\n}\n@Override\npublic long getLong(String key)\n{\nreturn this.getConfiguration().getLong(key);\n}\n@Override\npublic Properties getProperties(String key)\n{\nreturn this.getConfiguration().getProperties(key);\n}\n@Override\npublic Object getProperty(String key)\n{\nreturn this.getConfiguration().getProperty(key);\n}\n@Override\npublic short getShort(String key, short defaultValue)\n{\nreturn this.getConfiguration().getShort(key, defaultValue);\n}\n@Override\npublic Short getShort(String key, Short defaultValue)\n{\nreturn this.getConfiguration().getShort(key, defaultValue);\n}\n@Override\npublic short getShort(String key)\n{\nreturn this.getConfiguration().getShort(key);\n}\n@Override\npublic String getString(String key, String defaultValue)\n{\nreturn this.getConfiguration().getString(key, defaultValue);\n}\n@Override\npublic String getString(String key)\n{\nreturn this.getConfiguration().getString(key);\n}\n@Override\npublic String[] getStringArray(String key)\n{\nreturn this.getConfiguration().getStringArray(key);\n}\n@Override\npublic boolean isEmpty()\n{\nreturn this.getConfiguration().isEmpty();\n}\n@Override\npublic void setProperty(String key, Object value)\n{\nif (init)\n{\nthis.getConfiguration().setProperty(key, value);\n}\n}\n@Override\npublic Configuration subset(String prefix)\n{\nreturn this.getConfiguration().subset(prefix);\n}\n@Override\npublic ExpressionEngine getExpressionEngine()\n{\nreturn super.getExpressionEngine();\n}\n@Override\npublic void setExpressionEngine(ExpressionEngine expressionEngine)\n{\nsuper.setExpressionEngine(expressionEngine);\n}\n@Override\npublic void addNodes(String key, Collection<? extends ConfigurationNode> nodes)\n{\nthis.getConfiguration().addNodes(key, nodes);\n}\n@Override\npublic SubConfiguration<ConfigurationNode> configurationAt(String key, boolean supportUpdates)\n{\nreturn this.getConfiguration().configurationAt(key, supportUpdates);\n}\n@Override\npublic SubConfiguration<ConfigurationNode> configurationAt(String key)\n{\nreturn this.getConfiguration().configurationAt(key);\n}\n@Override\npublic List<SubConfiguration<ConfigurationNode>> configurationsAt(String key)\n{\nreturn this.getConfiguration().configurationsAt(key);\n}\n@Override\npublic void clearTree(String key)\n{\nthis.getConfiguration().clearTree(key);\n}\n@Override\npublic int getMaxIndex(String key)\n{\nreturn this.getConfiguration().getMaxIndex(key);\n}\n@Override\npublic Configuration interpolatedConfiguration()\n{\nreturn this.getConfiguration().interpolatedConfiguration();\n}\n@Override\npublic void addConfigurationListener(ConfigurationListener l)\n{\nsuper.addConfigurationListener(l);\n}\n@Override\npublic boolean removeConfigurationListener(ConfigurationListener l)\n{\nreturn super.removeConfigurationListener(l);\n}\n@Override\npublic Collection<ConfigurationListener> getConfigurationListeners()\n{\nreturn super.getConfigurationListeners();\n}\n@Override\npublic void clearConfigurationListeners()\n{\nsuper.clearConfigurationListeners();\n}\n@Override\npublic void addErrorListener(ConfigurationErrorListener l)\n{\nsuper.addErrorListener(l);\n}\n@Override\npublic boolean removeErrorListener(ConfigurationErrorListener l)\n{\nreturn super.removeErrorListener(l);\n}\n@Override\npublic void clearErrorListeners()\n{\nsuper.clearErrorListeners();\n}\n@Override\npublic Collection<ConfigurationErrorListener> getErrorListeners()\n{\nreturn super.getErrorListeners();\n}\npublic void save(Writer writer) throws ConfigurationException\n{\nif (init)\n{\nthis.getConfiguration().save(writer);\n}\n}\npublic void load(Reader reader) throws ConfigurationException\n{\nif (init)\n{\nthis.getConfiguration().load(reader);\n}\n}\n@Override\npublic void load() throws ConfigurationException\n{\nthis.getConfiguration();\n}\n@Override\npublic void load(String fileName) throws ConfigurationException\n{\nthis.getConfiguration().load(fileName);\n}\n@Override\npublic void load(File file) throws ConfigurationException\n{\nthis.getConfiguration().load(file);\n}\n@Override\npublic void load(URL url) throws ConfigurationException\n{\nthis.getConfiguration().load(url);\n}\n@Override\npublic void load(InputStream in) throws ConfigurationException\n{\nthis.getConfiguration().load(in);\n}\n@Override\npublic void load(InputStream in, String encoding) throws ConfigurationException\n{\nthis.getConfiguration().load(in, encoding);\n}\n@Override\npublic void save() throws ConfigurationException\n{\nthis.getConfiguration().save();\n}\n@Override\npublic void save(String fileName) throws ConfigurationException\n{\nthis.getConfiguration().save(fileName);\n}\n@Override\npublic void save(File file) throws ConfigurationException\n{\nthis.getConfiguration().save(file);\n}\n@Override\npublic void save(URL url) throws ConfigurationException\n{\nthis.getConfiguration().save(url);\n}\n@Override\npublic void save(OutputStream out) throws ConfigurationException\n{\nthis.getConfiguration().save(out);\n}\n@Override\npublic void save(OutputStream out, String encoding) throws ConfigurationException\n{\nthis.getConfiguration().save(out, encoding);\n}\n@Override\npublic ConfigurationNode getRootNode()\n{\nreturn getConfiguration().getRootNode();\n}\n@Override\npublic void setRootNode(ConfigurationNode rootNode)\n{\nif (init)\n{\ngetConfiguration().setRootNode(rootNode);\n}\nelse\n{\nsuper.setRootNode(rootNode);\n}\n}\n@Override\npublic void configurationChanged(ConfigurationEvent event)\n{\nif (event.getSource() instanceof XMLConfiguration)\n{\nCollection<ConfigurationListener> listeners = getConfigurationListeners();\nfor (ConfigurationListener listener : listeners)\n{\nlistener.configurationChanged(event);\n}\n}\n}\n@Override\npublic void configurationError(ConfigurationErrorEvent event)\n{\nif (event.getSource() instanceof XMLConfiguration)\n{\nCollection<ConfigurationErrorListener> listeners = getErrorListeners();\nfor (ConfigurationErrorListener listener : listeners)\n{\nlistener.configurationError(event);\n}\n}\nif (event.getType() == AbstractHierarchicalFileConfiguration.EVENT_RELOAD)\n{\nif (isThrowable(event.getCause()))\n{\nthrow new ConfigurationRuntimeException(event.getCause());\n}\n}\n}\n@Override\nprotected Object resolveContainerStore(String key)\n{\nif (recursive.get())\n{\nreturn null;\n}\nrecursive.set(Boolean.TRUE);\ntry\n{\nreturn super.resolveContainerStore(key);\n}\nfinally\n{\nrecursive.set(Boolean.FALSE);\n}\n}\npublic void removeConfiguration()\n{\nString path = getSubstitutor().replace(pattern);\nconfigurationsMap.remove(path);\n}\nprivate AbstractHierarchicalFileConfiguration getConfiguration()\n{\nif (pattern == null)\n{\nthrow new ConfigurationRuntimeException(\"File pattern must be defined\");\n}\nString path = localSubst.replace(pattern);\nif (configurationsMap.containsKey(path))\n{\nreturn configurationsMap.get(path);\n}\nif (path.equals(pattern))\n{\nXMLConfiguration configuration = new XMLConfiguration()\n{\n@Override\npublic void load() throws ConfigurationException\n{\n}\n@Override\npublic void save() throws ConfigurationException\n{\n}\n};\nconfigurationsMap.putIfAbsent(pattern, configuration);\nreturn configuration;\n}\nXMLConfiguration configuration = new XMLConfiguration();\nif (loggerName != null)\n{\nLog log = LogFactory.getLog(loggerName);\nif (log != null)\n{\nconfiguration.setLogger(log);\n}\n}\nconfiguration.setBasePath(getBasePath());\nconfiguration.setFileName(path);\nconfiguration.setFileSystem(getFileSystem());\nconfiguration.setExpressionEngine(getExpressionEngine());\nReloadingStrategy strategy = createReloadingStrategy();\nif (strategy != null)\n{\nconfiguration.setReloadingStrategy(strategy);\n}\nconfiguration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\nconfiguration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());\nconfiguration.setValidating(validating);\nconfiguration.setSchemaValidation(schemaValidation);\nconfiguration.setEntityResolver(entityResolver);\nconfiguration.setListDelimiter(getListDelimiter());\nconfiguration.addConfigurationListener(this);\nconfiguration.addErrorListener(this);\ntry\n{\nconfiguration.load();\n}\ncatch (ConfigurationException ce)\n{\nif (isThrowable(ce))\n{\nthrow new ConfigurationRuntimeException(ce);\n}\n}\nconfigurationsMap.putIfAbsent(path, configuration);\nreturn configurationsMap.get(path);\n}\nprivate boolean isThrowable(Throwable throwable)\n{\nif (!ignoreException)\n{\nreturn true;\n}\nThrowable cause = throwable.getCause();\nwhile (cause != null && !(cause instanceof SAXParseException))\n{\ncause = cause.getCause();\n}\nreturn cause != null;\n}\nprivate ReloadingStrategy createReloadingStrategy()\n{\nif (getReloadingStrategy() == null)\n{\nreturn null;\n}\ntry\n{\nReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());\nstrategy.setConfiguration(null);\nreturn strategy;\n}\ncatch (Exception ex)\n{\nreturn null;\n",
    "warning_method": "private AbstractHierarchicalFileConfiguration getConfiguration() {\nif (pattern == null) {\nthrow new ConfigurationRuntimeException(\"File pattern must be defined\");\n}\nString path = localSubst.replace(pattern);\nif (configurationsMap.containsKey(path)) {\nreturn configurationsMap.get(path);\n}\nif (path.equals(pattern)) {\nXMLConfiguration configuration = new XMLConfiguration() {\n@Override\npublic void load() throws ConfigurationException {\n}\n@Override\npublic void save() throws ConfigurationException {\n}\n};\nconfigurationsMap.putIfAbsent(pattern, configuration);\nreturn configuration;\n}\nXMLConfiguration configuration = new XMLConfiguration();\nif (loggerName != null) {\nLog log = LogFactory.getLog(loggerName);\nif (log != null) {\nconfiguration.setLogger(log);\n}\n}\nconfiguration.setBasePath(getBasePath());\nconfiguration.setFileName(path);\nconfiguration.setFileSystem(getFileSystem());\nconfiguration.setExpressionEngine(getExpressionEngine());\nReloadingStrategy strategy = createReloadingStrategy();\nif (strategy != null) {\nconfiguration.setReloadingStrategy(strategy);\n}\nconfiguration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\nconfiguration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());\nconfiguration.setValidating(validating);\nconfiguration.setSchemaValidation(schemaValidation);\nconfiguration.setEntityResolver(entityResolver);\nconfiguration.setListDelimiter(getListDelimiter());\nconfiguration.addConfigurationListener(this);\nconfiguration.addErrorListener(this);\ntry {\nconfiguration.load();\n} catch (ConfigurationException ce) {\nif (isThrowable(ce)) {\nthrow new ConfigurationRuntimeException(ce);\n}\n}\nconfigurationsMap.putIfAbsent(path, configuration);\nreturn configurationsMap.get(path);\n}"
}