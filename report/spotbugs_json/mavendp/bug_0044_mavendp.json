{
    "category": "PERFORMANCE",
    "vtype": "SBSC_USE_STRINGBUFFER_CONCATENATION",
    "priority": "2",
    "rank": "18",
    "project": "mavendp",
    "warning_line": "message += \"  \" + missingArtifact.getId() + \"\\n\";\n",
    "warning_method": "private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {\nMap deps = createArtifactMap(project);\nif (deps.isEmpty()) {\ngetLog().info(\"Nothing to do for project: \" + project.getId());\nreturn;\n}\nif (!exclusionPatterns.isEmpty()) {\nfor (Iterator it = exclusionPatterns.iterator(); it.hasNext(); ) {\nString excludedKey = (String) it.next();\nverbose(\"Excluding: \" + excludedKey + \" from refresh operation for project: \" + project.getId());\ndeps.remove(excludedKey);\n}\n}\nverbose(\"Processing dependencies for project: \" + project.getId());\nList missingArtifacts = new ArrayList();\nfor (Iterator it = deps.entrySet().iterator(); it.hasNext(); ) {\nMap.Entry entry = (Map.Entry) it.next();\nArtifact artifact = (Artifact) entry.getValue();\nverbose(\"Processing artifact: \" + artifact.getId());\nFile deleteTarget = findDeleteTarget(artifact);\nverbose(\"Deleting: \" + deleteTarget);\nif (deleteTarget.isDirectory()) {\ntry {\nFileUtils.deleteDirectory(deleteTarget);\n} catch (IOException e) {\nthrow new MojoFailureException(this, \"Cannot delete dependency from the local repository: \" + artifact.getId(), \"Failed to delete: \" + deleteTarget);\n}\n} else {\ndeleteTarget.delete();\n}\nif (reResolve) {\nverbose(\"Re-resolving.\");\nartifact.setResolved(false);\ntry {\nresolver.resolveAlways(artifact, project.getRemoteArtifactRepositories(), localRepository);\n} catch (ArtifactResolutionException e) {\ngetLog().debug(e.getMessage());\nmissingArtifacts.add(artifact);\n} catch (ArtifactNotFoundException e) {\ngetLog().debug(e.getMessage());\nmissingArtifacts.add(artifact);\n}\n}\n}\nif (missingArtifacts.size() > 0) {\nString message = \"required artifacts missing:\\n\";\nfor (Iterator i = missingArtifacts.iterator(); i.hasNext(); ) {\nArtifact missingArtifact = (Artifact) i.next();\nmessage += \"  \" + missingArtifact.getId() + \"\\n\";\n}\nmessage += \"\\nfor the artifact:\";\nthrow new ArtifactResolutionException(message, project.getArtifact(), project.getRemoteArtifactRepositories());\n}\n}"
}