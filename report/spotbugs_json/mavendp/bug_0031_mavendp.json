{
    "category": "BAD_PRACTICE",
    "vtype": "SE_COMPARATOR_SHOULD_BE_SERIALIZABLE",
    "priority": "3",
    "rank": "20",
    "project": "mavendp",
    "warning_line": "public class BuildClasspathMojo\nextends AbstractDependencyFilterMojo\nimplements Comparator\n{\nprivate boolean stripVersion = false;\nprivate String prefix;\nprivate File cpFile;\nprivate File outputFile;\nprivate boolean regenerateFile;\nprivate String fileSeparator;\nprivate String pathSeparator;\nprivate String localRepoProperty;\nboolean attach;\nboolean outputFilterFile;\nprivate MavenProjectHelper projectHelper;\nboolean isFileSepSet = true;\nboolean isPathSepSet = true;\npublic void execute()\nthrows MojoExecutionException\n{\nif (cpFile != null)\n{\ngetLog().warn( \"The parameter cpFile is deprecated. Use outputFile instead.\" );\nthis.outputFile = cpFile;\n}\nif ( StringUtils.isEmpty( fileSeparator ) )\n{\nisFileSepSet = false;\n}\nelse\n{\nisFileSepSet = true;\n}\nif ( StringUtils.isEmpty( pathSeparator ) )\n{\nisPathSepSet = false;\n}\nelse\n{\nisPathSepSet = true;\n}\nif ( attach && StringUtils.isEmpty( localRepoProperty ) )\n{\nlocalRepoProperty = \"${M2_REPO}\";\n}\nSet artifacts = getResolvedDependencies( true );\nif ( artifacts == null || artifacts.isEmpty() )\n{\ngetLog().info( \"No dependencies found.\" );\n}\nList artList = new ArrayList( artifacts );\nStringBuffer sb = new StringBuffer();\nIterator i = artList.iterator();\nif ( i.hasNext() )\n{\nappendArtifactPath( (Artifact) i.next(), sb );\nwhile ( i.hasNext() )\n{\nsb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\nappendArtifactPath( (Artifact) i.next(), sb );\n}\n}\nString cpString = sb.toString();\nif ( isFileSepSet )\n{\nString separator = File.separator;\nif ( File.separator.equals( \"\\\\\" ) )\n{\nseparator = \"\\\\\\\\\";\n}\ncpString = cpString.replaceAll( separator, fileSeparator );\n}\nif (outputFilterFile)\n{\ncpString = \"classpath=\"+ cpString;\n}\nif ( outputFile == null )\n{\ngetLog().info( \"Dependencies classpath:\\n\" + cpString );\n}\nelse\n{\nif ( regenerateFile || !isUpdToDate( cpString ) )\n{\nstoreClasspathFile( cpString, outputFile );\n}\nelse\n{\nthis.getLog().info( \"Skipped writing classpath file '\" + outputFile + \"'.  No changes found.\" );\n}\n}\nif ( attach )\n{\nattachFile( cpString );\n}\n}\nprotected void attachFile( String cpString )\nthrows MojoExecutionException\n{\nFile attachedFile = new File( project.getBuild().getDirectory(), \"classpath\" );\nstoreClasspathFile( cpString, attachedFile );\nprojectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n}\nprotected void appendArtifactPath( Artifact art, StringBuffer sb )\n{\nif ( prefix == null )\n{\nString file = art.getFile().getPath();\nif ( StringUtils.isNotEmpty( localRepoProperty ) )\n{\nfile = StringUtils.replace( file, getLocal().getBasedir(), localRepoProperty );\n}\nsb.append( file );\n}\nelse\n{\n// TODO: add param for prepending groupId and version.\nsb.append( prefix );\nsb.append( File.separator );\nsb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion ) );\n}\n}\nprivate boolean isUpdToDate( String cpString )\n{\ntry\n{\nString oldCp = readClasspathFile();\nreturn ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n}\ncatch ( Exception ex )\n{\nthis.getLog().warn( \"Error while reading old classpath file '\" + outputFile + \"' for up-to-date check: \" + ex );\nreturn false;\n}\n}\nprivate void storeClasspathFile( String cpString, File out )\nthrows MojoExecutionException\n{\nout.getParentFile().mkdirs();\ntry\n{\nWriter w = new BufferedWriter( new FileWriter( out ) );\ntry\n{\nw.write( cpString );\ngetLog().info( \"Wrote classpath file '\" + out + \"'.\" );\n}\ncatch ( IOException ex )\n{\nthrow new MojoExecutionException( \"Error while writting to classpath file '\" + out + \"': \" +\nex.toString(), ex );\n}\nfinally\n{\nw.close();\n}\n}\ncatch ( IOException ex )\n{\nthrow new MojoExecutionException( \"Error while opening/closing classpath file '\" + out + \"': \" +\nex.toString(), ex );\n}\n}\nprotected String readClasspathFile()\nthrows IOException\n{\nif ( outputFile == null )\n{\nthrow new IllegalArgumentException(\n\"The outputFile parameter cannot be null if the file is intended to be read.\" );\n}\nif ( !outputFile.isFile() )\n{\nreturn null;\n}\nStringBuffer sb = new StringBuffer();\nBufferedReader r = new BufferedReader( new FileReader( outputFile ) );\ntry\n{\nString l;\nwhile ( ( l = r.readLine() ) != null )\n{\nsb.append( l );\n}\nreturn sb.toString();\n}\nfinally\n{\nr.close();\n}\n}\npublic int compare( Object arg1, Object arg2 )\n{\nif ( arg1 instanceof Artifact && arg2 instanceof Artifact )\n{\nif ( arg1 == arg2 )\n{\nreturn 0;\n}\nelse if ( arg1 == null )\n{\nreturn -1;\n}\nelse if ( arg2 == null )\n{\nreturn +1;\n}\nArtifact art1 = (Artifact) arg1;\nArtifact art2 = (Artifact) arg2;\nString s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\nString s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\nreturn s1.compareTo( s2 );\n}\nelse\n{\nreturn 0;\n}\n}\nprotected ArtifactsFilter getMarkedArtifactFilter()\n{\nreturn null;\n}\npublic File getCpFile()\n{\nreturn this.outputFile;\n}\npublic void setCpFile( File theCpFile )\n{\nthis.outputFile = theCpFile;\n}\npublic String getFileSeparator()\n{\nreturn this.fileSeparator;\n}\npublic void setFileSeparator( String theFileSeparator )\n{\nthis.fileSeparator = theFileSeparator;\n}\npublic String getPathSeparator()\n{\nreturn this.pathSeparator;\n}\npublic void setPathSeparator( String thePathSeparator )\n{\nthis.pathSeparator = thePathSeparator;\n}\npublic String getPrefix()\n{\nreturn this.prefix;\n}\npublic void setPrefix( String thePrefix )\n{\nthis.prefix = thePrefix;\n}\npublic boolean isRegenerateFile()\n{\nreturn this.regenerateFile;\n}\npublic void setRegenerateFile( boolean theRegenerateFile )\n{\nthis.regenerateFile = theRegenerateFile;\n}\npublic boolean isStripVersion()\n{\nreturn this.stripVersion;\n}\npublic void setStripVersion( boolean theStripVersion )\n{\nthis.stripVersion = theStripVersion;\n}\npublic String getLocalRepoProperty()\n{\nreturn localRepoProperty;\n}\npublic void setLocalRepoProperty( String localRepoProperty )\n{\nthis.localRepoProperty = localRepoProperty;\n}\npublic boolean isFileSepSet()\n{\nreturn isFileSepSet;\n}\npublic void setFileSepSet( boolean isFileSepSet )\n{\nthis.isFileSepSet = isFileSepSet;\n}\npublic boolean isPathSepSet()\n{\nreturn isPathSepSet;\n}\npublic void setPathSepSet( boolean isPathSepSet )\n{\nthis.isPathSepSet = isPathSepSet;\n}\n",
    "warning_method": "public int compare(Object arg1, Object arg2) {\nif (arg1 instanceof Artifact && arg2 instanceof Artifact) {\nif (arg1 == arg2) {\nreturn 0;\n} else if (arg1 == null) {\nreturn -1;\n} else if (arg2 == null) {\nreturn +1;\n}\nArtifact art1 = (Artifact) arg1;\nArtifact art2 = (Artifact) arg2;\nString s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\nString s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\nreturn s1.compareTo(s2);\n} else {\nreturn 0;\n}\n}"
}