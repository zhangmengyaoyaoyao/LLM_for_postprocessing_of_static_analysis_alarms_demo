{
    "category": "DODGY_CODE",
    "vtype": "UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR",
    "priority": "3",
    "rank": "20",
    "project": "mavendp",
    "warning_line": "DependencyManagement depMgt = project.getDependencyManagement();\n",
    "warning_method": "private boolean checkDependencyManagement() throws MojoExecutionException {\nboolean foundError = false;\ngetLog().info(\"Found Resolved Dependency / DependencyManagement mismatches:\");\nList<Dependency> depMgtDependencies = null;\nDependencyManagement depMgt = project.getDependencyManagement();\nif (depMgt != null) {\ndepMgtDependencies = depMgt.getDependencies();\n}\nif (depMgtDependencies != null && !depMgtDependencies.isEmpty()) {\nMap<String, Dependency> depMgtMap = new HashMap<String, Dependency>();\nMap<String, Exclusion> exclusions = new HashMap<String, Exclusion>();\nfor (Dependency depMgtDependency : depMgtDependencies) {\ndepMgtMap.put(depMgtDependency.getManagementKey(), depMgtDependency);\nexclusions.putAll(addExclusions(depMgtDependency.getExclusions()));\n}\nSet<Artifact> allDependencyArtifacts = new HashSet<Artifact>(project.getArtifacts());\nif (this.ignoreDirect) {\ngetLog().info(\"\\tIgnoring Direct Dependencies.\");\nSet<Artifact> directDependencies = project.getDependencyArtifacts();\nallDependencyArtifacts.removeAll(directDependencies);\n}\nList<Artifact> exclusionErrors = getExclusionErrors(exclusions, allDependencyArtifacts);\nfor (Artifact exclusion : exclusionErrors) {\ngetLog().info(StringUtils.stripEnd(getArtifactManagementKey(exclusion), \":\") + \" was excluded in DepMgt, but version \" + exclusion.getVersion() + \" has been found in the dependency tree.\");\nfoundError = true;\n}\nMap<Artifact, Dependency> mismatch = getMismatch(depMgtMap, allDependencyArtifacts);\nfor (Map.Entry<Artifact, Dependency> entry : mismatch.entrySet()) {\nlogMismatch(entry.getKey(), entry.getValue());\nfoundError = true;\n}\nif (!foundError) {\ngetLog().info(\"   None\");\n}\n} else {\ngetLog().info(\"   Nothing in DepMgt.\");\n}\nreturn foundError;\n}"
}