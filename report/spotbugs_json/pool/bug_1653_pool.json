{
    "category": "DODGY_CODE",
    "vtype": "RI_REDUNDANT_INTERFACES",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "public SoftReferenceObjectPool(PoolableObjectFactory<T> factory) {\nif (factory == null) {\nthrow new IllegalArgumentException(\"factory must not be null\");\n}\n_pool = new ArrayList<SoftReference<T>>();\n_factory = factory;\n}\n@Override\npublic synchronized T borrowObject() throws Exception {\nassertOpen();\nT obj = null;\nboolean newlyCreated = false;\nwhile(null == obj) {\nif(_pool.isEmpty()) {\nnewlyCreated = true;\nobj = _factory.makeObject();\n} else {\nSoftReference<T> ref = _pool.remove(_pool.size() - 1);\nobj = ref.get();\nref.clear(); \n}\nif (null != obj) {\ntry {\n_factory.activateObject(obj);\nif (!_factory.validateObject(obj)) {\nthrow new Exception(\"ValidateObject failed\");\n}\n} catch (Throwable t) {\nPoolUtils.checkRethrow(t);\ntry {\n_factory.destroyObject(obj);\n} catch (Throwable t2) {\nPoolUtils.checkRethrow(t2);\n} finally {\nobj = null;\n}\nif (newlyCreated) {\nthrow new NoSuchElementException(\n\"Could not create a validated object, cause: \" +\nt.getMessage());\n}\n}\n}\n}\n_numActive++;\nreturn obj;\n}\n@Override\npublic synchronized void returnObject(T obj) throws Exception {\nboolean success = !isClosed();\nif(!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\ntry {\n_factory.passivateObject(obj);\n} catch(Exception e) {\nsuccess = false;\n}\n}\nboolean shouldDestroy = !success;\n_numActive--;\nif(success) {\n_pool.add(new SoftReference<T>(obj, refQueue));\n}\nnotifyAll(); \nif (shouldDestroy) {\ntry {\n_factory.destroyObject(obj);\n} catch(Exception e) {\n}\n}\n}\n@Override\npublic synchronized void invalidateObject(T obj) throws Exception {\n_numActive--;\n_factory.destroyObject(obj);\nnotifyAll(); \n}\n@Override\npublic synchronized void addObject() throws Exception {\nassertOpen();\nT obj = _factory.makeObject();\nboolean success = true;\nif(!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\n_factory.passivateObject(obj);\n}\nboolean shouldDestroy = !success;\nif(success) {\n_pool.add(new SoftReference<T>(obj, refQueue));\nnotifyAll(); \n}\nif(shouldDestroy) {\ntry {\n_factory.destroyObject(obj);\n} catch(Exception e) {\n}\n}\n}\n@Override\npublic synchronized int getNumIdle() {\npruneClearedReferences();\nreturn _pool.size();\n}\n@Override\npublic synchronized int getNumActive() {\nreturn _numActive;\n}\n@Override\npublic synchronized void clear() {\nfor (SoftReference<T> element : _pool) {\ntry {\nT obj = element.get();\nif (null != obj) {\n_factory.destroyObject(obj);\n}\n} catch (Exception e) {\n}\n}\n_pool.clear();\npruneClearedReferences();\n}\n@Override\npublic void close() throws Exception {\nsuper.close();\nclear();\n}\nprivate void pruneClearedReferences() {\nReference<? extends T> ref;\nwhile ((ref = refQueue.poll()) != null) {\ntry {\n_pool.remove(ref);\n} catch (UnsupportedOperationException uoe) {\n}\n}\n}\npublic PoolableObjectFactory<T> getFactory() {\nreturn _factory;\n}\nprivate final List<SoftReference<T>> _pool;\nprivate final PoolableObjectFactory<T> _factory;\nprivate final ReferenceQueue<T> refQueue = new ReferenceQueue<T>();\nprivate int _numActive = 0; \n",
    "warning_method": "@Override\npublic synchronized void returnObject(T obj) throws Exception {\nboolean success = !isClosed();\nif (!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\ntry {\n_factory.passivateObject(obj);\n} catch (Exception e) {\nsuccess = false;\n}\n}\nboolean shouldDestroy = !success;\n_numActive--;\nif (success) {\n_pool.add(new SoftReference<T>(obj, refQueue));\n}\nnotifyAll();\nif (shouldDestroy) {\ntry {\n_factory.destroyObject(obj);\n} catch (Exception e) {\n}\n}\n}"
}