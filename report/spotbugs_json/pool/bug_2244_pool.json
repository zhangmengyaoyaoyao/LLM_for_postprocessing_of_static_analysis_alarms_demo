{
    "category": "DODGY_CODE",
    "vtype": "RI_REDUNDANT_INTERFACES",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "public class GenericObjectPool extends BaseObjectPool implements ObjectPool {\npublic static final byte WHEN_EXHAUSTED_FAIL   = 0;\npublic static final byte WHEN_EXHAUSTED_BLOCK  = 1;\npublic static final byte WHEN_EXHAUSTED_GROW   = 2;\npublic static final int DEFAULT_MAX_IDLE  = 8;\npublic static final int DEFAULT_MIN_IDLE = 0;\npublic static final int DEFAULT_MAX_ACTIVE  = 8;\npublic static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;\npublic static final boolean DEFAULT_LIFO = true;\npublic static final long DEFAULT_MAX_WAIT = -1L;\npublic static final boolean DEFAULT_TEST_ON_BORROW = false;\npublic static final boolean DEFAULT_TEST_ON_RETURN = false;\npublic static final boolean DEFAULT_TEST_WHILE_IDLE = false;\npublic static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;\npublic static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;\npublic static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;\npublic static final long DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS = -1;\npublic GenericObjectPool() {\nthis(null,DEFAULT_MAX_ACTIVE,DEFAULT_WHEN_EXHAUSTED_ACTION,DEFAULT_MAX_WAIT,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);\n}\npublic GenericObjectPool(PoolableObjectFactory factory) {\nthis(factory,DEFAULT_MAX_ACTIVE,DEFAULT_WHEN_EXHAUSTED_ACTION,DEFAULT_MAX_WAIT,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, GenericObjectPool.Config config) {\nthis(factory,config.maxActive,config.whenExhaustedAction,config.maxWait,config.maxIdle,config.minIdle,config.testOnBorrow,config.testOnReturn,config.timeBetweenEvictionRunsMillis,config.numTestsPerEvictionRun,config.minEvictableIdleTimeMillis,config.testWhileIdle,config.softMinEvictableIdleTimeMillis, config.lifo);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive) {\nthis(factory,maxActive,DEFAULT_WHEN_EXHAUSTED_ACTION,DEFAULT_MAX_WAIT,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait) {\nthis(factory,maxActive,whenExhaustedAction,maxWait,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, boolean testOnBorrow, boolean testOnReturn) {\nthis(factory,maxActive,whenExhaustedAction,maxWait,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,testOnBorrow,testOnReturn,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle) {\nthis(factory,maxActive,whenExhaustedAction,maxWait,maxIdle,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {\nthis(factory,maxActive,whenExhaustedAction,maxWait,maxIdle,DEFAULT_MIN_IDLE,testOnBorrow,testOnReturn,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {\nthis(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {\nthis(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, minIdle, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle, DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle, long softMinEvictableIdleTimeMillis) {\nthis(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, minIdle, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle, softMinEvictableIdleTimeMillis, DEFAULT_LIFO);\n}\npublic GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle, long softMinEvictableIdleTimeMillis, boolean lifo) {\n_factory = factory;\n_maxActive = maxActive;\n_lifo = lifo;\nswitch(whenExhaustedAction) {\ncase WHEN_EXHAUSTED_BLOCK:\ncase WHEN_EXHAUSTED_FAIL:\ncase WHEN_EXHAUSTED_GROW:\n_whenExhaustedAction = whenExhaustedAction;\nbreak;\ndefault:\nthrow new IllegalArgumentException(\"whenExhaustedAction \" + whenExhaustedAction + \" not recognized.\");\n}\n_maxWait = maxWait;\n_maxIdle = maxIdle;\n_minIdle = minIdle;\n_testOnBorrow = testOnBorrow;\n_testOnReturn = testOnReturn;\n_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;\n_numTestsPerEvictionRun = numTestsPerEvictionRun;\n_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;\n_softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;\n_testWhileIdle = testWhileIdle;\n_pool = new CursorableLinkedList();\nstartEvictor(_timeBetweenEvictionRunsMillis);\n}\npublic synchronized int getMaxActive() {\nreturn _maxActive;\n}\npublic synchronized void setMaxActive(int maxActive) {\n_maxActive = maxActive;\nnotifyAll();\n}\npublic synchronized byte getWhenExhaustedAction() {\nreturn _whenExhaustedAction;\n}\npublic synchronized void setWhenExhaustedAction(byte whenExhaustedAction) {\nswitch(whenExhaustedAction) {\ncase WHEN_EXHAUSTED_BLOCK:\ncase WHEN_EXHAUSTED_FAIL:\ncase WHEN_EXHAUSTED_GROW:\n_whenExhaustedAction = whenExhaustedAction;\nnotifyAll();\nbreak;\ndefault:\nthrow new IllegalArgumentException(\"whenExhaustedAction \" + whenExhaustedAction + \" not recognized.\");\n}\n}\npublic synchronized long getMaxWait() {\nreturn _maxWait;\n}\npublic synchronized void setMaxWait(long maxWait) {\n_maxWait = maxWait;\nnotifyAll();\n}\npublic synchronized int getMaxIdle() {\nreturn _maxIdle;\n}\npublic synchronized void setMaxIdle(int maxIdle) {\n_maxIdle = maxIdle;\nnotifyAll();\n}\npublic synchronized void setMinIdle(int minIdle) {\n_minIdle = minIdle;\nnotifyAll();\n}\npublic synchronized int getMinIdle() {\nreturn _minIdle;\n}\npublic boolean getTestOnBorrow() {\nreturn _testOnBorrow;\n}\npublic void setTestOnBorrow(boolean testOnBorrow) {\n_testOnBorrow = testOnBorrow;\n}\npublic boolean getTestOnReturn() {\nreturn _testOnReturn;\n}\npublic void setTestOnReturn(boolean testOnReturn) {\n_testOnReturn = testOnReturn;\n}\npublic synchronized long getTimeBetweenEvictionRunsMillis() {\nreturn _timeBetweenEvictionRunsMillis;\n}\npublic synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {\n_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;\nstartEvictor(_timeBetweenEvictionRunsMillis);\n}\npublic synchronized int getNumTestsPerEvictionRun() {\nreturn _numTestsPerEvictionRun;\n}\npublic synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {\n_numTestsPerEvictionRun = numTestsPerEvictionRun;\n}\npublic synchronized long getMinEvictableIdleTimeMillis() {\nreturn _minEvictableIdleTimeMillis;\n}\npublic synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {\n_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;\n}\npublic synchronized long getSoftMinEvictableIdleTimeMillis() {\nreturn _softMinEvictableIdleTimeMillis;\n}\npublic synchronized void setSoftMinEvictableIdleTimeMillis(long softMinEvictableIdleTimeMillis) {\n_softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;\n}\npublic synchronized boolean getTestWhileIdle() {\nreturn _testWhileIdle;\n}\npublic synchronized void setTestWhileIdle(boolean testWhileIdle) {\n_testWhileIdle = testWhileIdle;\n}\npublic synchronized boolean getLifo() {\nreturn _lifo;\n}\npublic synchronized void setLifo(boolean lifo) {\nthis._lifo = lifo;\n}\npublic synchronized void setConfig(GenericObjectPool.Config conf) {\nsetMaxIdle(conf.maxIdle);\nsetMinIdle(conf.minIdle);\nsetMaxActive(conf.maxActive);\nsetMaxWait(conf.maxWait);\nsetWhenExhaustedAction(conf.whenExhaustedAction);\nsetTestOnBorrow(conf.testOnBorrow);\nsetTestOnReturn(conf.testOnReturn);\nsetTestWhileIdle(conf.testWhileIdle);\nsetNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);\nsetMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);\nsetTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);\nsetSoftMinEvictableIdleTimeMillis(conf.softMinEvictableIdleTimeMillis);\nsetLifo(conf.lifo);\nnotifyAll();\n}\npublic Object borrowObject() throws Exception {\nlong starttime = System.currentTimeMillis();\nfor(;;) {\nObjectTimestampPair pair = null;\nsynchronized (this) {\nassertOpen();\ntry {\npair = (ObjectTimestampPair)(_pool.removeFirst());\n} catch(NoSuchElementException e) {\n; \n}\nif(null == pair) {\nif(_maxActive < 0 || _numActive < _maxActive) {\n} else {\nswitch(_whenExhaustedAction) {\ncase WHEN_EXHAUSTED_GROW:\nbreak;\ncase WHEN_EXHAUSTED_FAIL:\nthrow new NoSuchElementException(\"Pool exhausted\");\ncase WHEN_EXHAUSTED_BLOCK:\ntry {\nif(_maxWait <= 0) {\nwait();\n} else {\nfinal long elapsed = (System.currentTimeMillis() - starttime);\nfinal long waitTime = _maxWait - elapsed;\nif (waitTime > 0)\n{\nwait(waitTime);\n}\n}\n} catch(InterruptedException e) {\nThread.currentThread().interrupt();\nthrow e;\n}\nif(_maxWait > 0 && ((System.currentTimeMillis() - starttime) >= _maxWait)) {\nthrow new NoSuchElementException(\"Timeout waiting for idle object\");\n} else {\ncontinue; \n}\ndefault:\nthrow new IllegalArgumentException(\"WhenExhaustedAction property \" + _whenExhaustedAction + \" not recognized.\");\n}\n}\n}\n_numActive++;\n}\nboolean newlyCreated = false;\nif(null == pair) {\ntry {\nObject obj = _factory.makeObject();\npair = new ObjectTimestampPair(obj);\nnewlyCreated = true;\n} finally {\nif (!newlyCreated) {\nsynchronized (this) {\n_numActive--;\nnotifyAll();\n}\n}\n}\n}\ntry {\n_factory.activateObject(pair.value);\nif(_testOnBorrow && !_factory.validateObject(pair.value)) {\nthrow new Exception(\"ValidateObject failed\");\n}\nreturn pair.value;\n}\ncatch (Throwable e) {\ntry {\n_factory.destroyObject(pair.value);\n} catch (Throwable e2) {\n}\nsynchronized (this) {\n_numActive--;\nnotifyAll();\n}\nif(newlyCreated) {\nthrow new NoSuchElementException(\"Could not create a validated object, cause: \" + e.getMessage());\n}\nelse {\ncontinue; \n}\n}\n}\n}\npublic void invalidateObject(Object obj) throws Exception {\ntry {\nif (_factory != null) {\n_factory.destroyObject(obj);\n}\n} finally {\nsynchronized (this) {\n_numActive--;\nnotifyAll(); \n}\n}\n}\npublic synchronized void clear() {\nfor(Iterator it = _pool.iterator(); it.hasNext(); ) {\ntry {\n_factory.destroyObject(((ObjectTimestampPair)(it.next())).value);\n} catch(Exception e) {\n}\nit.remove();\n}\n_pool.clear();\nnotifyAll(); \n}\npublic synchronized int getNumActive() {\nreturn _numActive;\n}\npublic synchronized int getNumIdle() {\nreturn _pool.size();\n}\npublic void returnObject(Object obj) throws Exception {\ntry {\naddObjectToPool(obj, true);\n} catch (Exception e) {\nif (_factory != null) {\ntry {\n_factory.destroyObject(obj);\n} catch (Exception e2) {\n}\n// TODO: Correctness here depends on control in addObjectToPool.\nsynchronized(this) {\n_numActive--;\nnotifyAll();\n}\n}\n}\n}\nprivate void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {\nboolean success = true;\nif(_testOnReturn && !(_factory.validateObject(obj))) {\nsuccess = false;\n} else {\n_factory.passivateObject(obj);\n}\nboolean shouldDestroy = !success;\nsynchronized (this) {\nif (isClosed()) {\nshouldDestroy = true;\n} else {\nif((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {\nshouldDestroy = true;\n} else if(success) {\nif (_lifo) {\n_pool.addFirst(new ObjectTimestampPair(obj));\n} else {\n_pool.addLast(new ObjectTimestampPair(obj));\n}\n}\n}\n}\nif(shouldDestroy) {\ntry {\n_factory.destroyObject(obj);\n} catch(Exception e) {\n}\n}\nif (decrementNumActive) {\nsynchronized(this) {\n_numActive--;\nnotifyAll();\n}\n}\n}\npublic void close() throws Exception {\nsuper.close();\nsynchronized (this) {\nclear();\nstartEvictor(-1L);\n}\n}\npublic synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {\nassertOpen();\nif(0 < getNumActive()) {\nthrow new IllegalStateException(\"Objects are already active\");\n} else {\nclear();\n_factory = factory;\n}\n}\npublic synchronized void evict() throws Exception {\nassertOpen();\nif(!_pool.isEmpty()) {\nif (null == _evictionCursor) {\n_evictionCursor = (_pool.cursor(_lifo ? _pool.size() : 0));\n}\nfor (int i=0,m=getNumTests();i<m;i++) {\nif ((_lifo && !_evictionCursor.hasPrevious()) ||\n!_lifo && !_evictionCursor.hasNext()) {\n_evictionCursor.close();\n_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);\n}\nboolean removeObject = false;\nfinal ObjectTimestampPair pair = _lifo ?\n(ObjectTimestampPair) _evictionCursor.previous() :\n(ObjectTimestampPair) _evictionCursor.next();\nfinal long idleTimeMilis = System.currentTimeMillis() - pair.tstamp;\nif ((_minEvictableIdleTimeMillis > 0)\n&& (idleTimeMilis > _minEvictableIdleTimeMillis)) {\nremoveObject = true;\n} else if ((_softMinEvictableIdleTimeMillis > 0)\n&& (idleTimeMilis > _softMinEvictableIdleTimeMillis)\n&& (getNumIdle() > getMinIdle())) {\nremoveObject = true;\n}\nif(_testWhileIdle && !removeObject) {\nboolean active = false;\ntry {\n_factory.activateObject(pair.value);\nactive = true;\n} catch(Exception e) {\nremoveObject=true;\n}\nif(active) {\nif(!_factory.validateObject(pair.value)) {\nremoveObject=true;\n} else {\ntry {\n_factory.passivateObject(pair.value);\n} catch(Exception e) {\nremoveObject=true;\n}\n}\n}\n}\nif(removeObject) {\ntry {\n_evictionCursor.remove();\n_factory.destroyObject(pair.value);\n} catch(Exception e) {\n}\n}\n}\n} \n}\nprivate void ensureMinIdle() throws Exception {\nint objectDeficit = calculateDeficit();\nfor ( int j = 0 ; j < objectDeficit && calculateDeficit() > 0 ; j++ ) {\naddObject();\n}\n}\nprivate synchronized int calculateDeficit() {\nint objectDeficit = getMinIdle() - getNumIdle();\nif (_maxActive > 0) {\nint growLimit = Math.max(0, getMaxActive() - getNumActive() - getNumIdle());\nobjectDeficit = Math.min(objectDeficit, growLimit);\n}\nreturn objectDeficit;\n}\npublic synchronized void addObject() throws Exception {\nassertOpen();\nif (_factory == null) {\nthrow new IllegalStateException(\"Cannot add objects without a factory.\");\n}\nObject obj = _factory.makeObject();\ntry {\nassertOpen();\naddObjectToPool(obj, false);\n} catch (IllegalStateException ex) { \ntry {\n_factory.destroyObject(obj);\n} catch (Exception ex2) {\n}\nthrow ex;\n}\n}\nprotected synchronized void startEvictor(long delay) {\nif(null != _evictor) {\nEvictionTimer.cancel(_evictor);\n_evictor = null;\n}\nif(delay > 0) {\n_evictor = new Evictor();\nEvictionTimer.schedule(_evictor, delay, delay);\n}\n}\nsynchronized String debugInfo() {\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Active: \").append(getNumActive()).append(\"\\n\");\nbuf.append(\"Idle: \").append(getNumIdle()).append(\"\\n\");\nbuf.append(\"Idle Objects:\\n\");\nIterator it = _pool.iterator();\nlong time = System.currentTimeMillis();\nwhile(it.hasNext()) {\nObjectTimestampPair pair = (ObjectTimestampPair)(it.next());\nbuf.append(\"\\t\").append(pair.value).append(\"\\t\").append(time - pair.tstamp).append(\"\\n\");\n}\nreturn buf.toString();\n}\nprivate int getNumTests() {\nif(_numTestsPerEvictionRun >= 0) {\nreturn Math.min(_numTestsPerEvictionRun, _pool.size());\n} else {\nreturn(int)(Math.ceil((double)_pool.size()/Math.abs((double)_numTestsPerEvictionRun)));\n}\n}\nprivate class Evictor extends TimerTask {\npublic void run() {\ntry {\nevict();\n} catch(Exception e) {\n}\ntry {\nensureMinIdle();\n} catch(Exception e) {\n}\n}\n}\npublic static class Config {\npublic int maxIdle = GenericObjectPool.DEFAULT_MAX_IDLE;\npublic int minIdle = GenericObjectPool.DEFAULT_MIN_IDLE;\npublic int maxActive = GenericObjectPool.DEFAULT_MAX_ACTIVE;\npublic long maxWait = GenericObjectPool.DEFAULT_MAX_WAIT;\npublic byte whenExhaustedAction = GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;\npublic boolean testOnBorrow = GenericObjectPool.DEFAULT_TEST_ON_BORROW;\npublic boolean testOnReturn = GenericObjectPool.DEFAULT_TEST_ON_RETURN;\npublic boolean testWhileIdle = GenericObjectPool.DEFAULT_TEST_WHILE_IDLE;\npublic long timeBetweenEvictionRunsMillis = GenericObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;\npublic int numTestsPerEvictionRun =  GenericObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;\npublic long minEvictableIdleTimeMillis = GenericObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;\npublic long softMinEvictableIdleTimeMillis = GenericObjectPool.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS;\npublic boolean lifo = GenericObjectPool.DEFAULT_LIFO;\n}\nprivate int _maxIdle = DEFAULT_MAX_IDLE;\nprivate int _minIdle = DEFAULT_MIN_IDLE;\nprivate int _maxActive = DEFAULT_MAX_ACTIVE;\nprivate long _maxWait = DEFAULT_MAX_WAIT;\nprivate byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;\nprivate volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;\nprivate volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;\nprivate boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;\nprivate long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;\nprivate int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;\nprivate long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;\nprivate long _softMinEvictableIdleTimeMillis = DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS;\nprivate boolean _lifo = DEFAULT_LIFO;\nprivate CursorableLinkedList _pool = null;\nprivate CursorableLinkedList.Cursor _evictionCursor = null;\nprivate PoolableObjectFactory _factory = null;\nprivate int _numActive = 0;\nprivate Evictor _evictor = null;\n",
    "warning_method": "public synchronized void clear() {\nfor (Iterator it = _pool.iterator(); it.hasNext(); ) {\ntry {\n_factory.destroyObject(((ObjectTimestampPair) (it.next())).value);\n} catch (Exception e) {\n}\nit.remove();\n}\n_pool.clear();\nnotifyAll();\n}"
}