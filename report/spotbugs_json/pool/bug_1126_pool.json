{
    "category": "BAD_PRACTICE",
    "vtype": "DE_MIGHT_IGNORE",
    "priority": "3",
    "rank": "19",
    "project": "pool",
    "warning_line": "} catch (Exception e1) {\n",
    "warning_method": "public T borrowObject(long borrowMaxWaitMillis) throws Exception {\nassertOpen();\nAbandonedConfig ac = this.abandonedConfig;\nif (ac != null && ac.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {\nremoveAbandoned(ac);\n}\nPooledObject<T> p = null;\nboolean blockWhenExhausted = getBlockWhenExhausted();\nboolean create;\nlong waitTime = System.currentTimeMillis();\nwhile (p == null) {\ncreate = false;\nif (blockWhenExhausted) {\np = idleObjects.pollFirst();\nif (p == null) {\np = create();\nif (p != null) {\ncreate = true;\n}\n}\nif (p == null) {\nif (borrowMaxWaitMillis < 0) {\np = idleObjects.takeFirst();\n} else {\np = idleObjects.pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);\n}\n}\nif (p == null) {\nthrow new NoSuchElementException(\"Timeout waiting for idle object\");\n}\nif (!p.allocate()) {\np = null;\n}\n} else {\np = idleObjects.pollFirst();\nif (p == null) {\np = create();\nif (p != null) {\ncreate = true;\n}\n}\nif (p == null) {\nthrow new NoSuchElementException(\"Pool exhausted\");\n}\nif (!p.allocate()) {\np = null;\n}\n}\nif (p != null) {\ntry {\nfactory.activateObject(p);\n} catch (Exception e) {\ntry {\ndestroy(p);\n} catch (Exception e1) {\n}\np = null;\nif (create) {\nNoSuchElementException nsee = new NoSuchElementException(\"Unable to activate object\");\nnsee.initCause(e);\nthrow nsee;\n}\n}\nif (p != null && (getTestOnBorrow() || create && getTestOnCreate())) {\nboolean validate = false;\nThrowable validationThrowable = null;\ntry {\nvalidate = factory.validateObject(p);\n} catch (Throwable t) {\nPoolUtils.checkRethrow(t);\nvalidationThrowable = t;\n}\nif (!validate) {\ntry {\ndestroy(p);\ndestroyedByBorrowValidationCount.incrementAndGet();\n} catch (Exception e) {\n}\np = null;\nif (create) {\nNoSuchElementException nsee = new NoSuchElementException(\"Unable to validate object\");\nnsee.initCause(validationThrowable);\nthrow nsee;\n}\n}\n}\n}\n}\nupdateStatsBorrow(p, System.currentTimeMillis() - waitTime);\nreturn p.getObject();\n}"
}