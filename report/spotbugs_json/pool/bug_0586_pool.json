{
    "category": "DODGY_CODE",
    "vtype": "RI_REDUNDANT_INTERFACES",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "this((PoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);\n}\npublic StackObjectPool(int maxIdle) {\nthis((PoolableObjectFactory)null,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);\n}\npublic StackObjectPool(int maxIdle, int initIdleCapacity) {\nthis((PoolableObjectFactory)null,maxIdle,initIdleCapacity);\n}\npublic StackObjectPool(PoolableObjectFactory factory) {\nthis(factory,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);\n}\npublic StackObjectPool(PoolableObjectFactory factory, int maxIdle) {\nthis(factory,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);\n}\npublic StackObjectPool(PoolableObjectFactory factory, int maxIdle, int initIdleCapacity) {\n_factory = factory;\n_maxSleeping = (maxIdle < 0 ? DEFAULT_MAX_SLEEPING : maxIdle);\nint initcapacity = (initIdleCapacity < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : initIdleCapacity);\n_pool = new Stack();\n_pool.ensureCapacity( initcapacity > _maxSleeping ? _maxSleeping : initcapacity);\n}\npublic synchronized Object borrowObject() throws Exception {\nassertOpen();\nObject obj = null;\nboolean newlyCreated = false;\nwhile (null == obj) {\nif (!_pool.empty()) {\nobj = _pool.pop();\n} else {\nif(null == _factory) {\nthrow new NoSuchElementException();\n} else {\nobj = _factory.makeObject();\nnewlyCreated = true;\nif (obj == null) {\nthrow new NoSuchElementException(\"PoolableObjectFactory.makeObject() returned null.\");\n}\n}\n}\nif (null != _factory && null != obj) {\ntry {\n_factory.activateObject(obj);\nif (!_factory.validateObject(obj)) {\nthrow new Exception(\"ValidateObject failed\");\n}\n} catch (Throwable t) {\ntry {\n_factory.destroyObject(obj);\n} catch (Throwable t2) {\n} finally {\nobj = null;\n}\nif (newlyCreated) {\nthrow new NoSuchElementException(\n\"Could not create a validated object, cause: \" +\nt.getMessage());\n}\n}\n}\n}\n_numActive++;\nreturn obj;\n}\npublic synchronized void returnObject(Object obj) throws Exception {\nboolean success = !isClosed();\nif(null != _factory) {\nif(!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\ntry {\n_factory.passivateObject(obj);\n} catch(Exception e) {\nsuccess = false;\n}\n}\n}\nboolean shouldDestroy = !success;\n_numActive--;\nif (success) {\nObject toBeDestroyed = null;\nif(_pool.size() >= _maxSleeping) {\nshouldDestroy = true;\ntoBeDestroyed = _pool.remove(0); \n}\n_pool.push(obj);\nobj = toBeDestroyed; \n}\nnotifyAll(); \nif(shouldDestroy) { \ntry {\n_factory.destroyObject(obj);\n} catch(Exception e) {\n}\n}\n}\npublic synchronized void invalidateObject(Object obj) throws Exception {\n_numActive--;\nif (null != _factory) {\n_factory.destroyObject(obj);\n}\nnotifyAll(); \n}\npublic synchronized int getNumIdle() {\nreturn _pool.size();\n}\npublic synchronized int getNumActive() {\nreturn _numActive;\n}\npublic synchronized void clear() {\nif(null != _factory) {\nIterator it = _pool.iterator();\nwhile(it.hasNext()) {\ntry {\n_factory.destroyObject(it.next());\n} catch(Exception e) {\n}\n}\n}\n_pool.clear();\n}\npublic void close() throws Exception {\nsuper.close();\nclear();\n}\npublic synchronized void addObject() throws Exception {\nassertOpen();\nif (_factory == null) {\nthrow new IllegalStateException(\"Cannot add objects without a factory.\");\n}\nObject obj = _factory.makeObject();\nboolean success = true;\nif(!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\n_factory.passivateObject(obj);\n}\nboolean shouldDestroy = !success;\nif (success) {\nObject toBeDestroyed = null;\nif(_pool.size() >= _maxSleeping) {\nshouldDestroy = true;\ntoBeDestroyed = _pool.remove(0); \n}\n_pool.push(obj);\nobj = toBeDestroyed; \n}\nnotifyAll(); \nif(shouldDestroy) { \ntry {\n_factory.destroyObject(obj);\n} catch(Exception e) {\n}\n}\n}\npublic synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {\nassertOpen();\nif(0 < getNumActive()) {\nthrow new IllegalStateException(\"Objects are already active\");\n} else {\nclear();\n_factory = factory;\n}\n}\nprotected static final int DEFAULT_MAX_SLEEPING  = 8;\nprotected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;\nprotected Stack _pool = null;\nprotected PoolableObjectFactory _factory = null;\nprotected int _maxSleeping = DEFAULT_MAX_SLEEPING;\nprotected int _numActive = 0;\n",
    "warning_method": "public synchronized void returnObject(Object obj) throws Exception {\nboolean success = !isClosed();\nif (null != _factory) {\nif (!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\ntry {\n_factory.passivateObject(obj);\n} catch (Exception e) {\nsuccess = false;\n}\n}\n}\nboolean shouldDestroy = !success;\n_numActive--;\nif (success) {\nObject toBeDestroyed = null;\nif (_pool.size() >= _maxSleeping) {\nshouldDestroy = true;\ntoBeDestroyed = _pool.remove(0);\n}\n_pool.push(obj);\nobj = toBeDestroyed;\n}\nnotifyAll();\nif (shouldDestroy) {\ntry {\n_factory.destroyObject(obj);\n} catch (Exception e) {\n}\n}\n}"
}