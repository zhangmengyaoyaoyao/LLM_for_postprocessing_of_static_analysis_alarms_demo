{
    "category": "BAD_PRACTICE",
    "vtype": "CN_IDIOM",
    "priority": "2",
    "rank": "16",
    "project": "pool",
    "warning_line": "static final Timer COMPOSITE_TIMER = new Timer(true);\n// XXX: Add better handling of when this instance is not Serializable\nprivate final PoolableObjectFactory factory;\nprivate final transient List pool;\nprivate final Lender lender;\nprivate final Manager manager;\nprivate final Tracker tracker;\nprivate final boolean validateOnReturn;\nprivate volatile boolean open = true;\nprivate final CompositeObjectPoolFactory.FactoryConfig factoryConfig;\nprivate CompositeKeyedObjectPool owningCompositeKeyedObjectPool = null;\nCompositeObjectPool(final PoolableObjectFactory factory, final Manager manager, final Lender lender, final Tracker tracker, final boolean validateOnReturn) {\nthis(factory, manager, lender, tracker, validateOnReturn, null);\n}\nCompositeObjectPool(final PoolableObjectFactory factory, final Manager manager, final Lender lender, final Tracker tracker, final boolean validateOnReturn, final CompositeObjectPoolFactory.FactoryConfig factoryConfig) {\nthis(factory, new LinkedList(), manager, lender, tracker, validateOnReturn, factoryConfig);\n}\nCompositeObjectPool(final PoolableObjectFactory factory, final List pool, final Manager manager, final Lender lender, final Tracker tracker, final boolean validateOnReturn, final CompositeObjectPoolFactory.FactoryConfig factoryConfig) {\nif (factory == null) {\nthrow new IllegalArgumentException(\"factory cannot be null.\");\n}\nif (pool == null) {\nthrow new IllegalArgumentException(\"pool cannot be null.\");\n}\nif (manager == null) {\nthrow new IllegalArgumentException(\"manager cannot be null.\");\n}\nif (lender == null) {\nthrow new IllegalArgumentException(\"lender cannot be null.\");\n}\nif (tracker == null) {\nthrow new IllegalArgumentException(\"tracker cannot be null.\");\n}\nthis.factory = factory;\nthis.pool = pool;\nthis.manager = manager;\nthis.lender = lender;\nthis.tracker = tracker;\nthis.validateOnReturn = validateOnReturn;\nthis.factoryConfig = factoryConfig;\nupdateCompositeObjectPools();\n}\nprivate void updateCompositeObjectPools() {\nlender.setCompositeObjectPool(this);\nmanager.setCompositeObjectPool(this);\n}\nLender getLender() {\nreturn lender;\n}\nPoolableObjectFactory getFactory() {\nreturn factory;\n}\nList getPool() {\nreturn pool;\n}\nvoid setOwningCompositeKeyedObjectPool(final CompositeKeyedObjectPool ckop) {\nif (owningCompositeKeyedObjectPool != null) {\nthrow new IllegalStateException(\"CompositeObjectPools cannot change ownership.\");\n}\nowningCompositeKeyedObjectPool = ckop;\n}\nCompositeKeyedObjectPool getOwningCompositeKeyedObjectPool() {\nreturn owningCompositeKeyedObjectPool;\n}\npublic void addObject() throws Exception {\nassertOpen();\nfinal Object obj = factory.makeObject();\nfactory.passivateObject(obj);\nsynchronized (pool) {\nif (isOpen()) {\nmanager.returnToPool(obj);\n} else {\nfactory.destroyObject(obj);\n}\n}\n}\npublic Object borrowObject() throws Exception {\nassertOpen();\nreturn internalBorrowObject();\n}\nprivate Object internalBorrowObject() throws Exception {\nfinal Object obj;\nsynchronized (pool) {\nobj = manager.nextFromPool();\ntracker.borrowed(obj);\n}\nreturn obj;\n}\npublic void returnObject(final Object obj) {\nif (validateOnReturn) {\nif (!factory.validateObject(obj)) {\ninvalidateObject(obj);\nreturn;\n}\n}\ntry {\nfactory.passivateObject(obj);\n} catch (Exception e) {\ninvalidateObject(obj);\nreturn;\n}\nsynchronized (pool) {\nif (isOpen()) {\ntracker.returned(obj);\nmanager.returnToPool(obj);\n} else {\ninvalidateObject(obj);\n}\n}\n}\npublic void invalidateObject(final Object obj) {\nsynchronized (pool) {\nif (pool.contains(obj)) {\nthrow new IllegalStateException(\"An object currently in the pool cannot be invalidated.\");\n}\ntracker.returned(obj);\ntry {\nfactory.destroyObject(obj);\n} catch (Exception e) {\n} finally {\npool.notifyAll(); \n}\n}\n}\npublic void clear() throws Exception, UnsupportedOperationException {\nsynchronized (pool) {\nwhile (pool.size() > 0) {\nfinal Object obj = internalBorrowObject();\ninvalidateObject(obj);\n}\nif (pool instanceof ArrayList) {\n((ArrayList)pool).trimToSize();\n}\n}\n}\npublic void close() {\nopen = false;\nThread.yield(); \nsynchronized (pool) {\ntry {\nclear();\n} catch (Exception e) {\n}\npool.notifyAll(); \n}\n}\npublic void setFactory(final PoolableObjectFactory factory) throws IllegalStateException, UnsupportedOperationException {\nif (this.factory != factory) {\nthrow new UnsupportedOperationException(\"Replacing the factory not supported. Create a new pool instance instead.\");\n}\n}\npublic int getNumActive() {\nreturn tracker.getBorrowed();\n}\npublic int getNumIdle() {\nreturn lender.size();\n}\nboolean isOpen() {\nreturn open;\n}\nprivate void assertOpen() throws IllegalStateException {\nif (!isOpen()) {\nthrow new IllegalStateException(\"pool has been closed.\");\n}\n}\npublic String toString() {\nfinal StringBuffer sb = new StringBuffer(128);\nsb.append(\"CompositeObjectPool{\");\nif (factoryConfig != null) {\nsb.append(factoryConfig);\n} else {\nsb.append(\"factory=\").append(factory);\nsb.append(\", lender=\").append(lender);\nsb.append(\", manager=\").append(manager);\nsb.append(\", tracker=\").append(tracker);\nsb.append(\", validateOnReturn=\").append(validateOnReturn);\n}\nsb.append(\", open=\").append(open);\ntry {\nfinal int numActive = getNumActive();\nsb.append(\", activeObjects=\").append(numActive);\n} catch (Exception e) {\n}\ntry {\nfinal int numIdle = getNumIdle();\nsb.append(\", idleObjects=\").append(numIdle);\n} catch (Exception e) {\n}\nsb.append('}');\nreturn sb.toString();\n",
    "warning_method": "private final transient List pool;"
}