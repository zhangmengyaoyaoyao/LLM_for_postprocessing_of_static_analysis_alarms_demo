{
    "category": "DODGY_CODE",
    "vtype": "RI_REDUNDANT_INTERFACES",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "public class GenericObjectPool<T> extends BaseObjectPool<T> implements ObjectPool<T>, GenericObjectPoolMBean<T> {\npublic GenericObjectPool(PoolableObjectFactory<T> factory) {\nthis(factory, new GenericObjectPoolConfig.Builder().createConfig());\n}\npublic GenericObjectPool(PoolableObjectFactory<T> factory, GenericObjectPoolConfig config) {\nif (factory == null) {\nthrow new IllegalArgumentException(\"factory must not be null\");\n}\nif (config == null) {\nthrow new IllegalArgumentException(\"config must not be null\");\n}\nthis._factory = factory;\nthis.maxIdle = config.getMaxIdle();\nthis.minIdle = config.getMinIdle();\nthis.maxTotal = config.getMaxTotal();\nthis.maxWait = config.getMaxWait();\nthis.whenExhaustedAction = config.getWhenExhaustedAction();\nthis.testOnBorrow = config.getTestOnBorrow();\nthis.testOnReturn = config.getTestOnReturn();\nthis.testWhileIdle = config.getTestWhileIdle();\nthis.timeBetweenEvictionRunsMillis = config.getTimeBetweenEvictionRunsMillis();\nthis.numTestsPerEvictionRun = config.getNumTestsPerEvictionRun();\nthis.minEvictableIdleTimeMillis = config.getMinEvictableIdleTimeMillis();\nthis.lifo = config.getLifo();\nthis.softMinEvictableIdleTimeMillis = config.getSoftMinEvictableIdleTimeMillis();\n_pool = new CursorableLinkedList<ObjectTimestampPair<T>>();\nstartEvictor(config.getTimeBetweenEvictionRunsMillis());\n}\npublic synchronized int getMaxTotal() {\nreturn this.maxTotal;\n}\npublic synchronized void setMaxTotal(int maxTotal) {\nthis.maxTotal = maxTotal;\nallocate();\n}\npublic synchronized WhenExhaustedAction getWhenExhaustedAction() {\nreturn this.whenExhaustedAction;\n}\npublic synchronized void setWhenExhaustedAction(WhenExhaustedAction whenExhaustedAction) {\nthis.whenExhaustedAction = whenExhaustedAction;\nallocate();\n}\npublic synchronized long getMaxWait() {\nreturn this.maxWait;\n}\npublic synchronized void setMaxWait(long maxWait) {\nthis.maxWait = maxWait;\nallocate();\n}\npublic synchronized int getMaxIdle() {\nreturn this.maxIdle;\n}\npublic synchronized void setMaxIdle(int maxIdle) {\nthis.maxIdle = maxIdle;\nallocate();\n}\npublic synchronized void setMinIdle(int minIdle) {\nthis.minIdle = minIdle;\nallocate();\n}\npublic synchronized int getMinIdle() {\nreturn this.minIdle;\n}\npublic synchronized boolean getTestOnBorrow() {\nreturn this.testOnBorrow;\n}\npublic synchronized void setTestOnBorrow(boolean testOnBorrow) {\nthis.testOnBorrow = testOnBorrow;\n}\npublic synchronized boolean getTestOnReturn() {\nreturn this.testOnReturn;\n}\npublic synchronized void setTestOnReturn(boolean testOnReturn) {\nthis.testOnReturn = testOnReturn;\n}\npublic synchronized long getTimeBetweenEvictionRunsMillis() {\nreturn this.timeBetweenEvictionRunsMillis;\n}\npublic synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {\nthis.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;\nstartEvictor(this.timeBetweenEvictionRunsMillis);\n}\npublic synchronized int getNumTestsPerEvictionRun() {\nreturn this.numTestsPerEvictionRun;\n}\npublic synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {\nthis.numTestsPerEvictionRun = numTestsPerEvictionRun;\n}\npublic synchronized long getMinEvictableIdleTimeMillis() {\nreturn this.minEvictableIdleTimeMillis;\n}\npublic synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {\nthis.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;\n}\npublic synchronized long getSoftMinEvictableIdleTimeMillis() {\nreturn this.softMinEvictableIdleTimeMillis;\n}\npublic synchronized void setSoftMinEvictableIdleTimeMillis(long softMinEvictableIdleTimeMillis) {\nthis.softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;\n}\npublic synchronized boolean getTestWhileIdle() {\nreturn this.testWhileIdle;\n}\npublic synchronized void setTestWhileIdle(boolean testWhileIdle) {\nthis.testWhileIdle = testWhileIdle;\n}\npublic synchronized boolean getLifo() {\nreturn this.lifo;\n}\npublic synchronized void setLifo(boolean lifo) {\nthis.lifo = lifo;\n}\n@Override\npublic T borrowObject() throws Exception {\nlong starttime = System.currentTimeMillis();\nLatch latch = new Latch();\nWhenExhaustedAction whenExhaustedAction;\nlong maxWait;\nsynchronized (this) {\nwhenExhaustedAction = this.whenExhaustedAction;\nmaxWait = this.maxWait;\n_allocationQueue.add(latch);\nallocate();\n}\nfor(;;) {\nsynchronized (this) {\nassertOpen();\n}\nif(latch.getPair() == null) {\nif(latch.mayCreate()) {\n} else {\nswitch(whenExhaustedAction) {\ncase GROW:\nsynchronized (this) {\nif (latch.getPair() == null && !latch.mayCreate()) {\n_allocationQueue.remove(latch);\n_numInternalProcessing++;\n}\n}\nbreak;\ncase FAIL:\nsynchronized (this) {\nif (latch.getPair() != null || latch.mayCreate()) {\nbreak;\n}\n_allocationQueue.remove(latch);\n}\nthrow new NoSuchElementException(\"Pool exhausted\");\ncase BLOCK:\ntry {\nsynchronized (latch) {\nif (latch.getPair() == null && !latch.mayCreate()) {\nif(maxWait <= 0) {\nlatch.wait();\n} else {\nfinal long elapsed = (System.currentTimeMillis() - starttime);\nfinal long waitTime = maxWait - elapsed;\nif (waitTime > 0)\n{\nlatch.wait(waitTime);\n}\n}\n} else {\nbreak;\n}\n}\n} catch(InterruptedException e) {\nsynchronized(this) {\nif (latch.getPair() == null && !latch.mayCreate()) {\n_allocationQueue.remove(latch);\n} else {\nbreak;\n}\n}\nThread.currentThread().interrupt();\nthrow e;\n}\nif(maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {\nsynchronized(this) {\nif (latch.getPair() == null && !latch.mayCreate()) {\n_allocationQueue.remove(latch);\n} else {\nbreak;\n}\n}\nthrow new NoSuchElementException(\"Timeout waiting for idle object\");\n} else {\ncontinue; \n}\ndefault:\nthrow new IllegalArgumentException(\"WhenExhaustedAction property \" + whenExhaustedAction +\n\" not recognized.\");\n}\n}\n}\nboolean newlyCreated = false;\nif(null == latch.getPair()) {\ntry {\nT obj = _factory.makeObject();\nlatch.setPair(new ObjectTimestampPair<T>(obj));\nnewlyCreated = true;\n} finally {\nif (!newlyCreated) {\nsynchronized (this) {\n_numInternalProcessing--;\nallocate();\n}\n}\n}\n}\ntry {\n_factory.activateObject(latch.getPair().getValue());\nif(testOnBorrow &&\n!_factory.validateObject(latch.getPair().getValue())) {\nthrow new Exception(\"ValidateObject failed\");\n}\nsynchronized(this) {\n_numInternalProcessing--;\n_numActive++;\n}\nreturn latch.getPair().getValue();\n}\ncatch (Throwable e) {\nPoolUtils.checkRethrow(e);\ntry {\n_factory.destroyObject(latch.getPair().getValue());\n} catch (Throwable e2) {\nPoolUtils.checkRethrow(e2);\n}\nsynchronized (this) {\n_numInternalProcessing--;\nif (!newlyCreated) {\nlatch.reset();\n_allocationQueue.add(0, latch);\n}\nallocate();\n}\nif(newlyCreated) {\nthrow new NoSuchElementException(\"Could not create a validated object, cause: \" + e.getMessage());\n}\nelse {\ncontinue; \n}\n}\n}\n}\nprivate synchronized void allocate() {\nif (isClosed()) return;\nfor (;;) {\nif (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {\nLatch latch = _allocationQueue.removeFirst();\nlatch.setPair(_pool.removeFirst());\n_numInternalProcessing++;\nsynchronized (latch) {\nlatch.notify();\n}\n} else {\nbreak;\n}\n}\nfor(;;) {\nif((!_allocationQueue.isEmpty()) && (this.maxTotal < 0 || (_numActive + _numInternalProcessing) < this.maxTotal)) {\nLatch latch = _allocationQueue.removeFirst();\nlatch.setMayCreate(true);\n_numInternalProcessing++;\nsynchronized (latch) {\nlatch.notify();\n}\n} else {\nbreak;\n}\n}\n}\n@Override\npublic void invalidateObject(T obj) throws Exception {\ntry {\n_factory.destroyObject(obj);\n} finally {\nsynchronized (this) {\n_numActive--;\nallocate();\n}\n}\n}\n@Override\npublic void clear() {\nList<ObjectTimestampPair<T>> toDestroy = new ArrayList<ObjectTimestampPair<T>>();\nsynchronized(this) {\ntoDestroy.addAll(_pool);\n_numInternalProcessing = _numInternalProcessing + _pool._size;\n_pool.clear();\n}\ndestroy(toDestroy, _factory);\n}\nprivate void destroy(Collection<ObjectTimestampPair<T>> c, PoolableObjectFactory<T> factory) {\nfor (ObjectTimestampPair<T> pair : c) {\ntry {\nfactory.destroyObject(pair.getValue());\n} catch (Exception e) {\n} finally {\nsynchronized (this) {\n_numInternalProcessing--;\nallocate();\n}\n}\n}\n}\n@Override\npublic synchronized int getNumActive() {\nreturn _numActive;\n}\n@Override\npublic synchronized int getNumIdle() {\nreturn _pool.size();\n}\n@Override\npublic void returnObject(T obj) throws Exception {\ntry {\naddObjectToPool(obj, true);\n} catch (Exception e) {\ntry {\n_factory.destroyObject(obj);\n} catch (Exception e2) {\n}\n// TODO: Correctness here depends on control in addObjectToPool.\nsynchronized(this) {\n_numActive--;\nallocate();\n}\n}\n}\nprivate void addObjectToPool(T obj, boolean decrementNumActive) throws Exception {\nboolean success = true;\nif(this.testOnReturn && !(_factory.validateObject(obj))) {\nsuccess = false;\n} else {\n_factory.passivateObject(obj);\n}\nboolean shouldDestroy = !success;\nsynchronized (this) {\nif (isClosed()) {\nshouldDestroy = true;\n} else {\nif((this.maxIdle >= 0) && (_pool.size() >= this.maxIdle)) {\nshouldDestroy = true;\n} else if(success) {\nif (this.getLifo()) {\n_pool.addFirst(new ObjectTimestampPair<T>(obj));\n} else {\n_pool.addLast(new ObjectTimestampPair<T>(obj));\n}\nif (decrementNumActive) {\n_numActive--;\n}\nallocate();\n}\n}\n}\nif(shouldDestroy) {\ntry {\n_factory.destroyObject(obj);\n} catch(Exception e) {\n}\nif (decrementNumActive) {\nsynchronized(this) {\n_numActive--;\nallocate();\n}\n}\n}\n}\n@Override\npublic void close() throws Exception {\nsuper.close();\nsynchronized (this) {\nclear();\nstartEvictor(-1L);\n}\n}\npublic void evict() throws Exception {\nassertOpen();\nsynchronized (this) {\nif(_pool.isEmpty()) {\nreturn;\n}\nif (null == _evictionCursor) {\n_evictionCursor = (_pool.cursor(this.lifo ? _pool.size() : 0));\n}\n}\nfor (int i=0,m=getNumTests();i<m;i++) {\nfinal ObjectTimestampPair<T> pair;\nsynchronized (this) {\nif ((this.lifo && !_evictionCursor.hasPrevious()) ||\n!this.lifo && !_evictionCursor.hasNext()) {\n_evictionCursor.close();\n_evictionCursor = _pool.cursor(this.lifo ? _pool.size() : 0);\n}\npair = this.lifo ? _evictionCursor.previous() : _evictionCursor.next();\n_evictionCursor.remove();\n_numInternalProcessing++;\n}\nboolean removeObject = false;\nfinal long idleTimeMilis = System.currentTimeMillis() - pair.getTstamp();\nif ((getMinEvictableIdleTimeMillis() > 0) &&\n(idleTimeMilis > getMinEvictableIdleTimeMillis())) {\nremoveObject = true;\n} else if ((getSoftMinEvictableIdleTimeMillis() > 0) &&\n(idleTimeMilis > getSoftMinEvictableIdleTimeMillis()) &&\n((getNumIdle() + 1)> getMinIdle())) { \nremoveObject = true;\n}\nif(getTestWhileIdle() && !removeObject) {\nboolean active = false;\ntry {\n_factory.activateObject(pair.getValue());\nactive = true;\n} catch(Exception e) {\nremoveObject=true;\n}\nif(active) {\nif(!_factory.validateObject(pair.getValue())) {\nremoveObject=true;\n} else {\ntry {\n_factory.passivateObject(pair.getValue());\n} catch(Exception e) {\nremoveObject=true;\n}\n}\n}\n}\nif (removeObject) {\ntry {\n_factory.destroyObject(pair.getValue());\n} catch(Exception e) {\n}\n}\nsynchronized (this) {\nif(!removeObject) {\n_evictionCursor.add(pair);\nif (this.lifo) {\n_evictionCursor.previous();\n}\n}\n_numInternalProcessing--;\n}\n}\n}\nprivate void ensureMinIdle() throws Exception {\nint objectDeficit = calculateDeficit(false);\nfor ( int j = 0 ; j < objectDeficit && calculateDeficit(true) > 0 ; j++ ) {\ntry {\naddObject();\n} finally {\nsynchronized (this) {\n_numInternalProcessing--;\nallocate();\n}\n}\n}\n}\nprivate synchronized int calculateDeficit(boolean incrementInternal) {\nint objectDeficit = getMinIdle() - getNumIdle();\nif (this.maxTotal > 0) {\nint growLimit = Math.max(0,\nmaxTotal - getNumActive() - getNumIdle() - _numInternalProcessing);\nobjectDeficit = Math.min(objectDeficit, growLimit);\n}\nif (incrementInternal && objectDeficit >0) {\n_numInternalProcessing++;\n}\nreturn objectDeficit;\n}\n@Override\npublic void addObject() throws Exception {\nassertOpen();\nT obj = _factory.makeObject();\ntry {\nassertOpen();\naddObjectToPool(obj, false);\n} catch (IllegalStateException ex) { \ntry {\n_factory.destroyObject(obj);\n} catch (Exception ex2) {\n}\nthrow ex;\n}\n}\nprotected synchronized void startEvictor(long delay) {\nif(null != _evictor) {\nEvictionTimer.cancel(_evictor);\n_evictor = null;\n}\nif(delay > 0) {\n_evictor = new Evictor();\nEvictionTimer.schedule(_evictor, delay, delay);\n}\n}\nsynchronized String debugInfo() {\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Active: \").append(getNumActive()).append(\"\\n\");\nbuf.append(\"Idle: \").append(getNumIdle()).append(\"\\n\");\nbuf.append(\"Idle Objects:\\n\");\nlong time = System.currentTimeMillis();\nfor (ObjectTimestampPair<T> pair  : _pool) {\nbuf.append(\"\\t\").append(pair.getValue()).append(\"\\t\").append(time - pair.getTstamp()).append(\"\\n\");\n}\nreturn buf.toString();\n}\nprivate int getNumTests() {\nint numTestsPerEvictionRun = this.numTestsPerEvictionRun;\nif(numTestsPerEvictionRun >= 0) {\nreturn Math.min(numTestsPerEvictionRun, _pool.size());\n} else {\nreturn(int)(Math.ceil(_pool.size()/Math.abs((double)numTestsPerEvictionRun)));\n}\n}\nprivate class Evictor extends TimerTask {\n@Override\npublic void run() {\ntry {\nevict();\n} catch(Exception e) {\n} catch(OutOfMemoryError oome) {\noome.printStackTrace(System.err);\n}\ntry {\nensureMinIdle();\n} catch(Exception e) {\n}\n}\n}\nprivate final class Latch {\nprivate ObjectTimestampPair<T> _pair;\nprivate boolean _mayCreate = false;\nprivate synchronized ObjectTimestampPair<T> getPair() {\nreturn _pair;\n}\nprivate synchronized void setPair(ObjectTimestampPair<T> pair) {\n_pair = pair;\n}\nprivate synchronized boolean mayCreate() {\nreturn _mayCreate;\n}\nprivate synchronized void setMayCreate(boolean mayCreate) {\n_mayCreate = mayCreate;\n}\nprivate synchronized void reset() {\n_pair = null;\n_mayCreate = false;\n}\n}\nprivate int maxIdle; \nprivate int minIdle; \nprivate int maxTotal; \nprivate long maxWait; \nprivate WhenExhaustedAction whenExhaustedAction; \nprivate boolean testOnBorrow; \nprivate boolean testOnReturn; \nprivate boolean testWhileIdle; \nprivate long timeBetweenEvictionRunsMillis; \nprivate int numTestsPerEvictionRun; \nprivate long minEvictableIdleTimeMillis; \nprivate boolean lifo; \nprivate long softMinEvictableIdleTimeMillis; \nprivate CursorableLinkedList<ObjectTimestampPair<T>> _pool = null;\nprivate CursorableLinkedList<ObjectTimestampPair<T>>.Cursor _evictionCursor = null;\nprivate final PoolableObjectFactory<T> _factory;\nprivate int _numActive = 0;\nprivate Evictor _evictor = null;\nprivate int _numInternalProcessing = 0;\nprivate final LinkedList<Latch> _allocationQueue = new LinkedList<Latch>();\n",
    "warning_method": "private synchronized void allocate() {\nif (isClosed())\nreturn;\nfor (; ; ) {\nif (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {\nLatch latch = _allocationQueue.removeFirst();\nlatch.setPair(_pool.removeFirst());\n_numInternalProcessing++;\nsynchronized (latch) {\nlatch.notify();\n}\n} else {\nbreak;\n}\n}\nfor (; ; ) {\nif ((!_allocationQueue.isEmpty()) && (this.maxTotal < 0 || (_numActive + _numInternalProcessing) < this.maxTotal)) {\nLatch latch = _allocationQueue.removeFirst();\nlatch.setMayCreate(true);\n_numInternalProcessing++;\nsynchronized (latch) {\nlatch.notify();\n}\n} else {\nbreak;\n}\n}\n}"
}