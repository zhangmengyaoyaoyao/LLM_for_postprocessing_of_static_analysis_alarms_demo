{
    "category": "DODGY_CODE",
    "vtype": "SF_SWITCH_FALLTHROUGH",
    "priority": "2",
    "rank": "17",
    "project": "codec",
    "warning_line": "h ^= (data[index + 2] & 0xff) << 16;\ncase 2:\nh ^= (data[index + 1] & 0xff) << 8;\n",
    "warning_method": "public static int hash32(final byte[] data, final int length, final int seed) {\nint h = seed ^ length;\nfinal int nblocks = length >> 2;\nfor (int i = 0; i < nblocks; i++) {\nfinal int index = (i << 2);\nint k = getLittleEndianInt(data, index);\nk *= M32;\nk ^= k >>> R32;\nk *= M32;\nh *= M32;\nh ^= k;\n}\nfinal int index = (nblocks << 2);\nswitch(length - index) {\ncase 3:\nh ^= (data[index + 2] & 0xff) << 16;\ncase 2:\nh ^= (data[index + 1] & 0xff) << 8;\ncase 1:\nh ^= (data[index] & 0xff);\nh *= M32;\n}\nh ^= h >>> 13;\nh *= M32;\nh ^= h >>> 15;\nreturn h;\n}"
}