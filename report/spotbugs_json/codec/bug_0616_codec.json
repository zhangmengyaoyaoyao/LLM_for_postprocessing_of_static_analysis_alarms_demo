{
    "category": "DODGY_CODE",
    "vtype": "SA_FIELD_DOUBLE_ASSIGNMENT",
    "priority": "2",
    "rank": "17",
    "project": "codec",
    "warning_line": "modulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;\n",
    "warning_method": "void decode(byte[] in, int inPos, int inAvail) {\nif (eof) {\nreturn;\n}\nif (inAvail < 0) {\neof = true;\n}\nfor (int i = 0; i < inAvail; i++) {\nensureBufferSize(decodeSize);\nbyte b = in[inPos++];\nif (b == PAD) {\neof = true;\nbreak;\n} else {\nif (b >= 0 && b < DECODE_TABLE.length) {\nint result = DECODE_TABLE[b];\nif (result >= 0) {\nmodulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;\nbitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;\nif (modulus == 0) {\nbuffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);\nbuffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);\nbuffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);\n}\n}\n}\n}\n}\n// Two forms of EOF as far as base64 decoder is concerned: actual\nif (eof && modulus != 0) {\nensureBufferSize(decodeSize);\nswitch(modulus) {\ncase 2:\nbitWorkArea = bitWorkArea >> 4;\nbuffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);\nbreak;\ncase 3:\nbitWorkArea = bitWorkArea >> 2;\nbuffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);\nbuffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);\nbreak;\n}\n}\n}"
}