{
    "category": "DODGY_CODE",
    "vtype": "SF_SWITCH_NO_DEFAULT",
    "priority": "2",
    "rank": "19",
    "project": "codec",
    "warning_line": "switch (context.modulus) { \ncase 1 : \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; \ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\nbreak;\ncase 2 : \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS]; \ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\nbreak;\ncase 3 : \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS]; \ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\nbreak;\ncase 4 : \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS]; \ncontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; \ncontext.buffer[context.pos++] = PAD;\n",
    "warning_method": "@Override\nvoid encode(byte[] in, int inPos, int inAvail, Context context) {\nif (context.eof) {\nreturn;\n}\nif (inAvail < 0) {\ncontext.eof = true;\nif (0 == context.modulus && lineLength == 0) {\nreturn;\n}\nensureBufferSize(encodeSize, context);\nint savedPos = context.pos;\nswitch(context.modulus) {\ncase 1:\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 3) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 2) & MASK_5BITS];\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\nbreak;\ncase 2:\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 11) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 6) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 1) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 4) & MASK_5BITS];\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\nbreak;\ncase 3:\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 19) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 14) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 9) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 4) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 1) & MASK_5BITS];\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\ncontext.buffer[context.pos++] = PAD;\nbreak;\ncase 4:\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 27) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 22) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 17) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 12) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 7) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 2) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 3) & MASK_5BITS];\ncontext.buffer[context.pos++] = PAD;\nbreak;\n}\ncontext.currentLinePos += context.pos - savedPos;\nif (lineLength > 0 && context.currentLinePos > 0) {\nSystem.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);\ncontext.pos += lineSeparator.length;\n}\n} else {\nfor (int i = 0; i < inAvail; i++) {\nensureBufferSize(encodeSize, context);\ncontext.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;\nint b = in[inPos++];\nif (b < 0) {\nb += 256;\n}\ncontext.lbitWorkArea = (context.lbitWorkArea << 8) + b;\nif (0 == context.modulus) {\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 35) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 30) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 25) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 20) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 15) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 10) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 5) & MASK_5BITS];\ncontext.buffer[context.pos++] = encodeTable[(int) context.lbitWorkArea & MASK_5BITS];\ncontext.currentLinePos += BYTES_PER_ENCODED_BLOCK;\nif (lineLength > 0 && lineLength <= context.currentLinePos) {\nSystem.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);\ncontext.pos += lineSeparator.length;\ncontext.currentLinePos = 0;\n}\n}\n}\n}\n}"
}