{
    "category": "BAD_PRACTICE",
    "vtype": "SE_NO_SERIALVERSIONID",
    "priority": "1",
    "rank": "14",
    "project": "fileupload",
    "warning_line": "private static final String UID =\nnew java.rmi.server.UID().toString()\n.replace(':', '_').replace('-', '_');\nprivate static int counter = 0;\nprivate String fieldName;\nprivate String contentType;\nprivate boolean isFormField;\nprivate String fileName;\nprivate long size = -1;\nprivate int sizeThreshold;\nprivate File repository;\nprivate byte[] cachedContent;\nprivate transient DeferredFileOutputStream dfos;\nprivate File dfosFile;\npublic DiskFileItem(String fieldName, String contentType,\nboolean isFormField, String fileName, int sizeThreshold,\nFile repository) {\nthis.fieldName = fieldName;\nthis.contentType = contentType;\nthis.isFormField = isFormField;\nthis.fileName = fileName;\nthis.sizeThreshold = sizeThreshold;\nthis.repository = repository;\n}\npublic InputStream getInputStream()\nthrows IOException {\nif (!isInMemory()) {\nreturn new FileInputStream(dfos.getFile());\n}\nif (cachedContent == null) {\ncachedContent = dfos.getData();\n}\nreturn new ByteArrayInputStream(cachedContent);\n}\npublic String getContentType() {\nreturn contentType;\n}\npublic String getCharSet() {\nParameterParser parser = new ParameterParser();\nparser.setLowerCaseNames(true);\nMap params = parser.parse(getContentType(), ';');\nreturn (String) params.get(\"charset\");\n}\npublic String getName() {\nreturn fileName;\n}\npublic boolean isInMemory() {\nif (cachedContent != null) {\nreturn true;\n}\nreturn dfos.isInMemory();\n}\npublic long getSize() {\nif (size >= 0) {\nreturn size;\n} else if (cachedContent != null) {\nreturn cachedContent.length;\n} else if (dfos.isInMemory()) {\nreturn dfos.getData().length;\n} else {\nreturn dfos.getFile().length();\n}\n}\npublic byte[] get() {\nif (isInMemory()) {\nif (cachedContent == null) {\ncachedContent = dfos.getData();\n}\nreturn cachedContent;\n}\nbyte[] fileData = new byte[(int) getSize()];\nFileInputStream fis = null;\ntry {\nfis = new FileInputStream(dfos.getFile());\nfis.read(fileData);\n} catch (IOException e) {\nfileData = null;\n} finally {\nif (fis != null) {\ntry {\nfis.close();\n} catch (IOException e) {\n}\n}\n}\nreturn fileData;\n}\npublic String getString(final String charset)\nthrows UnsupportedEncodingException {\nreturn new String(get(), charset);\n}\npublic String getString() {\nbyte[] rawdata = get();\nString charset = getCharSet();\nif (charset == null) {\ncharset = DEFAULT_CHARSET;\n}\ntry {\nreturn new String(rawdata, charset);\n} catch (UnsupportedEncodingException e) {\nreturn new String(rawdata);\n}\n}\npublic void write(File file) throws Exception {\nif (isInMemory()) {\nFileOutputStream fout = null;\ntry {\nfout = new FileOutputStream(file);\nfout.write(get());\n} finally {\nif (fout != null) {\nfout.close();\n}\n}\n} else {\nFile outputFile = getStoreLocation();\nif (outputFile != null) {\nsize = outputFile.length();\nif (!outputFile.renameTo(file)) {\nBufferedInputStream in = null;\nBufferedOutputStream out = null;\ntry {\nin = new BufferedInputStream(\nnew FileInputStream(outputFile));\nout = new BufferedOutputStream(\nnew FileOutputStream(file));\nIOUtils.copy(in, out);\n} finally {\nif (in != null) {\ntry {\nin.close();\n} catch (IOException e) {\n}\n}\nif (out != null) {\ntry {\nout.close();\n} catch (IOException e) {\n}\n}\n}\n}\n} else {\nthrow new FileUploadException(\n\"Cannot write uploaded file to disk!\");\n}\n}\n}\npublic void delete() {\ncachedContent = null;\nFile outputFile = getStoreLocation();\nif (outputFile != null && outputFile.exists()) {\noutputFile.delete();\n}\n}\npublic String getFieldName() {\nreturn fieldName;\n}\npublic void setFieldName(String fieldName) {\nthis.fieldName = fieldName;\n}\npublic boolean isFormField() {\nreturn isFormField;\n}\npublic void setFormField(boolean state) {\nisFormField = state;\n}\npublic OutputStream getOutputStream()\nthrows IOException {\nif (dfos == null) {\nFile outputFile = getTempFile();\ndfos = new DeferredFileOutputStream(sizeThreshold, outputFile);\n}\nreturn dfos;\n}\npublic File getStoreLocation() {\nreturn dfos.getFile();\n}\nprotected void finalize() {\nFile outputFile = dfos.getFile();\nif (outputFile != null && outputFile.exists()) {\noutputFile.delete();\n}\n}\nprotected File getTempFile() {\nFile tempDir = repository;\nif (tempDir == null) {\ntempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n}\nString tempFileName = \"upload_\" + UID + \"_\" + getUniqueId() + \".tmp\";\nFile f = new File(tempDir, tempFileName);\nFileCleaner.track(f, this);\nreturn f;\n}\nprivate static String getUniqueId() {\nfinal int limit = 100000000;\nint current;\nsynchronized (DiskFileItem.class) {\ncurrent = counter++;\n}\nString id = Integer.toString(current);\nif (current < limit) {\nid = (\"00000000\" + id).substring(id.length());\n}\nreturn id;\n}\npublic String toString() {\nreturn \"name=\" + this.getName()\n+ \", StoreLocation=\"\n+ String.valueOf(this.getStoreLocation())\n+ \", size=\"\n+ this.getSize()\n+ \"bytes, \"\n+ \"isFormField=\" + isFormField()\n+ \", FieldName=\"\n+ this.getFieldName();\n}\nprivate void writeObject(ObjectOutputStream out) throws IOException {\nif (dfos.isInMemory()) {\ncachedContent = get();\n} else {\ncachedContent = null;\ndfosFile = dfos.getFile();\n}\nout.defaultWriteObject();\n}\nprivate void readObject(ObjectInputStream in)\nthrows IOException, ClassNotFoundException {\nin.defaultReadObject();\nOutputStream output = getOutputStream();\nif (cachedContent != null) {\noutput.write(cachedContent);\n} else {\nFileInputStream input = new FileInputStream(dfosFile);\nIOUtils.copy(input, output);\ndfosFile.delete();\ndfosFile = null;\n}\noutput.close();\ncachedContent = null;\n}\n",
    "warning_method": "public byte[] get() {\nif (isInMemory()) {\nif (cachedContent == null) {\ncachedContent = dfos.getData();\n}\nreturn cachedContent;\n}\nbyte[] fileData = new byte[(int) getSize()];\nFileInputStream fis = null;\ntry {\nfis = new FileInputStream(dfos.getFile());\nfis.read(fileData);\n} catch (IOException e) {\nfileData = null;\n} finally {\nif (fis != null) {\ntry {\nfis.close();\n} catch (IOException e) {\n}\n}\n}\nreturn fileData;\n}"
}