{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "binutils/ieee.c",
    "message": "Offset added: [32, +oo] (‚áê [0, +oo] + [32, +oo]) Size: [1, +oo] by call to `parse_ieee_bb`.",
    "warning_function_name": "parse_ieee",
    "warning_line": "if (! parse_ieee_bb (&info, &p))",
    "warning_context": "bfd_boolean\nparse_ieee (void *dhandle, bfd *abfd, const bfd_byte *bytes, bfd_size_type len)\n{\n  struct ieee_info info;\n  unsigned int i;\n  const bfd_byte *p, *pend;\n\n  info.dhandle = dhandle;\n  info.abfd = abfd;\n  info.bytes = bytes;\n  info.pend = bytes + len;\n  info.blockstack.bsp = info.blockstack.stack;\n  info.saw_filename = FALSE;\n  info.vars.alloc = 0;\n  info.vars.vars = NULL;\n  info.global_vars = NULL;\n  info.types.alloc = 0;\n  info.types.types = NULL;\n  info.global_types = NULL;\n  info.tags = NULL;\n  for (i = 0; i < BUILTIN_TYPE_COUNT; i++)\n    info.types.builtins[i] = DEBUG_TYPE_NULL;\n\n  p = bytes;\n  pend = info.pend;\n  while (p < pend)\n    {\n      const bfd_byte *record_start;\n      ieee_record_enum_type c;\n\n      record_start = p;\n\n      c = (ieee_record_enum_type) *p++;\n\n      if (c == ieee_at_record_enum)\n\tc = (ieee_record_enum_type) (((unsigned int) c << 8) | *p++);\n\n      if (c <= ieee_number_repeat_end_enum)\n\t{\n\t  ieee_error (&info, record_start, _(\"unexpected number\"));\n\t  return FALSE;\n\t}\n\n      switch (c)\n\t{\n\tdefault:\n\t  ieee_error (&info, record_start, _(\"unexpected record type\"));\n\t  return FALSE;\n\n\tcase ieee_bb_record_enum:\n\t  if (! parse_ieee_bb (&info, &p))\n\t    return FALSE;\n\t  break;\n\n\tcase ieee_be_record_enum:\n\t  if (! parse_ieee_be (&info, &p))\n\t    return FALSE;\n\t  break;\n\n\tcase ieee_nn_record:\n\t  if (! parse_ieee_nn (&info, &p))\n\t    return FALSE;\n\t  break;\n\n\tcase ieee_ty_record_enum:\n\t  if (! parse_ieee_ty (&info, &p))\n\t    return FALSE;\n\t  break;\n\n\tcase ieee_atn_record_enum:\n\t  if (! parse_ieee_atn (&info, &p))\n\t    return FALSE;\n\t  break;\n\t}\n    }\n\n  if (info.blockstack.bsp != info.blockstack.stack)\n    {\n      ieee_error (&info, (const bfd_byte *) NULL,\n\t\t  _(\"blocks left on stack at end\"));\n      return FALSE;\n    }\n\n  return TRUE;\n}\n"
}