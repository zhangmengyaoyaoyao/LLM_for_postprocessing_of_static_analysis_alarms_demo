{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L2",
    "Code_line": "\t      strcat (buf, isa);",
    "Code_function": "get_machine_flags (unsigned e_flags, unsigned e_machine)\n{\n  static char buf[1024];\n\n  buf[0] = '\\0';\n\n  if (e_flags)\n    {\n      switch (e_machine)\n\t{\n\tdefault:\n\t  break;\n\n\tcase EM_ARM:\n\t  decode_ARM_machine_flags (e_flags, buf);\n\t  break;\n\n\tcase EM_BLACKFIN:\n\t  if (e_flags & EF_BFIN_PIC)\n\t    strcat (buf, \", PIC\");\n\n\t  if (e_flags & EF_BFIN_FDPIC)\n\t    strcat (buf, \", FDPIC\");\n\n\t  if (e_flags & EF_BFIN_CODE_IN_L1)\n\t    strcat (buf, \", code in L1\");\n\n\t  if (e_flags & EF_BFIN_DATA_IN_L1)\n\t    strcat (buf, \", data in L1\");\n\n\t  break;\n\n\tcase EM_CYGNUS_FRV:\n\t  switch (e_flags & EF_FRV_CPU_MASK)\n\t    {\n\t    case EF_FRV_CPU_GENERIC:\n\t      break;\n\n\t    default:\n\t      strcat (buf, \", fr???\");\n\t      break;\n\n\t    case EF_FRV_CPU_FR300:\n\t      strcat (buf, \", fr300\");\n\t      break;\n\n\t    case EF_FRV_CPU_FR400:\n\t      strcat (buf, \", fr400\");\n\t      break;\n\t    case EF_FRV_CPU_FR405:\n\t      strcat (buf, \", fr405\");\n\t      break;\n\n\t    case EF_FRV_CPU_FR450:\n\t      strcat (buf, \", fr450\");\n\t      break;\n\n\t    case EF_FRV_CPU_FR500:\n\t      strcat (buf, \", fr500\");\n\t      break;\n\t    case EF_FRV_CPU_FR550:\n\t      strcat (buf, \", fr550\");\n\t      break;\n\n\t    case EF_FRV_CPU_SIMPLE:\n\t      strcat (buf, \", simple\");\n\t      break;\n\t    case EF_FRV_CPU_TOMCAT:\n\t      strcat (buf, \", tomcat\");\n\t      break;\n\t    }\n\t  break;\n\n\tcase EM_68K:\n\t  if ((e_flags & EF_M68K_ARCH_MASK) == EF_M68K_M68000)\n\t    strcat (buf, \", m68000\");\n\t  else if ((e_flags & EF_M68K_ARCH_MASK) == EF_M68K_CPU32)\n\t    strcat (buf, \", cpu32\");\n\t  else if ((e_flags & EF_M68K_ARCH_MASK) == EF_M68K_FIDO)\n\t    strcat (buf, \", fido_a\");\n\t  else\n\t    {\n\t      char const * isa = _(\"unknown\");\n\t      char const * mac = _(\"unknown mac\");\n\t      char const * additional = NULL;\n\n\t      switch (e_flags & EF_M68K_CF_ISA_MASK)\n\t\t{\n\t\tcase EF_M68K_CF_ISA_A_NODIV:\n\t\t  isa = \"A\";\n\t\t  additional = \", nodiv\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_A:\n\t\t  isa = \"A\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_A_PLUS:\n\t\t  isa = \"A+\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_B_NOUSP:\n\t\t  isa = \"B\";\n\t\t  additional = \", nousp\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_B:\n\t\t  isa = \"B\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_C:\n\t\t  isa = \"C\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_C_NODIV:\n\t\t  isa = \"C\";\n\t\t  additional = \", nodiv\";\n\t\t  break;\n\t\t}\n\t      strcat (buf, \", cf, isa \");\n\t      strcat (buf, isa);\n\t      if (additional)\n\t\tstrcat (buf, additional);\n\t      if (e_flags & EF_M68K_CF_FLOAT)\n\t\tstrcat (buf, \", float\");\n\t      switch (e_flags & EF_M68K_CF_MAC_MASK)\n\t\t{\n\t\tcase 0:\n\t\t  mac = NULL;\n\t\t  break;\n\t\tcase EF_M68K_CF_MAC:\n\t\t  mac = \"mac\";\n\t\t  break;\n\t\tcase EF_M68K_CF_EMAC:\n\t\t  mac = \"emac\";\n\t\t  break;\n\t\tcase EF_M68K_CF_EMAC_B:\n\t\t  mac = \"emac_b\";\n\t\t  break;\n\t\t}\n\t      if (mac)\n\t\t{\n\t\t  strcat (buf, \", \");\n\t\t  strcat (buf, mac);\n\t\t}\n\t    }\n\t  break;\n\n\tcase EM_PPC:\n\t  if (e_flags & EF_PPC_EMB)\n\t    strcat (buf, \", emb\");\n\n\t  if (e_flags & EF_PPC_RELOCATABLE)\n\t    strcat (buf, _(\", relocatable\"));\n\n\t  if (e_flags & EF_PPC_RELOCATABLE_LIB)\n\t    strcat (buf, _(\", relocatable-lib\"));\n\t  break;\n\n\tcase EM_PPC64:\n\t  if (e_flags & EF_PPC64_ABI)\n\t    {\n\t      char abi[] = \", abiv0\";\n\n\t      abi[6] += e_flags & EF_PPC64_ABI;\n\t      strcat (buf, abi);\n\t    }\n\t  break;\n\n\tcase EM_V800:\n\t  if ((e_flags & EF_RH850_ABI) == EF_RH850_ABI)\n\t    strcat (buf, \", RH850 ABI\");\n\n\t  if (e_flags & EF_V800_850E3)\n\t    strcat (buf, \", V3 architecture\");\n\n\t  if ((e_flags & (EF_RH850_FPU_DOUBLE | EF_RH850_FPU_SINGLE)) == 0)\n\t    strcat (buf, \", FPU not used\");\n\n\t  if ((e_flags & (EF_RH850_REGMODE22 | EF_RH850_REGMODE32)) == 0)\n\t    strcat (buf, \", regmode: COMMON\");\n\n\t  if ((e_flags & (EF_RH850_GP_FIX | EF_RH850_GP_NOFIX)) == 0)\n\t    strcat (buf, \", r4 not used\");\n\n\t  if ((e_flags & (EF_RH850_EP_FIX | EF_RH850_EP_NOFIX)) == 0)\n\t    strcat (buf, \", r30 not used\");\n\n\t  if ((e_flags & (EF_RH850_TP_FIX | EF_RH850_TP_NOFIX)) == 0)\n\t    strcat (buf, \", r5 not used\");\n\n\t  if ((e_flags & (EF_RH850_REG2_RESERVE | EF_RH850_REG2_NORESERVE)) == 0)\n\t    strcat (buf, \", r2 not used\");\n\n\t  for (e_flags &= 0xFFFF; e_flags; e_flags &= ~ (e_flags & - e_flags))\n\t    {\n\t      switch (e_flags & - e_flags)\n\t\t{\n\t\tcase EF_RH850_FPU_DOUBLE: strcat (buf, \", double precision FPU\"); break;\n\t\tcase EF_RH850_FPU_SINGLE: strcat (buf, \", single precision FPU\"); break;\n\t\tcase EF_RH850_SIMD: strcat (buf, \", SIMD\"); break;\n\t\tcase EF_RH850_CACHE: strcat (buf, \", CACHE\"); break;\n\t\tcase EF_RH850_MMU: strcat (buf, \", MMU\"); break;\n\t\tcase EF_RH850_REGMODE22: strcat (buf, \", regmode:22\"); break;\n\t\tcase EF_RH850_REGMODE32: strcat (buf, \", regmode:23\"); break;\n\t\tcase EF_RH850_DATA_ALIGN8: strcat (buf, \", 8-byte alignment\"); break;\n\t\tcase EF_RH850_GP_FIX: strcat (buf, \", r4 fixed\"); break;\n\t\tcase EF_RH850_GP_NOFIX: strcat (buf, \", r4 free\"); break;\n\t\tcase EF_RH850_EP_FIX: strcat (buf, \", r30 fixed\"); break;\n\t\tcase EF_RH850_EP_NOFIX: strcat (buf, \", r30 free\"); break;\n\t\tcase EF_RH850_TP_FIX: strcat (buf, \", r5 fixed\"); break;\n\t\tcase EF_RH850_TP_NOFIX: strcat (buf, \", r5 free\"); break;\n\t\tcase EF_RH850_REG2_RESERVE: strcat (buf, \", r2 fixed\"); break;\n\t\tcase EF_RH850_REG2_NORESERVE: strcat (buf, \", r2 free\"); break;\n\t\tdefault: break;\n\t\t}\n\t    }\n\t  break;\n\n\tcase EM_V850:\n\tcase EM_CYGNUS_V850:\n\t  switch (e_flags & EF_V850_ARCH)\n\t    {\n\t    case E_V850E3V5_ARCH:\n\t      strcat (buf, \", v850e3v5\");\n\t      break;\n\t    case E_V850E2V3_ARCH:\n\t      strcat (buf, \", v850e2v3\");\n\t      break;\n\t    case E_V850E2_ARCH:\n\t      strcat (buf, \", v850e2\");\n\t      break;\n            case E_V850E1_ARCH:\n              strcat (buf, \", v850e1\");\n\t      break;\n\t    case E_V850E_ARCH:\n\t      strcat (buf, \", v850e\");\n\t      break;\n\t    case E_V850_ARCH:\n\t      strcat (buf, \", v850\");\n\t      break;\n\t    default:\n\t      strcat (buf, _(\", unknown v850 architecture variant\"));\n\t      break;\n\t    }\n\t  break;\n\n\tcase EM_M32R:\n\tcase EM_CYGNUS_M32R:\n\t  if ((e_flags & EF_M32R_ARCH) == E_M32R_ARCH)\n\t    strcat (buf, \", m32r\");\n\t  break;\n\n\tcase EM_MIPS:\n\tcase EM_MIPS_RS3_LE:\n\t  if (e_flags & EF_MIPS_NOREORDER)\n\t    strcat (buf, \", noreorder\");\n\n\t  if (e_flags & EF_MIPS_PIC)\n\t    strcat (buf, \", pic\");\n\n\t  if (e_flags & EF_MIPS_CPIC)\n\t    strcat (buf, \", cpic\");\n\n\t  if (e_flags & EF_MIPS_UCODE)\n\t    strcat (buf, \", ugen_reserved\");\n\n\t  if (e_flags & EF_MIPS_ABI2)\n\t    strcat (buf, \", abi2\");\n\n\t  if (e_flags & EF_MIPS_OPTIONS_FIRST)\n\t    strcat (buf, \", odk first\");\n\n\t  if (e_flags & EF_MIPS_32BITMODE)\n\t    strcat (buf, \", 32bitmode\");\n\n\t  if (e_flags & EF_MIPS_NAN2008)\n\t    strcat (buf, \", nan2008\");\n\n\t  if (e_flags & EF_MIPS_FP64)\n\t    strcat (buf, \", fp64\");\n\n\t  switch ((e_flags & EF_MIPS_MACH))\n\t    {\n\t    case E_MIPS_MACH_3900: strcat (buf, \", 3900\"); break;\n\t    case E_MIPS_MACH_4010: strcat (buf, \", 4010\"); break;\n\t    case E_MIPS_MACH_4100: strcat (buf, \", 4100\"); break;\n\t    case E_MIPS_MACH_4111: strcat (buf, \", 4111\"); break;\n\t    case E_MIPS_MACH_4120: strcat (buf, \", 4120\"); break;\n\t    case E_MIPS_MACH_4650: strcat (buf, \", 4650\"); break;\n\t    case E_MIPS_MACH_5400: strcat (buf, \", 5400\"); break;\n\t    case E_MIPS_MACH_5500: strcat (buf, \", 5500\"); break;\n\t    case E_MIPS_MACH_SB1:  strcat (buf, \", sb1\");  break;\n\t    case E_MIPS_MACH_9000: strcat (buf, \", 9000\"); break;\n  \t    case E_MIPS_MACH_LS2E: strcat (buf, \", loongson-2e\"); break;\n  \t    case E_MIPS_MACH_LS2F: strcat (buf, \", loongson-2f\"); break;\n  \t    case E_MIPS_MACH_LS3A: strcat (buf, \", loongson-3a\"); break;\n\t    case E_MIPS_MACH_OCTEON: strcat (buf, \", octeon\"); break;\n\t    case E_MIPS_MACH_OCTEON2: strcat (buf, \", octeon2\"); break;\n\t    case E_MIPS_MACH_OCTEON3: strcat (buf, \", octeon3\"); break;\n\t    case E_MIPS_MACH_XLR:  strcat (buf, \", xlr\"); break;\n\t    case 0:\n\t    /* We simply ignore the field in this case to avoid confusion:\n\t       MIPS ELF does not specify EF_MIPS_MACH, it is a GNU\n\t       extension.  */\n\t      break;\n\t    default: strcat (buf, _(\", unknown CPU\")); break;\n\t    }\n\n\t  switch ((e_flags & EF_MIPS_ABI))\n\t    {\n\t    case E_MIPS_ABI_O32: strcat (buf, \", o32\"); break;\n\t    case E_MIPS_ABI_O64: strcat (buf, \", o64\"); break;\n\t    case E_MIPS_ABI_EABI32: strcat (buf, \", eabi32\"); break;\n\t    case E_MIPS_ABI_EABI64: strcat (buf, \", eabi64\"); break;\n\t    case 0:\n\t    /* We simply ignore the field in this case to avoid confusion:\n\t       MIPS ELF does not specify EF_MIPS_ABI, it is a GNU extension.\n\t       This means it is likely to be an o32 file, but not for\n\t       sure.  */\n\t      break;\n\t    default: strcat (buf, _(\", unknown ABI\")); break;\n\t    }\n\n\t  if (e_flags & EF_MIPS_ARCH_ASE_MDMX)\n\t    strcat (buf, \", mdmx\");\n\n\t  if (e_flags & EF_MIPS_ARCH_ASE_M16)\n\t    strcat (buf, \", mips16\");\n\n\t  if (e_flags & EF_MIPS_ARCH_ASE_MICROMIPS)\n\t    strcat (buf, \", micromips\");\n\n\t  switch ((e_flags & EF_MIPS_ARCH))\n\t    {\n\t    case E_MIPS_ARCH_1: strcat (buf, \", mips1\"); break;\n\t    case E_MIPS_ARCH_2: strcat (buf, \", mips2\"); break;\n\t    case E_MIPS_ARCH_3: strcat (buf, \", mips3\"); break;\n\t    case E_MIPS_ARCH_4: strcat (buf, \", mips4\"); break;\n\t    case E_MIPS_ARCH_5: strcat (buf, \", mips5\"); break;\n\t    case E_MIPS_ARCH_32: strcat (buf, \", mips32\"); break;\n\t    case E_MIPS_ARCH_32R2: strcat (buf, \", mips32r2\"); break;\n\t    case E_MIPS_ARCH_32R6: strcat (buf, \", mips32r6\"); break;\n\t    case E_MIPS_ARCH_64: strcat (buf, \", mips64\"); break;\n\t    case E_MIPS_ARCH_64R2: strcat (buf, \", mips64r2\"); break;\n\t    case E_MIPS_ARCH_64R6: strcat (buf, \", mips64r6\"); break;\n\t    default: strcat (buf, _(\", unknown ISA\")); break;\n\t    }\n\t  break;\n\n\tcase EM_NDS32:\n\t  decode_NDS32_machine_flags (e_flags, buf, sizeof buf);\n\t  break;\n\n\tcase EM_SH:\n\t  switch ((e_flags & EF_SH_MACH_MASK))\n\t    {\n\t    case EF_SH1: strcat (buf, \", sh1\"); break;\n\t    case EF_SH2: strcat (buf, \", sh2\"); break;\n\t    case EF_SH3: strcat (buf, \", sh3\"); break;\n\t    case EF_SH_DSP: strcat (buf, \", sh-dsp\"); break;\n\t    case EF_SH3_DSP: strcat (buf, \", sh3-dsp\"); break;\n\t    case EF_SH4AL_DSP: strcat (buf, \", sh4al-dsp\"); break;\n\t    case EF_SH3E: strcat (buf, \", sh3e\"); break;\n\t    case EF_SH4: strcat (buf, \", sh4\"); break;\n\t    case EF_SH5: strcat (buf, \", sh5\"); break;\n\t    case EF_SH2E: strcat (buf, \", sh2e\"); break;\n\t    case EF_SH4A: strcat (buf, \", sh4a\"); break;\n\t    case EF_SH2A: strcat (buf, \", sh2a\"); break;\n\t    case EF_SH4_NOFPU: strcat (buf, \", sh4-nofpu\"); break;\n\t    case EF_SH4A_NOFPU: strcat (buf, \", sh4a-nofpu\"); break;\n\t    case EF_SH2A_NOFPU: strcat (buf, \", sh2a-nofpu\"); break;\n\t    case EF_SH3_NOMMU: strcat (buf, \", sh3-nommu\"); break;\n\t    case EF_SH4_NOMMU_NOFPU: strcat (buf, \", sh4-nommu-nofpu\"); break;\n\t    case EF_SH2A_SH4_NOFPU: strcat (buf, \", sh2a-nofpu-or-sh4-nommu-nofpu\"); break;\n\t    case EF_SH2A_SH3_NOFPU: strcat (buf, \", sh2a-nofpu-or-sh3-nommu\"); break;\n\t    case EF_SH2A_SH4: strcat (buf, \", sh2a-or-sh4\"); break;\n\t    case EF_SH2A_SH3E: strcat (buf, \", sh2a-or-sh3e\"); break;\n\t    default: strcat (buf, _(\", unknown ISA\")); break;\n\t    }\n\n\t  if (e_flags & EF_SH_PIC)\n\t    strcat (buf, \", pic\");\n\n\t  if (e_flags & EF_SH_FDPIC)\n\t    strcat (buf, \", fdpic\");\n\t  break;\n\n        case EM_OR1K:\n          if (e_flags & EF_OR1K_NODELAY)\n            strcat (buf, \", no delay\");\n          break;\n\n\tcase EM_SPARCV9:\n\t  if (e_flags & EF_SPARC_32PLUS)\n\t    strcat (buf, \", v8+\");\n\n\t  if (e_flags & EF_SPARC_SUN_US1)\n\t    strcat (buf, \", ultrasparcI\");\n\n\t  if (e_flags & EF_SPARC_SUN_US3)\n\t    strcat (buf, \", ultrasparcIII\");\n\n\t  if (e_flags & EF_SPARC_HAL_R1)\n\t    strcat (buf, \", halr1\");\n\n\t  if (e_flags & EF_SPARC_LEDATA)\n\t    strcat (buf, \", ledata\");\n\n\t  if ((e_flags & EF_SPARCV9_MM) == EF_SPARCV9_TSO)\n\t    strcat (buf, \", tso\");\n\n\t  if ((e_flags & EF_SPARCV9_MM) == EF_SPARCV9_PSO)\n\t    strcat (buf, \", pso\");\n\n\t  if ((e_flags & EF_SPARCV9_MM) == EF_SPARCV9_RMO)\n\t    strcat (buf, \", rmo\");\n\t  break;\n\n\tcase EM_PARISC:\n\t  switch (e_flags & EF_PARISC_ARCH)\n\t    {\n\t    case EFA_PARISC_1_0:\n\t      strcpy (buf, \", PA-RISC 1.0\");\n\t      break;\n\t    case EFA_PARISC_1_1:\n\t      strcpy (buf, \", PA-RISC 1.1\");\n\t      break;\n\t    case EFA_PARISC_2_0:\n\t      strcpy (buf, \", PA-RISC 2.0\");\n\t      break;\n\t    default:\n\t      break;\n\t    }\n\t  if (e_flags & EF_PARISC_TRAPNIL)\n\t    strcat (buf, \", trapnil\");\n\t  if (e_flags & EF_PARISC_EXT)\n\t    strcat (buf, \", ext\");\n\t  if (e_flags & EF_PARISC_LSB)\n\t    strcat (buf, \", lsb\");\n\t  if (e_flags & EF_PARISC_WIDE)\n\t    strcat (buf, \", wide\");\n\t  if (e_flags & EF_PARISC_NO_KABP)\n\t    strcat (buf, \", no kabp\");\n\t  if (e_flags & EF_PARISC_LAZYSWAP)\n\t    strcat (buf, \", lazyswap\");\n\t  break;\n\n\tcase EM_PJ:\n\tcase EM_PJ_OLD:\n\t  if ((e_flags & EF_PICOJAVA_NEWCALLS) == EF_PICOJAVA_NEWCALLS)\n\t    strcat (buf, \", new calling convention\");\n\n\t  if ((e_flags & EF_PICOJAVA_GNUCALLS) == EF_PICOJAVA_GNUCALLS)\n\t    strcat (buf, \", gnu calling convention\");\n\t  break;\n\n\tcase EM_IA_64:\n\t  if ((e_flags & EF_IA_64_ABI64))\n\t    strcat (buf, \", 64-bit\");\n\t  else\n\t    strcat (buf, \", 32-bit\");\n\t  if ((e_flags & EF_IA_64_REDUCEDFP))\n\t    strcat (buf, \", reduced fp model\");\n\t  if ((e_flags & EF_IA_64_NOFUNCDESC_CONS_GP))\n\t    strcat (buf, \", no function descriptors, constant gp\");\n\t  else if ((e_flags & EF_IA_64_CONS_GP))\n\t    strcat (buf, \", constant gp\");\n\t  if ((e_flags & EF_IA_64_ABSOLUTE))\n\t    strcat (buf, \", absolute\");\n          if (elf_header.e_ident[EI_OSABI] == ELFOSABI_OPENVMS)\n            {\n              if ((e_flags & EF_IA_64_VMS_LINKAGES))\n                strcat (buf, \", vms_linkages\");\n              switch ((e_flags & EF_IA_64_VMS_COMCOD))\n                {\n                case EF_IA_64_VMS_COMCOD_SUCCESS:\n                  break;\n                case EF_IA_64_VMS_COMCOD_WARNING:\n                  strcat (buf, \", warning\");\n                  break;\n                case EF_IA_64_VMS_COMCOD_ERROR:\n                  strcat (buf, \", error\");\n                  break;\n                case EF_IA_64_VMS_COMCOD_ABORT:\n                  strcat (buf, \", abort\");\n                  break;\n                default:\n\t\t  warn (_(\"Unrecognised IA64 VMS Command Code: %x\\n\"),\n\t\t\te_flags & EF_IA_64_VMS_COMCOD);\n\t\t  strcat (buf, \", <unknown>\");\n                }\n            }\n\t  break;\n\n\tcase EM_VAX:\n\t  if ((e_flags & EF_VAX_NONPIC))\n\t    strcat (buf, \", non-PIC\");\n\t  if ((e_flags & EF_VAX_DFLOAT))\n\t    strcat (buf, \", D-Float\");\n\t  if ((e_flags & EF_VAX_GFLOAT))\n\t    strcat (buf, \", G-Float\");\n\t  break;\n\n\tcase EM_RL78:\n\t  if (e_flags & E_FLAG_RL78_G10)\n\t    strcat (buf, \", G10\");\n\t  if (e_flags & E_FLAG_RL78_64BIT_DOUBLES)\n\t    strcat (buf, \", 64-bit doubles\");\n\t  break;\n\n\tcase EM_RX:\n\t  if (e_flags & E_FLAG_RX_64BIT_DOUBLES)\n\t    strcat (buf, \", 64-bit doubles\");\n\t  if (e_flags & E_FLAG_RX_DSP)\n\t    strcat (buf, \", dsp\");\n\t  if (e_flags & E_FLAG_RX_PID)\n\t    strcat (buf, \", pid\");\n\t  if (e_flags & E_FLAG_RX_ABI)\n\t    strcat (buf, \", RX ABI\");\n\t  break;\n\n\tcase EM_S390:\n\t  if (e_flags & EF_S390_HIGH_GPRS)\n\t    strcat (buf, \", highgprs\");\n\t  break;\n\n\tcase EM_TI_C6000:\n\t  if ((e_flags & EF_C6000_REL))\n\t    strcat (buf, \", relocatable module\");\n\t  break;\n\n\tcase EM_MSP430:\n\t  strcat (buf, _(\": architecture variant: \"));\n\t  switch (e_flags & EF_MSP430_MACH)\n\t    {\n\t    case E_MSP430_MACH_MSP430x11: strcat (buf, \"MSP430x11\"); break;\n\t    case E_MSP430_MACH_MSP430x11x1 : strcat (buf, \"MSP430x11x1 \"); break;\n\t    case E_MSP430_MACH_MSP430x12: strcat (buf, \"MSP430x12\"); break;\n\t    case E_MSP430_MACH_MSP430x13: strcat (buf, \"MSP430x13\"); break;\n\t    case E_MSP430_MACH_MSP430x14: strcat (buf, \"MSP430x14\"); break;\n\t    case E_MSP430_MACH_MSP430x15: strcat (buf, \"MSP430x15\"); break;\n\t    case E_MSP430_MACH_MSP430x16: strcat (buf, \"MSP430x16\"); break;\n\t    case E_MSP430_MACH_MSP430x31: strcat (buf, \"MSP430x31\"); break;\n\t    case E_MSP430_MACH_MSP430x32: strcat (buf, \"MSP430x32\"); break;\n\t    case E_MSP430_MACH_MSP430x33: strcat (buf, \"MSP430x33\"); break;\n\t    case E_MSP430_MACH_MSP430x41: strcat (buf, \"MSP430x41\"); break;\n\t    case E_MSP430_MACH_MSP430x42: strcat (buf, \"MSP430x42\"); break;\n\t    case E_MSP430_MACH_MSP430x43: strcat (buf, \"MSP430x43\"); break;\n\t    case E_MSP430_MACH_MSP430x44: strcat (buf, \"MSP430x44\"); break;\n\t    case E_MSP430_MACH_MSP430X  : strcat (buf, \"MSP430X\"); break;\n\t    default:\n\t      strcat (buf, _(\": unknown\")); break;\n\t    }\n\n\t  if (e_flags & ~ EF_MSP430_MACH)\n\t    strcat (buf, _(\": unknown extra flag bits also present\"));\n\t}\n    }\n\n  return buf;\n}"
}