{
    "Project": "gawk",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "profile.c",
    "message": "Offset: [1, +oo] Size: [0, +oo] by call to `pp_list`.",
    "warning_function_name": "pprint",
    "warning_line": "tmp = pp_list(pc->expr_count, op2str(Op_subscript), \", \"); /*subscript*/",
    "warning_context": "\n\t\t\t\t\tfprintf(prof_fp, \"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfprintf(prof_fp, \"{\\n\");\n\t\t\t\t\tip = (pc + 1)->firsti;\n\t\t\t\t}\n\t\t\t\tip = ip->nexti;\n\t\t\t}\n\t\t\tindent_in();\n\t\t\tpprint(ip, (pc + 1)->lasti, false);\n\t\t\tindent_out();\n\t\t\tfprintf(prof_fp, \"\\t}\\n\\n\");\n\t\t\tpc = (pc + 1)->lasti;\n\t\t\tbreak;\n\n\t\tcase Op_atexit:\n\t\t\tbreak;\n\n\t\tcase Op_stop:\n\t\t\tmemset(rule_count, 0, MAXRULE * sizeof(int));\n\t\t\tbreak;\n\n\t\tcase Op_push_i:\n\t\t\tm = pc->memory;\n\t\t\tif (m == Nnull_string)\t/* optional return or exit value; don't print 0 or \"\" */\n\t\t\t\tpp_push(pc->opcode, m->stptr, DONT_FREE);\n\t\t\telse if ((m->flags & NUMBER) != 0)\n\t\t\t\tpp_push(pc->opcode, pp_number(m), CAN_FREE);\n\t\t\telse {\n\t\t\t\tstr = pp_string(m->stptr, m->stlen, '\"');\n\t\t\t\tif ((m->flags & INTLSTR) != 0) {\n\t\t\t\t\tchar *tmp = str;\n\t\t\t\t\tstr = pp_group3(\"_\", tmp, \"\");\n\t\t\t\t\tefree(tmp);\n\t\t\t\t}\n\t\t\t\tpp_push(pc->opcode, str, CAN_FREE);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase Op_store_var:\n\t\t\tif (pc->initval != NULL)\n\t\t\t\tpp_push(Op_push_i, pp_node(pc->initval), CAN_FREE);\n\t\t\t/* fall through */\n\t\tcase Op_store_sub:\n\t\tcase Op_assign_concat:\n\t\tcase Op_push_lhs:\n\t\tcase Op_push_param:\n\t\tcase Op_push_array:\n\t\tcase Op_push:\n\t\tcase Op_push_arg:\n\t\t\tm = pc->memory;\n\t\t\tswitch (m->type) {\n\t\t\tcase Node_param_list:\n\t\t\t\tpp_push(pc->opcode, func_params[m->param_cnt].param, DONT_FREE);\n\t\t\t\tbreak;\n\n\t\t\tcase Node_var:\n\t\t\tcase Node_var_new:\n\t\t\tcase Node_var_array:\n\t\t\t\tif (m->vname != NULL)\n\t\t\t\t\tpp_push(pc->opcode, m->vname, DONT_FREE);\n \t\t\t\telse\n\t\t\t\t\tfatal(_(\"internal error: %s with null vname\"),\n\t\t\t\t\t\t\tnodetype2str(m->type));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tcant_happen();\n\t\t\t}\n\n\t\t\tswitch (pc->opcode) {\t\t\n\t\t\tcase Op_store_var:\n\t\t\t\tt2 = pp_pop(); /* l.h.s. */\n\t\t\t\tt1 = pp_pop(); /* r.h.s. */\n\t\t\t\tfprintf(prof_fp, \"%s%s%s\", t2->pp_str, op2str(pc->opcode), t1->pp_str);\n\t\t\t\tgoto cleanup;\n\n\t\t\tcase Op_store_sub:\n\t\t\t\tt1 = pp_pop();\t/* array */\n\t\t\t\ttmp = pp_list(pc->expr_count, op2str(Op_subscript), \", \"); /*subscript*/\n\t\t\t\tt2 = pp_pop(); /* r.h.s. */\n\t\t\t\tfprintf(prof_fp, \"%s%s%s%s\", t1->pp_str, tmp,\n\t\t\t\t\t\t\t\t\top2str(pc->opcode), t2->pp_str);\n\t\t\t\tefree(tmp);\n\t\t\t\tgoto cleanup;\n\n\t\t\tcase Op_assign_concat:\n\t\t\t\tt2 = pp_pop(); /* l.h.s. */\n\t\t\t\tt1 = pp_pop();\n\t\t\t\ttmp = pp_group3(t2->pp_str, op2str(Op_concat), t1->pp_str);\n\t\t\t\tfprintf(prof_fp, \"%s%s%s\", t2->pp_str, op2str(Op_assign), tmp);\n\t\t\t\tefree(tmp);\ncleanup:\n\t\t\t\tpp_free(t2);\n\t\t\t\tpp_free(t1);\n\t\t\t\tif (! in_for_header)\n\t\t\t\t\tfprintf(prof_fp, \"\\n\");\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n"
}