{
    "project": "trueprint",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/output.c",
    "message": "The value read from output_line_end was never initialized.",
    "warning_function_name": "line_end",
    "warning_line": "if (output_line_end >= input_line_length)",
    "warning_context": "int\nline_end(char *input_line, int last_char_printed)\n\n{\n  int\tinput_line_length;\n  boolean\tgot_end=FALSE;\n  short\tbreak_index;\n  int\toutput_line_end;\n\n  input_line_length = (int)strlen(input_line);\n  dm('O',4,\"output.c:line_end() line length is %d\\n\",input_line_length);\n\n  if (page_width == 0)\n    {\n      /*\n       * The line doesn't need to be broken\n       */\n      output_line_end = input_line_length - 1;\n      return(output_line_end);\n    }\n\n  if ((input_line_length - last_char_printed) > page_width)\n    {\n      if (no_clever_wrap == TRUE) \n\t{\n\t  /*\n\t   * Don't need to do anything clever - just return the\n\t   * point in the string which is \"page_width\" plus\n\t   * the last point printed.\n\t   */\n\t  return (last_char_printed + page_width);\n\t}\n\t\t \n      /*\n       * the line needs to be broken.  there is an array, breaks,\n       * containing valid symbols that a line can be broken on.\n       * what now needs to be done is to work through the array,\n       * starting with the most desirable break character, until\n       * one of the break characters is found in the line and then\n       * the line can be broken there.\n       */\n    \n      for (break_index=0; break_index < BREAKSLENGTH; break_index++)\n\t{\n\t  for (output_line_end = last_char_printed + page_width;\n\t       output_line_end > last_char_printed + min_line_length;\n\t       output_line_end--)\n\t    if (input_line[output_line_end] == BREAKS[break_index])\n\t      {\n\t\tgot_end=TRUE;\n\t\tbreak;\n\t      }\n\t  if (got_end == TRUE) break;\n\t}\n      if (got_end == FALSE)\n\toutput_line_end = last_char_printed+page_width;\n\n      if (output_line_end >= input_line_length)\n\toutput_line_end = input_line_length;\n    }\n  else\n    /* the line doesn't need to be broken at all. */\n    output_line_end = input_line_length - 1;\n\n  return(output_line_end);\n}\n"
}