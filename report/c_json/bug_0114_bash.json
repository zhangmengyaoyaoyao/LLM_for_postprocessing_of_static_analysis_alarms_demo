{
    "project": "bash",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "lib/sh/casemod.c",
    "message": "The value read from state_bak.__count was never initialized.",
    "warning_function_name": "sh_modcase",
    "warning_line": "ADVANCE_CHAR (ret, end, next);",
    "warning_context": "char *\nsh_modcase (string, pat, flags)\n     const char *string;\n     char *pat;\n     int flags;\n{\n  int start, next, end;\n  int inword, c, nc, nop, match, usewords;\n  char *ret, *s;\n  wchar_t wc;\n#if defined (HANDLE_MULTIBYTE)\n  wchar_t nwc;\n  char mb[MB_LEN_MAX+1];\n  int mlen;\n  size_t m;\n  mbstate_t state;\n#endif\n\n  if (string == 0 || *string == 0)\n    {\n      ret = (char *)xmalloc (1);\n      ret[0] = '\\0';\n      return ret;\n    }\n\n#if defined (HANDLE_MULTIBYTE)\n  memset (&state, 0, sizeof (mbstate_t));\n#endif\n\n  start = 0;\n  end = strlen (string);\n\n  ret = (char *)xmalloc (end + 1);\n  strcpy (ret, string);\n\n  /* See if we are supposed to split on alphanumerics and operate on each word */\n  usewords = (flags & CASE_USEWORDS);\n  flags &= ~CASE_USEWORDS;\n\n  inword = 0;\n  while (start < end)\n    {\n      wc = cval (ret, start);\n\n      if (iswalnum (wc) == 0)\n\t{\n\t  inword = 0;\n#if 0\n\t  ADVANCE_CHAR (ret, end, start);\n\t  continue;\n#endif\n\t}\n\n      if (pat)\n\t{\n\t  next = start;\n\t  ADVANCE_CHAR (ret, end, next);\n\t  s = substring (ret, start, next);\n\t  match = strmatch (pat, s, FNM_EXTMATCH) != FNM_NOMATCH;\n\t  free (s);\n\t  if (match == 0)\n            {\n              start = next;\n              inword = 1;\n              continue;\n            }\n\t}\n\n      /* XXX - for now, the toggling operators work on the individual\n\t words in the string, breaking on alphanumerics.  Should I\n\t leave the capitalization operators to do that also? */\n      if (flags == CASE_CAPITALIZE)\n\t{\n\t  if (usewords)\n\t    nop = inword ? CASE_LOWER : CASE_UPPER;\n\t  else\n\t    nop = (start > 0) ? CASE_LOWER : CASE_UPPER;\n\t  inword = 1;\n\t}\n      else if (flags == CASE_UNCAP)\n\t{\n\t  if (usewords)\n\t    nop = inword ? CASE_UPPER : CASE_LOWER;\n\t  else\n\t    nop = (start > 0) ? CASE_UPPER : CASE_LOWER;\n\t  inword = 1;\n\t}\n      else if (flags == CASE_UPFIRST)\n \t{\n \t  if (usewords)\n\t    nop = inword ? CASE_NOOP : CASE_UPPER;\n\t  else\n\t    nop = (start > 0) ? CASE_NOOP : CASE_UPPER;\n \t  inword = 1;\n \t}\n      else if (flags == CASE_LOWFIRST)\n \t{\n \t  if (usewords)\n\t    nop = inword ? CASE_NOOP : CASE_LOWER;\n\t  else\n\t    nop = (start > 0) ? CASE_NOOP : CASE_LOWER;\n"
}