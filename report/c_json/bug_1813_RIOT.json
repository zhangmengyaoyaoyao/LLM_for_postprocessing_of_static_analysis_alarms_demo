{
    "Project": "RIOT",
    "Tool": "Infer",
    "Bug Type": "Uninitialized Value",
    "Message": "The value read from tmp was never initialized.",
    "Code_line": "                                                       dummy_addr));",
    "Code_function": "static void _test_options(gnrc_netif_t *netif)\n{\n    uint8_t dummy_addr[GNRC_NETIF_L2ADDR_MAXLEN] = { 0 };\n    ndp_opt_t dummy_opt = { .len = 1U };\n    uint64_t tmp64 = 0ULL;\n\n    (void)dummy_addr;\n    (void)dummy_opt;\n    (void)tmp64;\n#if (GNRC_NETIF_L2ADDR_MAXLEN > 0)\n    /* check if address was set in _update_l2addr_from_dev()\n     * (NETOPT_DEVICE_TYPE already tested in _configure_netdev()) and\n     * if MTU and max. fragment size was set properly by\n     * gnrc_netif_ipv6_init_mtu()\n     * all checked types below have link-layer addresses so we don't need to\n     * check `GNRC_NETIF_FLAGS_HAS_L2ADDR` */\n    switch (netif->device_type) {\n#ifdef TEST_SUITES\n        case NETDEV_TYPE_TEST:\n            /* make no assumptions about test devices */\n            break;\n#endif\n        case NETDEV_TYPE_BLE:\n        case NETDEV_TYPE_ETHERNET:\n        case NETDEV_TYPE_ESP_NOW:\n            assert(netif->flags & GNRC_NETIF_FLAGS_HAS_L2ADDR);\n            assert(ETHERNET_ADDR_LEN == netif->l2addr_len);\n#if IS_USED(MODULE_GNRC_NETIF_IPV6)\n            switch (netif->device_type) {\n                case NETDEV_TYPE_BLE:\n                    assert(netif->ipv6.mtu == IPV6_MIN_MTU);\n                    break;\n                case NETDEV_TYPE_ETHERNET:\n                    assert(netif->ipv6.mtu == ETHERNET_DATA_LEN);\n                    break;\n                case NETDEV_TYPE_ESP_NOW:\n                    assert(netif->ipv6.mtu <= ETHERNET_DATA_LEN);\n            }\n#endif  /* IS_USED(MODULE GNRC_NETIF_IPV6) */\n            break;\n        case NETDEV_TYPE_IEEE802154:\n        case NETDEV_TYPE_NRFMIN: {\n            gnrc_nettype_t tmp;\n\n            /* in case assert() evaluates to NOP */\n            (void)tmp;\n            assert(netif->flags & GNRC_NETIF_FLAGS_HAS_L2ADDR);\n            assert((IEEE802154_SHORT_ADDRESS_LEN == netif->l2addr_len) ||\n                   (IEEE802154_LONG_ADDRESS_LEN == netif->l2addr_len));\n#if IS_USED(MODULE_GNRC_NETIF_IPV6)\n#if IS_USED(MODULE_GNRC_NETIF_6LO)\n#if IS_ACTIVE(CONFIG_GNRC_NETIF_NONSTANDARD_6LO_MTU)\n            assert(netif->ipv6.mtu >= IPV6_MIN_MTU);\n#else /* IS_ACTIVE(CONFIG_GNRC_NETIF_NONSTANDARD_6LO_MTU) */\n            assert(netif->ipv6.mtu == IPV6_MIN_MTU);\n#endif /* IS_ACTIVE(CONFIG_GNRC_NETIF_NONSTANDARD_6LO_MTU) */\n            assert(-ENOTSUP != netif->dev->driver->get(netif->dev, NETOPT_PROTO,\n                                                       &tmp, sizeof(tmp)));\n#else   /* IS_USED(MODULE_GNRC_NETIF_6LO) */\n            assert(netif->ipv6.mtu < UINT16_MAX);\n#endif  /* IS_USED(MODULE_GNRC_NETIF_6LO) */\n#endif  /* IS_USED(MODULE_GNRC_NETIF_IPV6) */\n#ifdef MODULE_GNRC_SIXLOWPAN_ND\n            assert((netif->device_type != NETDEV_TYPE_IEEE802154) ||\n                   (-ENOTSUP != netif->dev->driver->get(netif->dev,\n                                                        NETOPT_ADDRESS_LONG,\n                                                        &dummy_addr,\n                                                        sizeof(dummy_addr))));\n#endif  /* MODULE_GNRC_SIXLOWPAN_ND */\n            break;\n        }\n        case NETDEV_TYPE_CC110X:\n            assert(netif->flags & GNRC_NETIF_FLAGS_HAS_L2ADDR);\n            assert(1U == netif->l2addr_len);\n#if IS_USED(MODULE_GNRC_NETIF_IPV6)\n            assert(netif->ipv6.mtu < UINT16_MAX);\n#endif  /* IS_USED(MODULE_GNRC_NETIF_IPV6) */\n            break;\n        case NETDEV_TYPE_LORA: /* LoRa doesn't provide L2 ADDR */\n        case NETDEV_TYPE_SLIP:\n            assert(!(netif->flags & GNRC_NETIF_FLAGS_HAS_L2ADDR));\n            assert(0U == netif->l2addr_len);\n            /* don't check MTU here for now since I'm not sure the current\n             * one is correct ^^\" \"*/\n            break;\n        default:\n            /* device type not supported yet, please amend case above when\n             * porting new device type */\n            assert(false);\n    }\n    /* These functions only apply to network devices having link-layers */\n    if (netif->flags & GNRC_NETIF_FLAGS_HAS_L2ADDR) {\n#if IS_USED(MODULE_GNRC_NETIF_IPV6)\n        assert(-ENOTSUP != gnrc_netif_ipv6_get_iid(netif, (eui64_t *)&tmp64));\n        assert(-ENOTSUP != gnrc_netif_ndp_addr_len_from_l2ao(netif,\n                                                             &dummy_opt));\n#endif  /* IS_USED(MODULE_GNRC_NETIF_IPV6) */\n#if IS_ACTIVE(CONFIG_GNRC_IPV6_NIB_6LN)\n        assert(-ENOTSUP != gnrc_netif_ipv6_iid_to_addr(netif, (eui64_t *)&tmp64,\n                                                       dummy_addr));\n#endif  /* CONFIG_GNRC_IPV6_NIB_6LN */\n    }\n#endif /* (GNRC_NETIF_L2ADDR_MAXLEN > 0) */\n    options_tested = true;\n}"
}