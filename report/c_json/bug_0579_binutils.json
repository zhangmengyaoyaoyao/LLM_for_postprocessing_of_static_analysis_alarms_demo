{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "gas/app.c",
    "message": "The value read from fromlen was never initialized.",
    "warning_function_name": "process_escape",
    "warning_line": "ch = GET ();",
    "warning_context": "\t    case 'f':\n\t    case 'n':\n\t    case 'r':\n\t    case 't':\n\t    case 'v':\n\t    case 'x':\n\t    case 'X':\n\t    case '0':\n\t    case '1':\n\t    case '2':\n\t    case '3':\n\t    case '4':\n\t    case '5':\n\t    case '6':\n\t    case '7':\n\t      break;\n\n\t    default:\n#ifdef ONLY_STANDARD_ESCAPES\n\t      as_warn (_(\"unknown escape '\\\\%c' in string; ignored\"), ch);\n#endif\n\t      break;\n\t    }\n\t  PUT (ch);\n\t  continue;\n\n#ifdef DOUBLEBAR_PARALLEL\n\tcase 13:\n\t  ch = GET ();\n\t  if (ch != '|')\n\t    abort ();\n\n\t  /* Reset back to state 1 and pretend that we are parsing a\n\t     line from just after the first white space.  */\n\t  state = 1;\n\t  PUT ('|');\n#ifdef TC_TIC6X\n\t  /* \"||^\" is used for SPMASKed instructions.  */\n\t  ch = GET ();\n\t  if (ch == EOF)\n\t    goto fromeof;\n\t  else if (ch == '^')\n\t    PUT ('^');\n\t  else\n\t    UNGET (ch);\n#endif\n\t  continue;\n#endif\n#ifdef TC_Z80\n\tcase 16:\n\t  /* We have seen an 'a' at the start of a symbol, look for an 'f'.  */\n\t  ch = GET ();\n\t  if (ch == 'f' || ch == 'F')\n\t    {\n\t      state = 17;\n\t      PUT (ch);\n\t    }\n\t  else\n\t    {\n\t      state = 9;\n\t      break;\n\t    }\n\tcase 17:\n\t  /* We have seen \"af\" at the start of a symbol,\n\t     a ' here is a part of that symbol.  */\n\t  ch = GET ();\n\t  state = 9;\n\t  if (ch == '\\'')\n\t    /* Change to avoid warning about unclosed string.  */\n\t    PUT ('`');\n\t  else if (ch != EOF)\n\t    UNGET (ch);\n\t  break;\n#endif\n\t}\n\n      /* OK, we are somewhere in states 0 through 4 or 9 through 11.  */\n\n      /* flushchar: */\n      ch = GET ();\n\n#ifdef TC_PREDICATE_START_CHAR\n      if (ch == TC_PREDICATE_START_CHAR && (state == 0 || state == 1))\n\t{\n\t  state += 14;\n\t  PUT (ch);\n\t  continue;\n\t}\n      else if (state == 14 || state == 15)\n\t{\n\t  if (ch == TC_PREDICATE_END_CHAR)\n\t    {\n\t      state -= 14;\n\t      PUT (ch);\n\t      ch = GET ();\n\t    }\n\t  else\n\t    {\n\t      PUT (ch);\n\t      continue;\n\t    }\n"
}