{
    "Project": "gawk",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "interpret.h",
    "message": "Offset: 9 Size: [0, 11] by call to `make_str_node`.",
    "warning_function_name": "r_interpret",
    "warning_line": "sorted_in = make_string(\"sorted_in\", 9);",
    "warning_context": "\t\t\t\t/* getline returned EOF or error */\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (op == Op_var_assign)\n\t\t\t\tpc->assign_var();\n\t\t\telse\n\t\t\t\tpc->field_assign();\n\t\t\tbreak;\n\n\t\tcase Op_concat:\n\t\t\tr = concat_exp(pc->expr_count, pc->concat_flag & CSUBSEP);\n\t\t\tPUSH(r);\n\t\t\tbreak;\n\n\t\tcase Op_K_case:\n\t\t\tif ((pc + 1)->match_exp) {\n\t\t\t\t/* match a constant regex against switch expression instead of $0. */\n\n\t\t\t\tm = POP();\t/* regex */\n\t\t\t\tt2 = TOP_SCALAR();\t/* switch expression */\n\t\t\t\tt2 = force_string(t2);\n\t\t\t\trp = re_update(m);\n\t\t\t\tdi = (research(rp, t2->stptr, 0, t2->stlen,\n\t\t\t\t\t\t\tavoid_dfa(m, t2->stptr, t2->stlen)) >= 0);\n\t\t\t} else {\n\t\t\t\tt1 = POP_SCALAR();\t/* case value */\n\t\t\t\tt2 = TOP_SCALAR();\t/* switch expression */\n\t\t\t\tdi = (cmp_nodes(t2, t1) == 0);\n\t\t\t\tDEREF(t1);\n\t\t\t}\n\n\t\t\tif (di) {\n\t\t\t\t/* match found */\n\t\t\t\tt2 = POP_SCALAR();\n\t\t\t\tDEREF(t2);\n\t\t\t\tJUMPTO(pc->target_jmp);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase Op_K_delete:\n\t\t\tt1 = POP_ARRAY();\n\t\t\tdo_delete(t1, pc->expr_count);\n\t\t\tstack_adj(-pc->expr_count);\n\t\t\tbreak;\n\n\t\tcase Op_K_delete_loop:\n\t\t\tt1 = POP_ARRAY();\n\t\t\tlhs = POP_ADDRESS();\t/* item */\n\t\t\tdo_delete_loop(t1, lhs);\n\t\t\tbreak;\n\n\t\tcase Op_in_array:\n\t\t\tt1 = POP_ARRAY();\n\t\t\tt2 = mk_sub(pc->expr_count);\n\t\t\tr = node_Boolean[(in_array(t1, t2) != NULL)];\n\t\t\tDEREF(t2);\n\t\t\tUPREF(r);\n\t\t\tPUSH(r);\n\t\t\tbreak;\n\n\t\tcase Op_arrayfor_init:\n\t\t{\n\t\t\tNODE **list = NULL;\n\t\t\tNODE *array, *sort_str;\n\t\t\tsize_t num_elems = 0;\n\t\t\tstatic NODE *sorted_in = NULL;\n\t\t\tconst char *how_to_sort = \"@unsorted\";\n\n\t\t\t/* get the array */\n\t\t\tarray = POP_ARRAY();\n\n\t\t\t/* sanity: check if empty */\n\t\t\tnum_elems = assoc_length(array);\n\t\t\tif (num_elems == 0)\n\t\t\t\tgoto arrayfor;\n\n\t\t\tif (sorted_in == NULL)\t\t/* do this once */\n\t\t\t\tsorted_in = make_string(\"sorted_in\", 9);\n\n\t\t\tsort_str = NULL;\n\t\t\t/*\n\t\t\t * If posix, or if there's no PROCINFO[],\n\t\t\t * there's no [\"sorted_in\"], so no sorting\n\t\t\t */\n\t\t\tif (! do_posix && PROCINFO_node != NULL)\n\t\t\t\tsort_str = in_array(PROCINFO_node, sorted_in);\n\n\t\t\tif (sort_str != NULL) {\n\t\t\t\tsort_str = force_string(sort_str);\n\t\t\t\tif (sort_str->stlen > 0)\n\t\t\t\t\thow_to_sort = sort_str->stptr;\n\t\t\t}\n\n\t\t\tlist = assoc_list(array, how_to_sort, SORTED_IN);\n\narrayfor:\n\t\t\tgetnode(r);\n\t\t\tr->type = Node_arrayfor;\n\t\t\tr->for_list = list;\n"
}