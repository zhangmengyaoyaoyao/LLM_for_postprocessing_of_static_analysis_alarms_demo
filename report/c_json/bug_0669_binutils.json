{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "libiberty/cplus-dem.c",
    "message": "Offset added: [1, 9] Size: 2.",
    "warning_function_name": "ada_demangle",
    "warning_line": "memcpy (d, operators[k][1], slen);",
    "warning_context": "char *\nada_demangle (const char *mangled, int option ATTRIBUTE_UNUSED)\n{\n  int len0;\n  const char* p;\n  char *d;\n  char *demangled;\n  \n  /* Discard leading _ada_, which is used for library level subprograms.  */\n  if (strncmp (mangled, \"_ada_\", 5) == 0)\n    mangled += 5;\n\n  /* All ada unit names are lower-case.  */\n  if (!ISLOWER (mangled[0]))\n    goto unknown;\n\n  /* Most of the demangling will trivially remove chars.  Operator names\n     may add one char but because they are always preceeded by '__' which is\n     replaced by '.', they eventually never expand the size.\n     A few special names such as '___elabs' add a few chars (at most 7), but\n     they occur only once.  */\n  len0 = strlen (mangled) + 7 + 1;\n  demangled = XNEWVEC (char, len0);\n  \n  d = demangled;\n  p = mangled;\n  while (1)\n    {\n      /* An entity names is expected.  */\n      if (ISLOWER (*p))\n        {\n          /* An identifier, which is always lower case.  */\n          do\n            *d++ = *p++;\n          while (ISLOWER(*p) || ISDIGIT (*p)\n                 || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));\n        }\n      else if (p[0] == 'O')\n        {\n          /* An operator name.  */\n          static const char * const operators[][2] =\n            {{\"Oabs\", \"abs\"},  {\"Oand\", \"and\"},    {\"Omod\", \"mod\"},\n             {\"Onot\", \"not\"},  {\"Oor\", \"or\"},      {\"Orem\", \"rem\"},\n             {\"Oxor\", \"xor\"},  {\"Oeq\", \"=\"},       {\"One\", \"/=\"},\n             {\"Olt\", \"<\"},     {\"Ole\", \"<=\"},      {\"Ogt\", \">\"},\n             {\"Oge\", \">=\"},    {\"Oadd\", \"+\"},      {\"Osubtract\", \"-\"},\n             {\"Oconcat\", \"&\"}, {\"Omultiply\", \"*\"}, {\"Odivide\", \"/\"},\n             {\"Oexpon\", \"**\"}, {NULL, NULL}};\n          int k;\n\n          for (k = 0; operators[k][0] != NULL; k++)\n            {\n              size_t slen = strlen (operators[k][0]);\n              if (strncmp (p, operators[k][0], slen) == 0)\n                {\n                  p += slen;\n                  slen = strlen (operators[k][1]);\n                  *d++ = '\"';\n                  memcpy (d, operators[k][1], slen);\n                  d += slen;\n                  *d++ = '\"';\n                  break;\n                }\n            }\n          /* Operator not found.  */\n          if (operators[k][0] == NULL)\n            goto unknown;\n        }\n      else\n        {\n          /* Not a GNAT encoding.  */\n          goto unknown;\n        }\n\n      /* The name can be directly followed by some uppercase letters.  */\n      if (p[0] == 'T' && p[1] == 'K')\n        {\n          /* Task stuff.  */\n          if (p[2] == 'B' && p[3] == 0)\n            {\n              /* Subprogram for task body.  */\n              break;\n            }\n          else if (p[2] == '_' && p[3] == '_')\n            {\n              /* Inner declarations in a task.  */\n              p += 4;\n              *d++ = '.';\n              continue;\n            }\n          else\n            goto unknown;\n        }\n      if (p[0] == 'E' && p[1] == 0)\n        {\n          /* Exception name.  */\n          goto unknown;\n        }\n      if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)\n        {\n          /* Protected type subprogram.  */\n"
}