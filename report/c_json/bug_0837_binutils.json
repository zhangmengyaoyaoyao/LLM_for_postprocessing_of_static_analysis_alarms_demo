{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/elflink.c",
    "message": "Offset: [1, 32789] (⇐ [0, 23] + [1, 32766]) Size: [528, +oo].",
    "warning_function_name": "elf_link_add_object_symbols",
    "warning_line": "elf_tdata (abfd)->verdef[vernum - 1].vd_nodename;",
    "warning_context": "\t}\n      else if (bed->elf_add_symbol_hook)\n\t{\n\t  if (! (*bed->elf_add_symbol_hook) (abfd, info, isym, &name, &flags,\n\t\t\t\t\t     &sec, &value))\n\t    goto error_free_vers;\n\n\t  /* The hook function sets the name to NULL if this symbol\n\t     should be skipped for some reason.  */\n\t  if (name == NULL)\n\t    continue;\n\t}\n\n      /* Sanity check that all possibilities were handled.  */\n      if (sec == NULL)\n\t{\n\t  bfd_set_error (bfd_error_bad_value);\n\t  goto error_free_vers;\n\t}\n\n      /* Silently discard TLS symbols from --just-syms.  There's\n\t no way to combine a static TLS block with a new TLS block\n\t for this executable.  */\n      if (ELF_ST_TYPE (isym->st_info) == STT_TLS\n\t  && sec->sec_info_type == SEC_INFO_TYPE_JUST_SYMS)\n\tcontinue;\n\n      if (bfd_is_und_section (sec)\n\t  || bfd_is_com_section (sec))\n\tdefinition = FALSE;\n      else\n\tdefinition = TRUE;\n\n      size_change_ok = FALSE;\n      type_change_ok = bed->type_change_ok;\n      old_weak = FALSE;\n      old_alignment = 0;\n      old_bfd = NULL;\n      new_sec = sec;\n\n      if (is_elf_hash_table (htab))\n\t{\n\t  Elf_Internal_Versym iver;\n\t  unsigned int vernum = 0;\n\t  bfd_boolean skip;\n\n\t  if (ever == NULL)\n\t    {\n\t      if (info->default_imported_symver)\n\t\t/* Use the default symbol version created earlier.  */\n\t\tiver.vs_vers = elf_tdata (abfd)->cverdefs;\n\t      else\n\t\tiver.vs_vers = 0;\n\t    }\n\t  else\n\t    _bfd_elf_swap_versym_in (abfd, ever, &iver);\n\n\t  vernum = iver.vs_vers & VERSYM_VERSION;\n\n\t  /* If this is a hidden symbol, or if it is not version\n\t     1, we append the version name to the symbol name.\n\t     However, we do not modify a non-hidden absolute symbol\n\t     if it is not a function, because it might be the version\n\t     symbol itself.  FIXME: What if it isn't?  */\n\t  if ((iver.vs_vers & VERSYM_HIDDEN) != 0\n\t      || (vernum > 1\n\t\t  && (!bfd_is_abs_section (sec)\n\t\t      || bed->is_function_type (ELF_ST_TYPE (isym->st_info)))))\n\t    {\n\t      const char *verstr;\n\t      size_t namelen, verlen, newlen;\n\t      char *newname, *p;\n\n\t      if (isym->st_shndx != SHN_UNDEF)\n\t\t{\n\t\t  if (vernum > elf_tdata (abfd)->cverdefs)\n\t\t    verstr = NULL;\n\t\t  else if (vernum > 1)\n\t\t    verstr =\n\t\t      elf_tdata (abfd)->verdef[vernum - 1].vd_nodename;\n\t\t  else\n\t\t    verstr = \"\";\n\n\t\t  if (verstr == NULL)\n\t\t    {\n\t\t      (*_bfd_error_handler)\n\t\t\t(_(\"%B: %s: invalid version %u (max %d)\"),\n\t\t\t abfd, name, vernum,\n\t\t\t elf_tdata (abfd)->cverdefs);\n\t\t      bfd_set_error (bfd_error_bad_value);\n\t\t      goto error_free_vers;\n\t\t    }\n\t\t}\n\t      else\n\t\t{\n\t\t  /* We cannot simply test for the number of\n\t\t     entries in the VERNEED section since the\n\t\t     numbers for the needed versions do not start\n\t\t     at 0.  */\n\t\t  Elf_Internal_Verneed *t;\n\n"
}