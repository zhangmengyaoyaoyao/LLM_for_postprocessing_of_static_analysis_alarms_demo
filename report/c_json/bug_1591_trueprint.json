{
    "project": "trueprint",
    "tool": "Infer",
    "category": "NULL_DEREFERENCE",
    "file": "src/expand_str.c",
    "message": "pointer `t` last assigned on line 119 could be null and is dereferenced at line 139, column 38.",
    "warning_function_name": "expand_character",
    "warning_line": "sprintf(output_buffer, \"%02d\", t->tm_mday);",
    "warning_context": "char *\nexpand_character(char character, boolean index_page)\n\n{\n  static char *output_buffer=NULL;\n  static struct tm *t=NULL;\n  static char *daynames[] = { \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" };\n  static char *monnames[] = { \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                              \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" };\n\n  struct tm *ft;\n\n  /*\n   * Initialize time buffer\n   */\n  if (t == NULL)\n    {\n      time_t now;\n      if (!use_environment)\n\t{\n\t  now = 387774000;\n\t  t = gmtime(&now);\n\t}\n      else\n\t{\n\t  now = time((time_t *)NULL);\n\t  t = localtime(&now);\n\t}\n    }\n\n  /*\n   * Initialize output buffer\n   */\n  if (output_buffer == NULL)\n    output_buffer = xmalloc(100);\n\n  *output_buffer = '\\0';\n\n  switch (character)\n    {\n    case '%':\t\t/* percent character */\n      return \"%\";\n    case 'm':\t\t/* month of year */\n      sprintf(output_buffer, \"%02d\", t->tm_mon + 1);\n      return output_buffer;\n    case 'd':\t\t/* day of month */\n      sprintf(output_buffer, \"%02d\", t->tm_mday);\n      return output_buffer;\n    case 'y':\t\t/* year - four digits */\n      sprintf(output_buffer, \"%4d\", t->tm_year + 1900);\n      return output_buffer;\n    case 'D':\t\t/* date as mm/dd/yy */\n      sprintf(output_buffer, \"%02d/%02d/%02d\", t->tm_mon+1, t->tm_mday, t->tm_year);\n      return output_buffer;\n    case 'L':\t\t/* date as %a %h %d %T %y */\n      sprintf(output_buffer, \"%s %s %02d %02d:%02d:%02d %4d\",\n\t\t    daynames[t->tm_wday], monnames[t->tm_mon], t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec, t->tm_year + 1900);\n      return output_buffer;\n    case 'H':\t\t/* hour - 00 to 23 */\n      sprintf(output_buffer, \"%02d\", t->tm_hour);\n      return output_buffer;\n    case 'M':\t\t/* minute - 00 to 59 */\n      sprintf(output_buffer, \"%02d\", t->tm_min);\n      return output_buffer;\n    case 'S':\t\t/* second - 00 to 59 */\n      sprintf(output_buffer, \"%02d\", t->tm_sec);\n      return output_buffer;\n    case 'T':\t\t/* time as HH:MM:SS */\n      sprintf(output_buffer, \"%02d:%02d:%02d\", t->tm_hour, t->tm_min, t->tm_sec);\n      return output_buffer;\n    case 'j':\t\t/* day of year - 001 to 366 */\n      sprintf(output_buffer, \"%3d\", t->tm_yday);\n      return output_buffer;\n    case 'w':\t\t/* day of week - Sunday = 0 */\n      sprintf(output_buffer, \"%d\", t->tm_wday);\n      return output_buffer;\n    case 'a':\t\t/* abbreviated weekday - Sun to Sat */\n      return daynames[t->tm_wday];\n    case 'h':\t\t/* abbreviated month - Jan to Dec */\n      return monnames[t->tm_mon];\n    case 'r':\t\t/* time in AM/PM notation */\n      if (t->tm_hour > 12)\n\tsprintf(output_buffer, \"%02d:%02dpm\", t->tm_hour-12, t->tm_min);\n      else\n\tsprintf(output_buffer, \"%02d:%02dam\", t->tm_hour, t->tm_min);\n      return output_buffer;\n\n    case 'p':\t\t/* page number in current file */\n      if (index_page) return \"\";\n      sprintf(output_buffer, \"%ld\", file_page_number);\n      return output_buffer;\n    case 'P':\t\t/* page number overall */\n      if (index_page) return \"\";\n      sprintf(output_buffer, \"%ld\", page_number);\n      return output_buffer;\n    case 'f':\t\t/* total page numbers in current file */\n      if (index_page) return \"\";\n      sprintf(output_buffer, \"%ld\", get_file_last_page(file_number) - get_file_first_page(file_number) + 1);\n      return output_buffer;\n    case 'c':\t\t/* short-form modified (changed) date of current file */\n      if (index_page) return \"\";\n"
}