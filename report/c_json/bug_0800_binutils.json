{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Message": "Offset: [8, +oo] (⇐ [0, +oo] + 8) Size: [1, +oo] by call to `append_type`.",
    "Code_line": "\t  if (! append_type (info, \"context \")",
    "Code_function": "pr_class_method_variant (void *p, const char *physname,\n\t\t\t enum debug_visibility visibility,\n\t\t\t bfd_boolean constp, bfd_boolean volatilep,\n\t\t\t bfd_vma voffset, bfd_boolean context)\n{\n  struct pr_handle *info = (struct pr_handle *) p;\n  char *method_type;\n  char *context_type;\n\n  assert (info->stack != NULL);\n  assert (info->stack->next != NULL);\n\n  /* Put the const and volatile qualifiers on the type.  */\n  if (volatilep)\n    {\n      if (! append_type (info, \" volatile\"))\n\treturn FALSE;\n    }\n  if (constp)\n    {\n      if (! append_type (info, \" const\"))\n\treturn FALSE;\n    }\n\n  /* Stick the name of the method into its type.  */\n  if (! substitute_type (info,\n\t\t\t (context\n\t\t\t  ? info->stack->next->next->method\n\t\t\t  : info->stack->next->method)))\n    return FALSE;\n\n  /* Get the type.  */\n  method_type = pop_type (info);\n  if (method_type == NULL)\n    return FALSE;\n\n  /* Pull off the context type if there is one.  */\n  if (! context)\n    context_type = NULL;\n  else\n    {\n      context_type = pop_type (info);\n      if (context_type == NULL)\n\treturn FALSE;\n    }\n\n  /* Now the top of the stack is the class.  */\n\n  if (! pr_fix_visibility (info, visibility))\n    return FALSE;\n\n  if (! append_type (info, method_type)\n      || ! append_type (info, \" /* \")\n      || ! append_type (info, physname)\n      || ! append_type (info, \" \"))\n    return FALSE;\n  if (context || voffset != 0)\n    {\n      char ab[20];\n\n      if (context)\n\t{\n\t  if (! append_type (info, \"context \")\n\t      || ! append_type (info, context_type)\n\t      || ! append_type (info, \" \"))\n\t    return FALSE;\n\t}\n      print_vma (voffset, ab, TRUE, FALSE);\n      if (! append_type (info, \"voffset \")\n\t  || ! append_type (info, ab))\n\treturn FALSE;\n    }\n\n  return (append_type (info, \" */;\\n\")\n\t  && indent_type (info));\n}"
}