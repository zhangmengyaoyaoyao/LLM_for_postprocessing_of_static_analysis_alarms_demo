{
    "project": "tiff",
    "tool": "Cppcheck",
    "category": "memleakOnRealloc",
    "file": "tools/fax2ps.c",
    "message": "Common realloc mistake: 'pages' nulled but not freed upon failure",
    "warning_function_name": "main",
    "warning_line": "pages = (uint16*) realloc(pages, (npages+1)*sizeof(uint16));",
    "warning_context": "int\nmain(int argc, char** argv)\n{\n    extern int optind;\n    extern char* optarg;\n    uint16 *pages = NULL, npages = 0, pageNumber;\n    int c, dowarnings = 0;\t\t/* if 1, enable library warnings */\n    TIFF* tif;\n\n    while ((c = getopt(argc, argv, \"l:p:x:y:W:H:wS\")) != -1)\n\tswitch (c) {\n\tcase 'H':\t\t/* page height */\n\t    pageHeight = (float)atof(optarg);\n\t    break;\n\tcase 'S':\t\t/* scale to page */\n\t    scaleToPage = 1;\n\t    break;\n\tcase 'W':\t\t/* page width */\n\t    pageWidth = (float)atof(optarg);\n\t    break;\n\tcase 'p':\t\t/* print specific page */\n\t    pageNumber = (uint16)atoi(optarg);\n\t    if (pages)\n\t\tpages = (uint16*) realloc(pages, (npages+1)*sizeof(uint16));\n\t    else\n\t\tpages = (uint16*) malloc(sizeof(uint16));\n\t    pages[npages++] = pageNumber;\n\t    break;\n\tcase 'w':\n\t    dowarnings = 1;\n\t    break;\n\tcase 'x':\n\t    defxres = (float)atof(optarg);\n\t    break;\n\tcase 'y':\n\t    defyres = (float)atof(optarg);\n\t    break;\n\tcase 'l':\n\t    maxline = atoi(optarg);\n\t    break;\n\tcase '?':\n\t    usage(-1);\n\t}\n    if (npages > 0)\n\tqsort(pages, npages, sizeof(uint16), pcompar);\n    if (!dowarnings)\n\tTIFFSetWarningHandler(0);\n    if (optind < argc) {\n\tdo {\n\t    tif = TIFFOpen(argv[optind], \"r\");\n\t    if (tif) {\n\t\tfax2ps(tif, npages, pages, argv[optind]);\n\t\tTIFFClose(tif);\n\t    } else\n\t\tfprintf(stderr, \"%s: Can not open, or not a TIFF file.\\n\",\n\t\t    argv[optind]);\n\t} while (++optind < argc);\n    } else {\n\tint n;\n\tFILE* fd;\n\tchar buf[16*1024];\n\n\tfd = tmpfile();\n\tif (fd == NULL) {\n\t    fprintf(stderr, \"Could not obtain temporary file.\\n\");\n\t    exit(-2);\n\t}\n#if defined(HAVE_SETMODE) && defined(O_BINARY)\n\tsetmode(fileno(stdin), O_BINARY);\n#endif\n\twhile ((n = read(fileno(stdin), buf, sizeof (buf))) > 0)\n\t    write(fileno(fd), buf, n);\n\tlseek(fileno(fd), 0, SEEK_SET);\n#if defined(_WIN32) && defined(USE_WIN32_FILEIO)\n\ttif = TIFFFdOpen(_get_osfhandle(fileno(fd)), \"temp\", \"r\");\n#else\n\ttif = TIFFFdOpen(fileno(fd), \"temp\", \"r\");\n#endif\n\tif (tif) {\n\t    fax2ps(tif, npages, pages, \"<stdin>\");\n\t    TIFFClose(tif);\n\t} else\n\t    fprintf(stderr, \"Can not open, or not a TIFF file.\\n\");\n\tfclose(fd);\n    }\n    printf(\"%%%%Trailer\\n\");\n    printf(\"%%%%Pages: %u\\n\", totalPages);\n    printf(\"%%%%EOF\\n\");\n\n    return (0);\n}\n"
}