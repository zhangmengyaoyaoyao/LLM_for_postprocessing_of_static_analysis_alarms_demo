{
    "Project": "gawk",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Message": "Offset: [1, +oo] Size: [0, +oo] by call to `install_symbol`.",
    "Code_line": "       \tsymbol = install_symbol(estrdup(name, strlen(name)), Node_old_ext_func);",
    "Code_function": "make_old_builtin(const char *name, NODE *(*func)(int), int count)\t/* temporary */\n{\n\tNODE *symbol, *f;\n\tINSTRUCTION *b;\n\tconst char *sp;\n\tchar c;\n\n\tsp = name;\n\tif (sp == NULL || *sp == '\\0')\n\t\tfatal(_(\"extension: missing function name\"));\n\n\tif (! is_letter(*sp))\n\t\tfatal(_(\"extension: illegal character `%c' in function name `%s'\"), *sp, name);\n\n\tfor (sp++; (c = *sp++) != '\\0';) {\n\t\tif (! is_identchar(c))\n\t\t\tfatal(_(\"extension: illegal character `%c' in function name `%s'\"), c, name);\n\t}\n\n\tf = lookup(name);\n\n\tif (f != NULL) {\n\t\tif (f->type == Node_func) {\n\t\t\t/* user-defined function */\n\t\t\tfatal(_(\"extension: can't redefine function `%s'\"), name);\n\t\t} else if (f->type == Node_ext_func) {\n\t\t\t/* multiple extension() calls etc. */\n\t\t\tif (do_lint)\n\t\t\t\tlintwarn(_(\"extension: function `%s' already defined\"), name);\n\t\t\treturn;\n\t\t} else\n\t\t\t/* variable name etc. */\n\t\t\tfatal(_(\"extension: function name `%s' previously defined\"), name);\n\t} else if (check_special(name) >= 0)\n\t\tfatal(_(\"extension: can't use gawk built-in `%s' as function name\"), name);\n\n\tif (count < 0)\n\t\tfatal(_(\"make_builtin: negative argument count for function `%s'\"),\n\t\t\t\tname);\n\n\tb = bcalloc(Op_symbol, 1, 0);\n\tb->builtin = func;\n\tb->expr_count = count;\n\n\t/* NB: extension sub must return something */\n\n       \tsymbol = install_symbol(estrdup(name, strlen(name)), Node_old_ext_func);\n\tsymbol->code_ptr = b;\n\ttrack_ext_func(name);\n}"
}