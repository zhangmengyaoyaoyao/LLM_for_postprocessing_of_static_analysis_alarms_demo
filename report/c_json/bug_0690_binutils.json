{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Message": "Offset added: 15 Size: [1, +oo] by call to `string_prepend`.",
    "Code_line": "\t  string_prepend (decl, \"ModuleInfo for \");",
    "Code_function": "dlang_identifier (string *decl, const char *mangled)\n{\n  if (mangled == NULL || *mangled == '\\0')\n    return mangled;\n\n  if (ISDIGIT (*mangled))\n    {\n      char *endptr;\n      long i = strtol (mangled, &endptr, 10);\n\n      if (endptr == NULL || i <= 0 || strlen (endptr) < (size_t) i)\n\treturn NULL;\n\n      mangled = endptr;\n\n      /* May be a template instance.  */\n      if (i >= 5 && strncmp (mangled, \"__T\", 3) == 0)\n\t{\n\t  /* Template symbol.  */\n\t  if (ISDIGIT (mangled[3]) && mangled[3] != '0')\n\t    return dlang_parse_template (decl, mangled, i);\n\n\t  return NULL;\n\t}\n\n      if (strncmp (mangled, \"__ctor\", i) == 0)\n\t{\n\t  /* Constructor symbol for a class/struct.  */\n\t  string_append (decl, \"this\");\n\t  mangled += i;\n\t  return mangled;\n\t}\n      else if (strncmp (mangled, \"__dtor\", i) == 0)\n\t{\n\t  /* Destructor symbol for a class/struct.  */\n\t  string_append (decl, \"~this\");\n\t  mangled += i;\n\t  return mangled;\n\t}\n      else if (strncmp (mangled, \"__postblit\", i) == 0)\n\t{\n\t  /* Postblit symbol for a struct.  */\n\t  string_append (decl, \"this(this)\");\n\t  mangled += i;\n\t  return mangled;\n\t}\n      else if (strncmp (mangled, \"__initZ\", i+1) == 0)\n\t{\n\t  /* The static initialiser for a given symbol.  */\n\t  string_append (decl, \"init$\");\n\t  mangled += i + 1;\n\t  return mangled;\n\t}\n      else if (strncmp (mangled, \"__ClassZ\", i+1) == 0)\n\t{\n\t  /* The classinfo symbol for a given class.  */\n\t  string_prepend (decl, \"ClassInfo for \");\n\t  string_setlength (decl, string_length (decl) - 1);\n\t  mangled += i + 1;\n\t  return mangled;\n\t}\n      else if (strncmp (mangled, \"__vtblZ\", i+1) == 0)\n\t{\n\t  /* The vtable symbol for a given class.  */\n\t  string_prepend (decl, \"vtable for \");\n\t  string_setlength (decl, string_length (decl) - 1);\n\t  mangled += i + 1;\n\t  return mangled;\n\t}\n      else if (strncmp (mangled, \"__InterfaceZ\", i+1) == 0)\n\t{\n\t  /* The interface symbol for a given class.  */\n\t  string_prepend (decl, \"Interface for \");\n\t  string_setlength (decl, string_length (decl) - 1);\n\t  mangled += i + 1;\n\t  return mangled;\n\t}\n      else if (strncmp (mangled, \"__ModuleInfoZ\", i+1) == 0)\n\t{\n\t  /* The ModuleInfo symbol for a given module.  */\n\t  string_prepend (decl, \"ModuleInfo for \");\n\t  string_setlength (decl, string_length (decl) - 1);\n\t  mangled += i + 1;\n\t  return mangled;\n\t}\n\n      string_appendn (decl, mangled, i);\n      mangled += i;\n    }\n  else\n    return NULL;\n\n  return mangled;\n}"
}