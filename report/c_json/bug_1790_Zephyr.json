{
    "project": "Zephyr",
    "tool": "Infer",
    "category": "Uninitialized Value",
    "file": "subsys/logging/log_backend_net.c",
    "message": "The value read from server_addr_len was never initialized.",
    "warning_function_name": "do_net_init",
    "warning_line": "(void)net_context_connect(ctx, &server_addr, server_addr_len,",
    "warning_context": "static int do_net_init(void)\n{\n\tstruct sockaddr *local_addr = NULL;\n\tstruct sockaddr_in6 local_addr6;\n\tstruct sockaddr_in local_addr4;\n\tsocklen_t server_addr_len;\n\tstruct net_context *ctx;\n\tint ret;\n\n\tif (IS_ENABLED(CONFIG_NET_IPV4) && server_addr.sa_family == AF_INET) {\n\t\tlocal_addr = (struct sockaddr *)&local_addr4;\n\t\tserver_addr_len = sizeof(struct sockaddr_in);\n\t\tlocal_addr4.sin_port = 0U;\n\t}\n\n\tif (IS_ENABLED(CONFIG_NET_IPV6) && server_addr.sa_family == AF_INET6) {\n\t\tlocal_addr = (struct sockaddr *)&local_addr6;\n\t\tserver_addr_len = sizeof(struct sockaddr_in6);\n\t\tlocal_addr6.sin6_port = 0U;\n\t}\n\n\tif (local_addr == NULL) {\n\t\tDBG(\"Server address unknown\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tlocal_addr->sa_family = server_addr.sa_family;\n\n\tret = net_context_get(server_addr.sa_family, SOCK_DGRAM, IPPROTO_UDP,\n\t\t\t      &ctx);\n\tif (ret < 0) {\n\t\tDBG(\"Cannot get context (%d)\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tif (IS_ENABLED(CONFIG_NET_HOSTNAME_ENABLE)) {\n\t\t(void)memcpy(hostname, net_hostname_get(), MAX_HOSTNAME_LEN);\n\n\t} else if (IS_ENABLED(CONFIG_NET_IPV6) &&\n\t\t   server_addr.sa_family == AF_INET6) {\n\t\tconst struct in6_addr *src;\n\n\t\tsrc = net_if_ipv6_select_src_addr(\n\t\t\tNULL, &net_sin6(&server_addr)->sin6_addr);\n\t\tif (src) {\n\t\t\tnet_addr_ntop(AF_INET6, src, hostname,\n\t\t\t\t      MAX_HOSTNAME_LEN);\n\n\t\t\tnet_ipaddr_copy(&local_addr6.sin6_addr, src);\n\t\t} else {\n\t\t\tgoto unknown;\n\t\t}\n\n\t} else if (IS_ENABLED(CONFIG_NET_IPV4) &&\n\t\t   server_addr.sa_family == AF_INET) {\n\t\tstruct net_if_ipv4 *ipv4;\n\t\tstruct net_if *iface;\n\n\t\tiface = net_if_ipv4_select_src_iface(\n\t\t\t\t\t&net_sin(&server_addr)->sin_addr);\n\t\tipv4 = iface->config.ip.ipv4;\n\n\t\tnet_ipaddr_copy(&local_addr4.sin_addr,\n\t\t\t\t&ipv4->unicast[0].address.in_addr);\n\n\t\tnet_addr_ntop(AF_INET, &local_addr4.sin_addr, hostname,\n\t\t\t      MAX_HOSTNAME_LEN);\n\t} else {\n\tunknown:\n\t\tDBG(\"Cannot setup local context\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tret = net_context_bind(ctx, local_addr, server_addr_len);\n\tif (ret < 0) {\n\t\tDBG(\"Cannot bind context (%d)\\n\", ret);\n\t\treturn ret;\n\t}\n\n\t(void)net_context_connect(ctx, &server_addr, server_addr_len,\n\t\t\t\t  NULL, K_NO_WAIT, NULL);\n\n\t/* We do not care about return value for this UDP connect call that\n\t * basically does nothing. Calling the connect is only useful so that\n\t * we can see the syslog connection in net-shell.\n\t */\n\n\tnet_context_setup_pools(ctx, get_tx_slab, get_data_pool);\n\n\tlog_output_ctx_set(&log_output, ctx);\n\tlog_output_hostname_set(&log_output, hostname);\n\n\treturn 0;\n}\n"
}