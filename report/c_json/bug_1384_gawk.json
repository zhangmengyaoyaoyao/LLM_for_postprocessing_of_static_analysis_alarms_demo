{
    "project": "gawk",
    "tool": "CSA",
    "category": "core.NullDereference",
    "file": "gawkapi.c",
    "message": "Access to field 'type' results in a dereference of a null pointer (loaded from variable 'node')",
    "warning_function_name": "node_to_awk_value",
    "warning_line": "switch (node->type) {",
    "warning_context": "static awk_bool_t\nnode_to_awk_value(NODE *node, awk_value_t *val, awk_valtype_t wanted)\n{\n\tawk_bool_t ret = awk_false;\n\n\tif (node == NULL)\n\t\tfatal(_(\"node_to_awk_value: received null node\"));\n\n\tif (val == NULL)\n\t\tfatal(_(\"node_to_awk_value: received null val\"));\n\n\tswitch (node->type) {\n\tcase Node_var_new:\t/* undefined variable */\n\t\tval->val_type = AWK_UNDEFINED;\n\t\tif (wanted == AWK_UNDEFINED) {\n\t\t\tret = awk_true;\n\t\t}\n\t\tbreak;\n\n\tcase Node_var:\n\t\t/* a scalar value */\n\t\tif (wanted == AWK_SCALAR) {\n\t\t\tval->val_type = AWK_SCALAR;\n\t\t\tval->scalar_cookie = (void *) node;\n\t\t\tret = awk_true;\n\t\t\tbreak;\n\t\t}\n\n\t\tnode = node->var_value;\n\t\t/* FALL THROUGH */\n\tcase Node_val:\n\t\t/* a scalar value */\n\t\tswitch (wanted) {\n\t\tcase AWK_NUMBER:\n\t\t\tval->val_type = AWK_NUMBER;\n\n\t\t\t(void) force_number(node);\n\t\t\tif ((node->flags & NUMCUR) != 0) {\n\t\t\t\tval->num_value = get_number_d(node);\n\t\t\t\tret = awk_true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase AWK_STRING:\n\t\t\tval->val_type = AWK_STRING;\n\n\t\t\t(void) force_string(node);\n\t\t\tif ((node->flags & STRCUR) != 0) {\n\t\t\t\tval->str_value.str = node->stptr;\n\t\t\t\tval->str_value.len = node->stlen;\n\t\t\t\tret = awk_true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase AWK_SCALAR:\n\t\t\tif ((node->flags & NUMBER) != 0) {\n\t\t\t\tval->val_type = AWK_NUMBER;\n\t\t\t} else if ((node->flags & STRING) != 0) {\n\t\t\t\tval->val_type = AWK_STRING;\n\t\t\t} else\n\t\t\t\tval->val_type = AWK_UNDEFINED;\n\t\t\tret = awk_false;\n\t\t\tbreak;\n\n\t\tcase AWK_UNDEFINED:\n\t\t\t/* return true and actual type for request of undefined */\n\t\t\tif (node == Nnull_string) {\n\t\t\t\tval->val_type = AWK_UNDEFINED;\n\t\t\t\tret = awk_true;\n\t\t\t} else if ((node->flags & NUMBER) != 0) {\n\t\t\t\tval->val_type = AWK_NUMBER;\n\t\t\t\tval->num_value = get_number_d(node);\n\t\t\t\tret = awk_true;\n\t\t\t} else if ((node->flags & STRING) != 0) {\n\t\t\t\tval->val_type = AWK_STRING;\n\t\t\t\tval->str_value.str = node->stptr;\n\t\t\t\tval->str_value.len = node->stlen;\n\t\t\t\tret = awk_true;\n\t\t\t} else\n\t\t\t\tval->val_type = AWK_UNDEFINED;\n\t\t\tbreak;\n\n\t\tcase AWK_ARRAY:\n\t\tcase AWK_VALUE_COOKIE:\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\n\tcase Node_var_array:\n\t\tval->val_type = AWK_ARRAY;\n\t\tif (wanted == AWK_ARRAY || wanted == AWK_UNDEFINED) {\n\t\t\tval->array_cookie = node;\n\t\t\tret = awk_true;\n\t\t} else\n\t\t\tret = awk_false;\n\t\tbreak;\n\n\tdefault:\n\t\tval->val_type = AWK_UNDEFINED;\n\t\tret = awk_false;\n\t\tbreak;\n"
}