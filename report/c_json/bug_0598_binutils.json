{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_S2",
    "file": "binutils/prdbg.c",
    "message": "Offset: [1+min(1, `info->stack->type->strlen`), 1+max(1, `info->stack->type->strlen`)] (⇐ [min(1, `info->stack->type->strlen`), max(1, `info->stack->type->strlen`)] + 1) Size: [1, +oo] by call to `append_type`.",
    "warning_function_name": "substitute_type",
    "warning_line": "return (append_type (info, \" \")",
    "warning_context": "static bfd_boolean\nsubstitute_type (struct pr_handle *info, const char *s)\n{\n  char *u;\n\n  assert (info->stack != NULL);\n\n  u = strchr (info->stack->type, '|');\n  if (u != NULL)\n    {\n      char *n;\n\n      n = (char *) xmalloc (strlen (info->stack->type) + strlen (s));\n\n      memcpy (n, info->stack->type, u - info->stack->type);\n      strcpy (n + (u - info->stack->type), s);\n      strcat (n, u + 1);\n\n      free (info->stack->type);\n      info->stack->type = n;\n\n      return TRUE;\n    }\n\n  if (strchr (s, '|') != NULL\n      && (strchr (info->stack->type, '{') != NULL\n\t  || strchr (info->stack->type, '(') != NULL))\n    {\n      if (! prepend_type (info, \"(\")\n\t  || ! append_type (info, \")\"))\n\treturn FALSE;\n    }\n\n  if (*s == '\\0')\n    return TRUE;\n\n  return (append_type (info, \" \")\n\t  && append_type (info, s));\n}\n"
}