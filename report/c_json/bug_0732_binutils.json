{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_S2",
    "file": "bfd/opncls.c",
    "message": "Offset: [1+min(1, `debug_file_directory[*].strlen`), 1+max(1, `debug_file_directory[*].strlen`)] Size: [0, +oo].",
    "warning_function_name": "find_separate_debug_file",
    "warning_line": "strcat (debugfile, \"/\");",
    "warning_context": "  char *canon_dir;\n  unsigned long crc32;\n  size_t dirlen;\n  size_t canon_dirlen;\n\n  BFD_ASSERT (abfd);\n  if (debug_file_directory == NULL)\n    debug_file_directory = \".\";\n\n  /* BFD may have been opened from a stream.  */\n  if (abfd->filename == NULL)\n    {\n      bfd_set_error (bfd_error_invalid_operation);\n      return NULL;\n    }\n\n  base = get_func (abfd, & crc32);\n    \n  if (base == NULL)\n    return NULL;\n\n  if (base[0] == '\\0')\n    {\n      free (base);\n      bfd_set_error (bfd_error_no_debug_section);\n      return NULL;\n    }\n\n  for (dirlen = strlen (abfd->filename); dirlen > 0; dirlen--)\n    if (IS_DIR_SEPARATOR (abfd->filename[dirlen - 1]))\n      break;\n\n  dir = (char *) bfd_malloc (dirlen + 1);\n  if (dir == NULL)\n    {\n      free (base);\n      return NULL;\n    }\n  memcpy (dir, abfd->filename, dirlen);\n  dir[dirlen] = '\\0';\n\n  /* Compute the canonical name of the bfd object with all symbolic links\n     resolved, for use in the global debugfile directory.  */\n  canon_dir = lrealpath (abfd->filename);\n  for (canon_dirlen = strlen (canon_dir); canon_dirlen > 0; canon_dirlen--)\n    if (IS_DIR_SEPARATOR (canon_dir[canon_dirlen - 1]))\n      break;\n  canon_dir[canon_dirlen] = '\\0';\n\n  debugfile = (char *)\n      bfd_malloc (strlen (debug_file_directory) + 1\n                  + (canon_dirlen > dirlen ? canon_dirlen : dirlen)\n                  + strlen (\".debug/\")\n                  + strlen (base)\n                  + 1);\n  if (debugfile == NULL)\n    goto found; /* Actually this returns NULL.  */\n\n  /* First try in the same directory as the original file:  */\n  strcpy (debugfile, dir);\n  strcat (debugfile, base);\n\n  if (check_func (debugfile, crc32))\n    goto found;\n\n  /* Then try in a subdirectory called .debug.  */\n  strcpy (debugfile, dir);\n  strcat (debugfile, \".debug/\");\n  strcat (debugfile, base);\n\n  if (check_func (debugfile, crc32))\n    goto found;\n\n  /* Then try in the global debugfile directory.  */\n  strcpy (debugfile, debug_file_directory);\n  dirlen = strlen (debug_file_directory) - 1;\n  if (dirlen > 0\n      && debug_file_directory[dirlen] != '/'\n      && canon_dir[0] != '/')\n    strcat (debugfile, \"/\");\n  strcat (debugfile, canon_dir);\n  strcat (debugfile, base);\n\n  if (check_func (debugfile, crc32))\n    goto found;\n\n  /* Failed to find the file.  */\n  free (debugfile);\n  debugfile = NULL;\n\n found:\n  free (base);\n  free (dir);\n  free (canon_dir);\n  return debugfile;\n}\n\n\n/*\nFUNCTION\n\tbfd_follow_gnu_debuglink\n"
}