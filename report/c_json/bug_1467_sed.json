{
    "Project": "sed",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "sed/compile.c",
    "message": "Offset: [1, +oo] Size: [0, +oo] by call to `ck_strdup`.",
    "warning_function_name": "compile_program",
    "warning_line": "cur_cmd->x.fname = ck_strdup(get_buffer(b));",
    "warning_context": "\tcase 'i':\n\tcase 'c':\n\t  ch = in_nonblank();\n\n\tread_text_to_slash:\n\t  if (ch == EOF)\n\t    bad_prog(_(EXPECTED_SLASH));\n\t      \n\t  if (ch == '\\\\')\n\t    ch = inchar();\n\t  else\n\t    {\n\t      if (posixicity == POSIXLY_BASIC)\n\t\tbad_prog(_(EXPECTED_SLASH));\n\t      savchar(ch);\n\t      ch = '\\n';\n\t    }\n\n\t  read_text(&cur_cmd->x.cmd_txt, ch);\n\t  break;\n\n\tcase ':':\n\t  if (cur_cmd->a1)\n\t    bad_prog(_(NO_COLON_ADDR));\n\t  labels = setup_label(labels, vector->v_length, read_label(), NULL);\n\t  break;\n\t\n\tcase 'T':\n\tcase 'b':\n\tcase 't':\n\t  jumps = setup_label(jumps, vector->v_length, read_label(), NULL);\n\t  break;\n\n\tcase 'Q':\n\tcase 'q':\n\t  if (cur_cmd->a2)\n\t    bad_prog(_(ONE_ADDR));\n\t  /* Fall through */\n\n\tcase 'L':\n\tcase 'l':\n\t  ch = in_nonblank();\n\t  if (ISDIGIT(ch) && posixicity != POSIXLY_BASIC)\n\t    {\n\t      cur_cmd->x.int_arg = in_integer(ch);\n\t      ch = in_nonblank();\n\t    }\n\t  else\n\t    cur_cmd->x.int_arg = -1;\n\n\t  if (ch == CLOSE_BRACE || ch == '#')\n\t    savchar(ch);\n\t  else if (ch != EOF && ch != '\\n' && ch != ';')\n\t    bad_prog(_(EXCESS_JUNK));\n\n\t  break;\n\n\tcase '=':\n\tcase 'd':\n\tcase 'D':\n\tcase 'g':\n\tcase 'G':\n\tcase 'h':\n\tcase 'H':\n\tcase 'n':\n\tcase 'N':\n\tcase 'p':\n\tcase 'P':\n\tcase 'z':\n\tcase 'x':\n\t  ch = in_nonblank();\n\t  if (ch == CLOSE_BRACE || ch == '#')\n\t    savchar(ch);\n\t  else if (ch != EOF && ch != '\\n' && ch != ';')\n\t    bad_prog(_(EXCESS_JUNK));\n\t  break;\n\n\tcase 'r':\n\t  b = read_filename();\n\t  cur_cmd->x.fname = ck_strdup(get_buffer(b));\n\t  free_buffer(b);\n\t  break;\n\n        case 'R':\n\t  cur_cmd->x.fp = get_openfile(&file_read, read_mode, false)->fp;\n\t  break;\n\n        case 'W':\n\tcase 'w':\n\t  cur_cmd->x.outf = get_openfile(&file_write, \"w\", true);\n\t  break;\n\n\tcase 's':\n\t  {\n\t    struct buffer *b2;\n\t    int flags;\n\t    int slash;\n\n\t    slash = inchar();\n\t    if ( !(b  = match_slash(slash, true)) )\n\t      bad_prog(_(UNTERM_S_CMD));\n"
}