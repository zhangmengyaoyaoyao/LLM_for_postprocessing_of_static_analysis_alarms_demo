{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Message": "Offset added: [-20, 155] (⇐ [-76, 99] + 56) Size: 4064 by call to `bfd_zalloc`.",
    "Code_line": "      native = (combined_entry_type *) bfd_zalloc (abfd, amt);",
    "Code_function": "bfd_coff_set_symbol_class (bfd *         abfd,\n\t\t\t   asymbol *     symbol,\n\t\t\t   unsigned int  symbol_class)\n{\n  coff_symbol_type * csym;\n\n  csym = coff_symbol_from (abfd, symbol);\n  if (csym == NULL)\n    {\n      bfd_set_error (bfd_error_invalid_operation);\n      return FALSE;\n    }\n  else if (csym->native == NULL)\n    {\n      /* This is an alien symbol which no native coff backend data.\n\t We cheat here by creating a fake native entry for it and\n\t then filling in the class.  This code is based on that in\n\t coff_write_alien_symbol().  */\n\n      combined_entry_type * native;\n      bfd_size_type amt = sizeof (* native);\n\n      native = (combined_entry_type *) bfd_zalloc (abfd, amt);\n      if (native == NULL)\n\treturn FALSE;\n\n      native->is_sym = TRUE;\n      native->u.syment.n_type   = T_NULL;\n      native->u.syment.n_sclass = symbol_class;\n\n      if (bfd_is_und_section (symbol->section))\n\t{\n\t  native->u.syment.n_scnum = N_UNDEF;\n\t  native->u.syment.n_value = symbol->value;\n\t}\n      else if (bfd_is_com_section (symbol->section))\n\t{\n\t  native->u.syment.n_scnum = N_UNDEF;\n\t  native->u.syment.n_value = symbol->value;\n\t}\n      else\n\t{\n\t  native->u.syment.n_scnum =\n\t    symbol->section->output_section->target_index;\n\t  native->u.syment.n_value = (symbol->value\n\t\t\t\t      + symbol->section->output_offset);\n\t  if (! obj_pe (abfd))\n\t    native->u.syment.n_value += symbol->section->output_section->vma;\n\n\t  /* Copy the any flags from the file header into the symbol.\n\t     FIXME: Why?  */\n\t  native->u.syment.n_flags = bfd_asymbol_bfd (& csym->symbol)->flags;\n\t}\n\n      csym->native = native;\n    }\n  else\n    csym->native->u.syment.n_sclass = symbol_class;\n\n  return TRUE;\n}"
}