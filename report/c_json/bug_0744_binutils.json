{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_S2",
    "file": "binutils/dwarf.c",
    "message": "Offset: `debug_info_p->num_range_lists` Size: [0, +oo].",
    "warning_function_name": "read_and_display_attr_value",
    "warning_line": "debug_info_p->range_lists [num] = uvalue;",
    "warning_context": "    }\n\n  if ((do_loc || do_debug_loc || do_debug_ranges)\n      && num_debug_info_entries == 0\n      && debug_info_p != NULL)\n    {\n      switch (attribute)\n\t{\n\tcase DW_AT_frame_base:\n\t  have_frame_base = 1;\n\tcase DW_AT_location:\n\tcase DW_AT_string_length:\n\tcase DW_AT_return_addr:\n\tcase DW_AT_data_member_location:\n\tcase DW_AT_vtable_elem_location:\n\tcase DW_AT_segment:\n\tcase DW_AT_static_link:\n\tcase DW_AT_use_location:\n\tcase DW_AT_GNU_call_site_value:\n\tcase DW_AT_GNU_call_site_data_value:\n\tcase DW_AT_GNU_call_site_target:\n\tcase DW_AT_GNU_call_site_target_clobbered:\n\t  if ((dwarf_version < 4\n\t       && (form == DW_FORM_data4 || form == DW_FORM_data8))\n\t      || form == DW_FORM_sec_offset)\n\t    {\n\t      /* Process location list.  */\n\t      unsigned int lmax = debug_info_p->max_loc_offsets;\n\t      unsigned int num = debug_info_p->num_loc_offsets;\n\n\t      if (lmax == 0 || num >= lmax)\n\t\t{\n\t\t  lmax += 1024;\n\t\t  debug_info_p->loc_offsets = (dwarf_vma *)\n\t\t    xcrealloc (debug_info_p->loc_offsets,\n\t\t\t       lmax, sizeof (*debug_info_p->loc_offsets));\n\t\t  debug_info_p->have_frame_base = (int *)\n\t\t    xcrealloc (debug_info_p->have_frame_base,\n\t\t\t       lmax, sizeof (*debug_info_p->have_frame_base));\n\t\t  debug_info_p->max_loc_offsets = lmax;\n\t\t}\n\t      if (this_set != NULL)\n\t\tuvalue += this_set->section_offsets [DW_SECT_LOC];\n\t      debug_info_p->loc_offsets [num] = uvalue;\n\t      debug_info_p->have_frame_base [num] = have_frame_base;\n\t      debug_info_p->num_loc_offsets++;\n\t    }\n\t  break;\n\n\tcase DW_AT_low_pc:\n\t  if (need_base_address)\n\t    debug_info_p->base_address = uvalue;\n\t  break;\n\n\tcase DW_AT_GNU_addr_base:\n\t  debug_info_p->addr_base = uvalue;\n\t  break;\n\n\tcase DW_AT_GNU_ranges_base:\n\t  debug_info_p->ranges_base = uvalue;\n\t  break;\n\n\tcase DW_AT_ranges:\n\t  if ((dwarf_version < 4\n\t       && (form == DW_FORM_data4 || form == DW_FORM_data8))\n\t      || form == DW_FORM_sec_offset)\n\t    {\n\t      /* Process range list.  */\n\t      unsigned int lmax = debug_info_p->max_range_lists;\n\t      unsigned int num = debug_info_p->num_range_lists;\n\n\t      if (lmax == 0 || num >= lmax)\n\t\t{\n\t\t  lmax += 1024;\n\t\t  debug_info_p->range_lists = (dwarf_vma *)\n\t\t    xcrealloc (debug_info_p->range_lists,\n\t\t\t       lmax, sizeof (*debug_info_p->range_lists));\n\t\t  debug_info_p->max_range_lists = lmax;\n\t\t}\n\t      debug_info_p->range_lists [num] = uvalue;\n\t      debug_info_p->num_range_lists++;\n\t    }\n\t  break;\n\n\tdefault:\n\t  break;\n\t}\n    }\n\n  if (do_loc || attribute == 0)\n    return data;\n\n  /* For some attributes we can display further information.  */\n  switch (attribute)\n    {\n    case DW_AT_inline:\n      printf (\"\\t\");\n      switch (uvalue)\n\t{\n\tcase DW_INL_not_inlined:\n\t  printf (_(\"(not inlined)\"));\n"
}