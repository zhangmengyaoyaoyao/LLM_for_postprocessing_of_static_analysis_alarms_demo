{
    "Project": "gawk",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Message": "Offset: 11 Size: [0, 13] by call to `make_str_node`.",
    "Code_line": "\ttmp = make_string(\"identifiers\", 11);",
    "Code_function": "load_symbols()\n{\n\tNODE *r;\n\tNODE *tmp;\n\tNODE *sym_array;\n\tNODE **aptr;\n\tlong i, j, max;\n\tNODE *user, *extension, *untyped, *scalar, *array, *built_in;\n\tNODE **list;\n\tNODE *tables[4];\n\n\tif (PROCINFO_node == NULL)\n\t\treturn;\n\n\ttables[0] = func_table;\n\ttables[1] = symbol_table;\n\ttables[2] = global_table;\n\ttables[3] = NULL;\n\n\ttmp = make_string(\"identifiers\", 11);\n\taptr = assoc_lookup(PROCINFO_node, tmp);\n\n\tgetnode(sym_array);\n\tmemset(sym_array, '\\0', sizeof(NODE));\t/* PPC Mac OS X wants this */\n\tnull_array(sym_array);\n\n\tunref(*aptr);\n\t*aptr = sym_array;\n\n\tsym_array->parent_array = PROCINFO_node;\n\tsym_array->vname = estrdup(\"identifiers\", 11);\n\n\tuser = make_string(\"user\", 4);\n\textension = make_string(\"extension\", 9);\n\tscalar = make_string(\"scalar\", 6);\n\tuntyped = make_string(\"untyped\", 7);\n\tarray = make_string(\"array\", 5);\n\tbuilt_in = make_string(\"builtin\", 7);\n\n\tfor (i = 0; tables[i] != NULL; i++) {\n\t\tlist = assoc_list(tables[i], \"@unsorted\", ASORTI);\n\t\tmax = tables[i]->table_size * 2;\n\t\tif (max == 0)\n\t\t\tcontinue;\n\t\tfor (j = 0; j < max; j += 2) {\n\t\t\tr = list[j+1];\n\t\t\tif (   r->type == Node_ext_func\n\t\t\t    || r->type == Node_func\n\t\t\t    || r->type == Node_builtin_func\n\t\t\t    || r->type == Node_var\n\t\t\t    || r->type == Node_var_array\n\t\t\t    || r->type == Node_var_new) {\n\t\t\t\ttmp = make_string(r->vname, strlen(r->vname));\n\t\t\t\taptr = assoc_lookup(sym_array, tmp);\n\t\t\t\tunref(tmp);\n\t\t\t\tunref(*aptr);\n\t\t\t\tswitch (r->type) {\n\t\t\t\tcase Node_ext_func:\n\t\t\t\t\t*aptr = dupnode(extension);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Node_func:\n\t\t\t\t\t*aptr = dupnode(user);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Node_builtin_func:\n\t\t\t\t\t*aptr = dupnode(built_in);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Node_var:\n\t\t\t\t\t*aptr = dupnode(scalar);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Node_var_array:\n\t\t\t\t\t*aptr = dupnode(array);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Node_var_new:\n\t\t\t\t\t*aptr = dupnode(untyped);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcant_happen();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tefree(list);\n\t}\n\n\tunref(user);\n\tunref(extension);\n\tunref(scalar);\n\tunref(untyped);\n\tunref(array);\n}"
}