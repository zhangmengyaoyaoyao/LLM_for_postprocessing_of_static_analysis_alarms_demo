{
    "project": "Zephyr",
    "tool": "Cppcheck",
    "category": "Null Pointer Dereference",
    "file": "samples/net/nats/src/nats.c",
    "message": "Either the condition 'tmp' is redundant or there is possible null pointer dereference: tmp.",
    "warning_function_name": "receive_cb",
    "warning_line": "pos = pkt->cursor.pos - tmp->data;",
    "warning_context": "static void receive_cb(struct net_context *ctx,\n\t\t       struct net_pkt *pkt,\n\t\t       union net_ip_header *ip_hdr,\n\t\t       union net_proto_header *proto_hdr,\n\t\t       int status,\n\t\t       void *user_data)\n{\n\tstruct nats *nats = user_data;\n\tchar cmd_buf[CMD_BUF_LEN];\n\tstruct net_buf *tmp;\n\tu16_t pos = 0U, cmd_len = 0U;\n\tsize_t len;\n\tu8_t *end_of_line;\n\n\tif (!pkt) {\n\t\t/* FIXME: How to handle disconnection? */\n\t\treturn;\n\t}\n\n\tif (status) {\n\t\t/* FIXME: How to handle connectio error? */\n\t\tnet_pkt_unref(pkt);\n\t\treturn;\n\t}\n\n\ttmp = pkt->cursor.buf;\n\tif (!tmp) {\n\t\tnet_pkt_unref(pkt);\n\t\treturn;\n\t}\n\n\tpos = pkt->cursor.pos - tmp->data;\n\n\twhile (tmp) {\n\t\tlen = tmp->len - pos;\n\n\t\tend_of_line = memchr((u8_t *)tmp->data + pos, '\\n', len);\n\t\tif (end_of_line) {\n\t\t\tlen = end_of_line - ((u8_t *)tmp->data + pos);\n\t\t}\n\n\t\tif (cmd_len + len > sizeof(cmd_buf)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (net_pkt_read(pkt, (u8_t *)(cmd_buf + cmd_len), len)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tcmd_len += len;\n\n\t\tif (end_of_line) {\n\t\t\tu8_t dummy;\n\t\t\tint ret;\n\n\t\t\tif (net_pkt_read_u8(pkt, &dummy)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcmd_buf[cmd_len] = '\\0';\n\n\t\t\tret = handle_server_cmd(nats, cmd_buf, cmd_len,\n\t\t\t\t\t\ttmp, pos);\n\t\t\tif (ret < 0) {\n\t\t\t\t/* FIXME: What to do with unhandled messages? */\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcmd_len = 0U;\n\t\t}\n\n\t\ttmp = pkt->cursor.buf;\n\t\tpos = pkt->cursor.pos - tmp->data;\n\t}\n\n\tnet_pkt_unref(pkt);\n}\n"
}