{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Code_line": "  if (dirs[num_dirs - 1] == NULL)",
    "Code_function": "split_directories (const char *name, int *ptr_num_dirs)\n{\n  int num_dirs = 0;\n  char **dirs;\n  const char *p, *q;\n  int ch;\n\n  /* Count the number of directories.  Special case MSDOS disk names as part\n     of the initial directory.  */\n  p = name;\n#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n  if (name[1] == ':' && IS_DIR_SEPARATOR (name[2]))\n    {\n      p += 3;\n      num_dirs++;\n    }\n#endif /* HAVE_DOS_BASED_FILE_SYSTEM */\n\n  while ((ch = *p++) != '\\0')\n    {\n      if (IS_DIR_SEPARATOR (ch))\n\t{\n\t  num_dirs++;\n\t  while (IS_DIR_SEPARATOR (*p))\n\t    p++;\n\t}\n    }\n\n  dirs = (char **) malloc (sizeof (char *) * (num_dirs + 2));\n  if (dirs == NULL)\n    return NULL;\n\n  /* Now copy the directory parts.  */\n  num_dirs = 0;\n  p = name;\n#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n  if (name[1] == ':' && IS_DIR_SEPARATOR (name[2]))\n    {\n      dirs[num_dirs++] = save_string (p, 3);\n      if (dirs[num_dirs - 1] == NULL)\n\t{\n\t  free (dirs);\n\t  return NULL;\n\t}\n      p += 3;\n    }\n#endif /* HAVE_DOS_BASED_FILE_SYSTEM */\n\n  q = p;\n  while ((ch = *p++) != '\\0')\n    {\n      if (IS_DIR_SEPARATOR (ch))\n\t{\n\t  while (IS_DIR_SEPARATOR (*p))\n\t    p++;\n\n\t  dirs[num_dirs++] = save_string (q, p - q);\n\t  if (dirs[num_dirs - 1] == NULL)\n\t    {\n\t      dirs[num_dirs] = NULL;\n\t      free_split_directories (dirs);\n\t      return NULL;\n\t    }\n\t  q = p;\n\t}\n    }\n\n  if (p - 1 - q > 0)\n    dirs[num_dirs++] = save_string (q, p - 1 - q);\n  dirs[num_dirs] = NULL;\n\n  if (dirs[num_dirs - 1] == NULL)\n    {\n      free_split_directories (dirs);\n      return NULL;\n    }\n\n  if (ptr_num_dirs)\n    *ptr_num_dirs = num_dirs;\n  return dirs;\n}"
}