{
    "Project": "grep",
    "Tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/pcresearch.c",
    "message": "The value read from line_end was never initialized.",
    "warning_function_name": "Pexecute",
    "warning_line": "end = line_end + 1;",
    "warning_context": "                      line_end = nl;\n                      continue;\n                    }\n                }\n              break;\n            }\n          int valid_bytes = sub[0];\n\n          /* Try to match the string before the encoding error.\n             Again, handle the empty-match case specially, for speed.  */\n          if (valid_bytes == 0)\n            {\n              sub[1] = 0;\n              e = empty_match[bol];\n            }\n          else\n            e = pcre_exec (cre, extra, p, valid_bytes, 0,\n                           options | PCRE_NO_UTF8_CHECK | PCRE_NOTEOL,\n                           sub, NSUB);\n          if (e != PCRE_ERROR_NOMATCH)\n            break;\n\n          /* Treat the encoding error as data that cannot match.  */\n          p += valid_bytes + 1;\n          bol = false;\n        }\n\n      if (e != PCRE_ERROR_NOMATCH)\n        break;\n      bol = true;\n    }\n\n  if (e <= 0)\n    {\n      switch (e)\n        {\n        case PCRE_ERROR_NOMATCH:\n          break;\n\n        case PCRE_ERROR_NOMEMORY:\n          error (EXIT_TROUBLE, 0, _(\"memory exhausted\"));\n\n        case PCRE_ERROR_MATCHLIMIT:\n          error (EXIT_TROUBLE, 0,\n                 _(\"exceeded PCRE's backtracking limit\"));\n\n        default:\n          /* For now, we lump all remaining PCRE failures into this basket.\n             If anyone cares to provide sample grep usage that can trigger\n             particular PCRE errors, we can add to the list (above) of more\n             detailed diagnostics.  */\n          error (EXIT_TROUBLE, 0, _(\"internal PCRE error: %d\"), e);\n        }\n\n      return -1;\n    }\n  else\n    {\n      char const *matchbeg = p + sub[0];\n      char const *matchend = p + sub[1];\n      char const *beg;\n      char const *end;\n      if (start_ptr)\n        {\n          beg = matchbeg;\n          end = matchend;\n        }\n      else if (multiline)\n        {\n          char const *prev_nl = memrchr (line_start - 1, eolbyte,\n                                         matchbeg - (line_start - 1));\n          char const *next_nl = memchr (matchend, eolbyte,\n                                        line_end + 1 - matchend);\n          beg = prev_nl + 1;\n          end = next_nl + 1;\n        }\n      else\n        {\n          beg = line_start;\n          end = line_end + 1;\n        }\n      *match_size = end - beg;\n      return beg - buf;\n    }\n#endif\n}\n"
}