{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L1",
    "Message": "Offset: [10, +oo] (⇐ [1, +oo] + 9) Size: 9 by call to `_bfd_elf_define_linkage_sym`.",
    "Code_line": "  h = _bfd_elf_define_linkage_sym (abfd, info, s, \"_DYNAMIC\");",
    "Code_function": "_bfd_elf_link_create_dynamic_sections (bfd *abfd, struct bfd_link_info *info)\n{\n  flagword flags;\n  asection *s;\n  const struct elf_backend_data *bed;\n  struct elf_link_hash_entry *h;\n\n  if (! is_elf_hash_table (info->hash))\n    return FALSE;\n\n  if (elf_hash_table (info)->dynamic_sections_created)\n    return TRUE;\n\n  if (!_bfd_elf_link_create_dynstrtab (abfd, info))\n    return FALSE;\n\n  abfd = elf_hash_table (info)->dynobj;\n  bed = get_elf_backend_data (abfd);\n\n  flags = bed->dynamic_sec_flags;\n\n  /* A dynamically linked executable has a .interp section, but a\n     shared library does not.  */\n  if (info->executable)\n    {\n      s = bfd_make_section_anyway_with_flags (abfd, \".interp\",\n\t\t\t\t\t      flags | SEC_READONLY);\n      if (s == NULL)\n\treturn FALSE;\n    }\n\n  /* Create sections to hold version informations.  These are removed\n     if they are not needed.  */\n  s = bfd_make_section_anyway_with_flags (abfd, \".gnu.version_d\",\n\t\t\t\t\t  flags | SEC_READONLY);\n  if (s == NULL\n      || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))\n    return FALSE;\n\n  s = bfd_make_section_anyway_with_flags (abfd, \".gnu.version\",\n\t\t\t\t\t  flags | SEC_READONLY);\n  if (s == NULL\n      || ! bfd_set_section_alignment (abfd, s, 1))\n    return FALSE;\n\n  s = bfd_make_section_anyway_with_flags (abfd, \".gnu.version_r\",\n\t\t\t\t\t  flags | SEC_READONLY);\n  if (s == NULL\n      || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))\n    return FALSE;\n\n  s = bfd_make_section_anyway_with_flags (abfd, \".dynsym\",\n\t\t\t\t\t  flags | SEC_READONLY);\n  if (s == NULL\n      || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))\n    return FALSE;\n\n  s = bfd_make_section_anyway_with_flags (abfd, \".dynstr\",\n\t\t\t\t\t  flags | SEC_READONLY);\n  if (s == NULL)\n    return FALSE;\n\n  s = bfd_make_section_anyway_with_flags (abfd, \".dynamic\", flags);\n  if (s == NULL\n      || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))\n    return FALSE;\n\n  /* The special symbol _DYNAMIC is always set to the start of the\n     .dynamic section.  We could set _DYNAMIC in a linker script, but we\n     only want to define it if we are, in fact, creating a .dynamic\n     section.  We don't want to define it if there is no .dynamic\n     section, since on some ELF platforms the start up code examines it\n     to decide how to initialize the process.  */\n  h = _bfd_elf_define_linkage_sym (abfd, info, s, \"_DYNAMIC\");\n  elf_hash_table (info)->hdynamic = h;\n  if (h == NULL)\n    return FALSE;\n\n  if (info->emit_hash)\n    {\n      s = bfd_make_section_anyway_with_flags (abfd, \".hash\",\n\t\t\t\t\t      flags | SEC_READONLY);\n      if (s == NULL\n\t  || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))\n\treturn FALSE;\n      elf_section_data (s)->this_hdr.sh_entsize = bed->s->sizeof_hash_entry;\n    }\n\n  if (info->emit_gnu_hash)\n    {\n      s = bfd_make_section_anyway_with_flags (abfd, \".gnu.hash\",\n\t\t\t\t\t      flags | SEC_READONLY);\n      if (s == NULL\n\t  || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))\n\treturn FALSE;\n      /* For 64-bit ELF, .gnu.hash is a non-uniform entity size section:\n\t 4 32-bit words followed by variable count of 64-bit words, then\n\t variable count of 32-bit words.  */\n      if (bed->s->arch_size == 64)\n\telf_section_data (s)->this_hdr.sh_entsize = 0;\n      else\n\telf_section_data (s)->this_hdr.sh_entsize = 4;\n    }\n\n  /* Let the backend create the rest of the sections.  This lets the\n     backend set the right flags.  The backend will normally create\n     the .got and .plt sections.  */\n  if (bed->elf_backend_create_dynamic_sections == NULL\n      || ! (*bed->elf_backend_create_dynamic_sections) (abfd, info))\n    return FALSE;\n\n  elf_hash_table (info)->dynamic_sections_created = TRUE;\n\n  return TRUE;\n}"
}