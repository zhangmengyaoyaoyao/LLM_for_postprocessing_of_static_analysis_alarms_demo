{
    "Project": "gawk",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "io.c",
    "message": "Offset: [1, +oo] Size: [0, +oo] by call to `make_regexp`.",
    "warning_function_name": "set_RS",
    "warning_line": "RS_re_no_case = make_regexp(RS->stptr, RS->stlen, true, true, true);",
    "warning_context": "void\nset_RS()\n{\n\tstatic NODE *save_rs = NULL;\n\n\t/*\n\t * Don't use cmp_nodes(), which pays attention to IGNORECASE.\n\t */\n\tif (save_rs\n\t\t&& RS_node->var_value->stlen == save_rs->stlen\n\t\t&& memcmp(RS_node->var_value->stptr, save_rs->stptr, save_rs->stlen) == 0) {\n\t\t/*\n\t\t * It could be that just IGNORECASE changed.  If so,\n\t\t * update the regex and then do the same for FS.\n\t\t * set_IGNORECASE() relies on this routine to call\n\t\t * set_FS().\n\t\t */\n\t\tRS_regexp = (IGNORECASE ? RS_re_no_case : RS_re_yes_case);\n\t\tgoto set_FS;\n\t}\n\tunref(save_rs);\n\tsave_rs = dupnode(RS_node->var_value);\n\tRS_is_null = false;\n\tRS = force_string(RS_node->var_value);\n\t/*\n\t * used to be if (RS_regexp != NULL) { refree(..); refree(..); ...; }.\n\t * Please do not remerge the if condition; hinders memory deallocation\n\t * in case of fatal error in make_regexp.\n\t */\n\trefree(RS_re_yes_case);\t/* NULL argument is ok */\n\trefree(RS_re_no_case); \n\tRS_re_yes_case = RS_re_no_case = RS_regexp = NULL;\n\n\tif (RS->stlen == 0) {\n\t\tRS_is_null = true;\n\t\tmatchrec = rsnullscan;\n\t} else if (RS->stlen > 1) {\n\t\tstatic bool warned = false;\n\n\t\tRS_re_yes_case = make_regexp(RS->stptr, RS->stlen, false, true, true);\n\t\tRS_re_no_case = make_regexp(RS->stptr, RS->stlen, true, true, true);\n\t\tRS_regexp = (IGNORECASE ? RS_re_no_case : RS_re_yes_case);\n\n\t\tmatchrec = rsrescan;\n\n\t\tif (do_lint && ! warned) {\n\t\t\tlintwarn(_(\"multicharacter value of `RS' is a gawk extension\"));\n\t\t\twarned = true;\n\t\t}\n\t} else\n\t\tmatchrec = rs1scan;\nset_FS:\n\tif (current_field_sep() == Using_FS)\n\t\tset_FS();\n}\n"
}