{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "libiberty/cplus-dem.c",
    "message": "Offset added: [5, 10] Size: 6.",
    "warning_function_name": "ada_demangle",
    "warning_line": "memcpy (d, special[k][1], slen);",
    "warning_context": "              name = \"'Read\";\n              break;\n            case 'W':\n              name = \"'Write\";\n              break;\n            case 'I':\n              name = \"'Input\";\n              break;\n            case 'O':\n              name = \"'Output\";\n              break;\n            default:\n              goto unknown;\n            }\n          p += 2;\n          strcpy (d, name);\n          d += strlen (name);\n        }\n      else if (p[0] == 'D')\n        {\n          /* Controlled type operation.  */\n          const char *name;\n          switch (p[1])\n            {\n            case 'F':\n              name = \".Finalize\";\n              break;\n            case 'A':\n              name = \".Adjust\";\n              break;\n            default:\n              goto unknown;\n            }\n          strcpy (d, name);\n          d += strlen (name);\n          break;\n        }\n\n      if (p[0] == '_')\n        {\n          /* Separator.  */\n          if (p[1] == '_')\n            {\n              /* Standard separator.  Handled first.  */\n              p += 2;\n\n              if (ISDIGIT (*p))\n                {\n                  /* Overloading number.  */\n                  do\n                    p++;\n                  while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));\n                  if (*p == 'X')\n                    {\n                      p++;\n                      while (p[0] == 'n' || p[0] == 'b')\n                        p++;\n                    }\n                }\n              else if (p[0] == '_' && p[1] != '_')\n                {\n                  /* Special names.  */\n                  static const char * const special[][2] = {\n                    { \"_elabb\", \"'Elab_Body\" },\n                    { \"_elabs\", \"'Elab_Spec\" },\n                    { \"_size\", \"'Size\" },\n                    { \"_alignment\", \"'Alignment\" },\n                    { \"_assign\", \".\\\":=\\\"\" },\n                    { NULL, NULL }\n                  };\n                  int k;\n\n                  for (k = 0; special[k][0] != NULL; k++)\n                    {\n                      size_t slen = strlen (special[k][0]);\n                      if (strncmp (p, special[k][0], slen) == 0)\n                        {\n                          p += slen;\n                          slen = strlen (special[k][1]);\n                          memcpy (d, special[k][1], slen);\n                          d += slen;\n                          break;\n                        }\n                    }\n                  if (special[k][0] != NULL)\n                    break;\n                  else\n                    goto unknown;\n                }\n              else\n                {\n                  *d++ = '.';\n                  continue;\n                }\n            }\n          else if (p[1] == 'B' || p[1] == 'E')\n            {\n              /* Entry Body or barrier Evaluation.  */\n              p += 2;\n              while (ISDIGIT (*p))\n                p++;\n"
}