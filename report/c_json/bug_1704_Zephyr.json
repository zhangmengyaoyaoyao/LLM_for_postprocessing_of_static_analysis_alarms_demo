{
    "Project": "Zephyr",
    "Tool": "Infer",
    "Bug Type": "Uninitialized Value",
    "Message": "The value read from expr_copy was never initialized.",
    "Code_line": "\tZ_OOPS(Z_SYSCALL_VERIFY_MSG(z_obj_validation_check(stack_object, stack,",
    "Code_function": "k_tid_t z_vrfy_k_thread_create(struct k_thread *new_thread,\n\t\t\t       k_thread_stack_t *stack,\n\t\t\t       size_t stack_size, k_thread_entry_t entry,\n\t\t\t       void *p1, void *p2, void *p3,\n\t\t\t       int prio, u32_t options, s32_t delay)\n{\n\tu32_t total_size;\n\tstruct _k_object *stack_object;\n\n\t/* The thread and stack objects *must* be in an uninitialized state */\n\tZ_OOPS(Z_SYSCALL_OBJ_NEVER_INIT(new_thread, K_OBJ_THREAD));\n\tstack_object = z_object_find(stack);\n\tZ_OOPS(Z_SYSCALL_VERIFY_MSG(z_obj_validation_check(stack_object, stack,\n\t\t\t\t\t\tK_OBJ__THREAD_STACK_ELEMENT,\n\t\t\t\t\t\t_OBJ_INIT_FALSE) == 0,\n\t\t\t\t    \"bad stack object\"));\n\n\t/* Verify that the stack size passed in is OK by computing the total\n\t * size and comparing it with the size value in the object metadata\n\t */\n\tZ_OOPS(Z_SYSCALL_VERIFY_MSG(!u32_add_overflow(K_THREAD_STACK_RESERVED,\n\t\t\t\t\t\t      stack_size, &total_size),\n\t\t\t\t    \"stack size overflow (%u+%u)\",\n\t\t\t\t    (unsigned int) stack_size,\n\t\t\t\t    K_THREAD_STACK_RESERVED));\n\n\t/* Testing less-than-or-equal since additional room may have been\n\t * allocated for alignment constraints\n\t */\n\tZ_OOPS(Z_SYSCALL_VERIFY_MSG(total_size <= stack_object->data,\n\t\t\t\t    \"stack size %u is too big, max is %u\",\n\t\t\t\t    total_size, stack_object->data));\n\n\t/* User threads may only create other user threads and they can't\n\t * be marked as essential\n\t */\n\tZ_OOPS(Z_SYSCALL_VERIFY(options & K_USER));\n\tZ_OOPS(Z_SYSCALL_VERIFY(!(options & K_ESSENTIAL)));\n\n\t/* Check validity of prio argument; must be the same or worse priority\n\t * than the caller\n\t */\n\tZ_OOPS(Z_SYSCALL_VERIFY(_is_valid_prio(prio, NULL)));\n\tZ_OOPS(Z_SYSCALL_VERIFY(z_is_prio_lower_or_equal(prio,\n\t\t\t\t\t\t\t_current->base.prio)));\n\n\tz_setup_new_thread(new_thread, stack, stack_size,\n\t\t\t   entry, p1, p2, p3, prio, options, NULL);\n\n\tif (delay != K_FOREVER) {\n\t\tschedule_new_thread(new_thread, delay);\n\t}\n\n\treturn new_thread;\n}"
}