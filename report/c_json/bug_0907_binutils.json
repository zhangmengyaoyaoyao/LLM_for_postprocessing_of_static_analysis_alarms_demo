{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L1",
    "file": "binutils/ieee.c",
    "message": "Offset: [max(490, `info->vars.tail->c`), `info->vars.tail->c`] Size: 490 by call to `ieee_real_write_byte`.",
    "warning_function_name": "ieee_output_pending_parms",
    "warning_line": "|| ! ieee_write_byte (info, (int) ieee_nn_record)",
    "warning_context": "static bfd_boolean\nieee_output_pending_parms (struct ieee_handle *info)\n{\n  struct ieee_pending_parm *m;\n  unsigned int refcount;\n\n  refcount = 0;\n  for (m = info->pending_parms; m != NULL; m = m->next)\n    {\n      enum debug_var_kind vkind;\n\n      switch (m->kind)\n\t{\n\tdefault:\n\t  abort ();\n\t  return FALSE;\n\tcase DEBUG_PARM_STACK:\n\tcase DEBUG_PARM_REFERENCE:\n\t  vkind = DEBUG_LOCAL;\n\t  break;\n\tcase DEBUG_PARM_REG:\n\tcase DEBUG_PARM_REF_REG:\n\t  vkind = DEBUG_REGISTER;\n\t  break;\n\t}\n\n      if (! ieee_push_type (info, m->type, 0, FALSE, FALSE))\n\treturn FALSE;\n      info->type_stack->type.referencep = m->referencep;\n      if (m->referencep)\n\t++refcount;\n      if (! ieee_variable ((void *) info, m->name, vkind, m->val))\n\treturn FALSE;\n    }\n\n  /* If there are any reference parameters, we need to output a\n     miscellaneous record indicating them.  */\n  if (refcount > 0)\n    {\n      unsigned int nindx, varindx;\n\n      /* FIXME: The MRI compiler outputs the demangled function name\n         here, but we are outputting the mangled name.  */\n      nindx = info->name_indx;\n      ++info->name_indx;\n      if (! ieee_change_buffer (info, &info->vars)\n\t  || ! ieee_write_byte (info, (int) ieee_nn_record)\n\t  || ! ieee_write_number (info, nindx)\n\t  || ! ieee_write_id (info, \"\")\n\t  || ! ieee_write_2bytes (info, (int) ieee_atn_record_enum)\n\t  || ! ieee_write_number (info, nindx)\n\t  || ! ieee_write_number (info, 0)\n\t  || ! ieee_write_number (info, 62)\n\t  || ! ieee_write_number (info, 80)\n\t  || ! ieee_write_number (info, refcount + 3)\n\t  || ! ieee_write_asn (info, nindx, 'B')\n\t  || ! ieee_write_atn65 (info, nindx, info->fnname)\n\t  || ! ieee_write_asn (info, nindx, 0))\n\treturn FALSE;\n      for (m = info->pending_parms, varindx = 1;\n\t   m != NULL;\n\t   m = m->next, varindx++)\n\t{\n\t  if (m->referencep)\n\t    {\n\t      if (! ieee_write_asn (info, nindx, varindx))\n\t\treturn FALSE;\n\t    }\n\t}\n    }\n\n  m = info->pending_parms;\n  while (m != NULL)\n    {\n      struct ieee_pending_parm *next;\n\n      next = m->next;\n      free (m);\n      m = next;\n    }\n\n  info->pending_parms = NULL;\n\n  return TRUE;\n}\n"
}