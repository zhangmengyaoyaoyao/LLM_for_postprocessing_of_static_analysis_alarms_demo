{
    "Project": "bash",
    "Tool": "Infer",
    "Bug Type": "NULL_DEREFERENCE",
    "Message": "pointer `nval` last assigned on line 379 could be null and is dereferenced at line 395, column 4.",
    "Code_line": "\t  nval[0] = '@';",
    "Code_function": "enable_hostname_completion (on_or_off)\n     int on_or_off;\n{\n  int old_value;\n  char *at, *nv, *nval;\n\n  old_value = perform_hostname_completion;\n\n  if (on_or_off)\n    {\n      perform_hostname_completion = 1;\n      rl_special_prefixes = \"$@\";\n    }\n  else\n    {\n      perform_hostname_completion = 0;\n      rl_special_prefixes = \"$\";\n    }\n\n  /* Now we need to figure out how to appropriately modify and assign\n     rl_completer_word_break_characters depending on whether we want\n     hostname completion on or off. */\n\n  /* If this is the first time this has been called\n     (bash_readline_initialized == 0), use the sames values as before, but\n     allocate new memory for rl_completer_word_break_characters. */\n\n  if (bash_readline_initialized == 0 &&\n      (rl_completer_word_break_characters == 0 ||\n       rl_completer_word_break_characters == rl_basic_word_break_characters))\n    {\n      if (on_or_off)\n\trl_completer_word_break_characters = savestring (bash_completer_word_break_characters);\n      else\n\trl_completer_word_break_characters = savestring (bash_nohostname_word_break_characters);\n    }\n  else\n    {\n      /* See if we have anything to do. */\n      at = strchr (rl_completer_word_break_characters, '@');\n      if ((at == 0 && on_or_off == 0) || (at != 0 && on_or_off != 0))\n        return old_value;\n\n      /* We have something to do.  Do it. */\n      nval = (char *)xmalloc (strlen (rl_completer_word_break_characters) + 1 + on_or_off);\n\n      if (on_or_off == 0)\n\t{\n\t  /* Turn it off -- just remove `@' from word break chars.  We want\n\t     to remove all occurrences of `@' from the char list, so we loop\n\t     rather than just copy the rest of the list over AT. */\n\t  for (nv = nval, at = rl_completer_word_break_characters; *at; )\n\t    if (*at != '@')\n\t      *nv++ = *at++;\n\t    else\n\t      at++;\n\t  *nv = '\\0';\n\t}\n      else\n\t{\n\t  nval[0] = '@';\n\t  strcpy (nval + 1, rl_completer_word_break_characters);\n        }\n\n      free (rl_completer_word_break_characters);\n      rl_completer_word_break_characters = nval;\n    }\n\n  return (old_value);\n}"
}