{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/coffgen.c",
    "message": "Offset added: [-26, 60] (⇐ [-29, 52] + [3, 8]) Size: 4064.",
    "warning_function_name": "coff_get_normalized_symtab",
    "warning_line": "strncpy (newstring, internal_ptr->u.syment._n._n_name, i);",
    "warning_context": "\t  internal_ptr->is_sym = FALSE;\n\t  coff_pointerize_aux (abfd, internal, symbol_ptr, i,\n\t\t\t       internal_ptr);\n\t}\n    }\n\n  /* Free the raw symbols, but not the strings (if we have them).  */\n  obj_coff_keep_strings (abfd) = TRUE;\n  if (! _bfd_coff_free_symbols (abfd))\n    return NULL;\n\n  for (internal_ptr = internal; internal_ptr < internal_end;\n       internal_ptr++)\n    {\n      BFD_ASSERT (internal_ptr->is_sym);\n\n      if (internal_ptr->u.syment.n_sclass == C_FILE\n\t  && internal_ptr->u.syment.n_numaux > 0)\n\t{\n\t  combined_entry_type * aux = internal_ptr + 1;\n\n\t  /* Make a file symbol point to the name in the auxent, since\n\t     the text \".file\" is redundant.  */\n\t  BFD_ASSERT (! aux->is_sym);\n\n\t  if (aux->u.auxent.x_file.x_n.x_zeroes == 0)\n\t    {\n\t      /* The filename is a long one, point into the string table.  */\n\t      if (string_table == NULL)\n\t\t{\n\t\t  string_table = _bfd_coff_read_string_table (abfd);\n\t\t  if (string_table == NULL)\n\t\t    return NULL;\n\t\t}\n\n\t      if ((bfd_size_type)(aux->u.auxent.x_file.x_n.x_offset)\n\t\t  >= obj_coff_strings_len (abfd))\n\t\tinternal_ptr->u.syment._n._n_n._n_offset = (bfd_hostptr_t) _(\"<corrupt>\");\n\t      else\n\t\tinternal_ptr->u.syment._n._n_n._n_offset =\n\t\t  (bfd_hostptr_t) (string_table + (aux->u.auxent.x_file.x_n.x_offset));\n\t    }\n\t  else\n\t    {\n\t      /* Ordinary short filename, put into memory anyway.  The\n                 Microsoft PE tools sometimes store a filename in\n                 multiple AUX entries.  */\n\t      if (internal_ptr->u.syment.n_numaux > 1\n\t\t  && coff_data (abfd)->pe)\n\t\tinternal_ptr->u.syment._n._n_n._n_offset =\n\t\t  (bfd_hostptr_t)\n\t\t  copy_name (abfd,\n\t\t\t     aux->u.auxent.x_file.x_fname,\n\t\t\t     internal_ptr->u.syment.n_numaux * symesz);\n\t      else\n\t\tinternal_ptr->u.syment._n._n_n._n_offset =\n\t\t  ((bfd_hostptr_t)\n\t\t   copy_name (abfd,\n\t\t\t      aux->u.auxent.x_file.x_fname,\n\t\t\t      (size_t) bfd_coff_filnmlen (abfd)));\n\t    }\n\t}\n      else\n\t{\n\t  if (internal_ptr->u.syment._n._n_n._n_zeroes != 0)\n\t    {\n\t      /* This is a \"short\" name.  Make it long.  */\n\t      size_t i;\n\t      char *newstring;\n\n\t      /* Find the length of this string without walking into memory\n\t         that isn't ours.  */\n\t      for (i = 0; i < 8; ++i)\n\t\tif (internal_ptr->u.syment._n._n_name[i] == '\\0')\n\t\t  break;\n\n\t      newstring = (char *) bfd_zalloc (abfd, (bfd_size_type) (i + 1));\n\t      if (newstring == NULL)\n\t\treturn NULL;\n\t      strncpy (newstring, internal_ptr->u.syment._n._n_name, i);\n\t      internal_ptr->u.syment._n._n_n._n_offset = (bfd_hostptr_t) newstring;\n\t      internal_ptr->u.syment._n._n_n._n_zeroes = 0;\n\t    }\n\t  else if (internal_ptr->u.syment._n._n_n._n_offset == 0)\n\t    internal_ptr->u.syment._n._n_n._n_offset = (bfd_hostptr_t) \"\";\n\t  else if (!bfd_coff_symname_in_debug (abfd, &internal_ptr->u.syment))\n\t    {\n\t      /* Long name already.  Point symbol at the string in the\n                 table.  */\n\t      if (string_table == NULL)\n\t\t{\n\t\t  string_table = _bfd_coff_read_string_table (abfd);\n\t\t  if (string_table == NULL)\n\t\t    return NULL;\n\t\t}\n\t      if (internal_ptr->u.syment._n._n_n._n_offset >= obj_coff_strings_len (abfd)\n\t\t  || string_table + internal_ptr->u.syment._n._n_n._n_offset < string_table)\n\t\tinternal_ptr->u.syment._n._n_n._n_offset = (bfd_hostptr_t) _(\"<corrupt>\");\n\t      else\n\t\tinternal_ptr->u.syment._n._n_n._n_offset =\n\t\t  ((bfd_hostptr_t)\n"
}