{
    "project": "bash",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "lib/readline/display.c",
    "message": "The value read from wc_width was never initialized.",
    "warning_function_name": NaN,
    "warning_line": "if (_rl_screenwidth < lpos + wc_width)",
    "warning_context": "      if (META_CHAR (c) && _rl_output_meta_chars == 0)\t/* XXX - clean up */\n#else\n      if (META_CHAR (c))\n#endif\n\t{\n\t  if (_rl_output_meta_chars == 0)\n\t    {\n\t      sprintf (line + out, \"\\\\%o\", c);\n\n\t      if (lpos + 4 >= _rl_screenwidth)\n\t\t{\n\t\t  temp = _rl_screenwidth - lpos;\n\t\t  CHECK_INV_LBREAKS ();\n\t\t  inv_lbreaks[++newlines] = out + temp;\n\t\t  lpos = 4 - temp;\n\t\t}\n\t      else\n\t\tlpos += 4;\n\n\t      out += 4;\n\t    }\n\t  else\n\t    {\n\t      line[out++] = c;\n\t      CHECK_LPOS();\n\t    }\n\t}\n#if defined (DISPLAY_TABS)\n      else if (c == '\\t')\n\t{\n\t  register int newout;\n\n#if 0\n\t  newout = (out | (int)7) + 1;\n#else\n\t  newout = out + 8 - lpos % 8;\n#endif\n\t  temp = newout - out;\n\t  if (lpos + temp >= _rl_screenwidth)\n\t    {\n\t      register int temp2;\n\t      temp2 = _rl_screenwidth - lpos;\n\t      CHECK_INV_LBREAKS ();\n\t      inv_lbreaks[++newlines] = out + temp2;\n\t      lpos = temp - temp2;\n\t      while (out < newout)\n\t\tline[out++] = ' ';\n\t    }\n\t  else\n\t    {\n\t      while (out < newout)\n\t\tline[out++] = ' ';\n\t      lpos += temp;\n\t    }\n\t}\n#endif\n      else if (c == '\\n' && _rl_horizontal_scroll_mode == 0 && _rl_term_up && *_rl_term_up)\n\t{\n\t  line[out++] = '\\0';\t/* XXX - sentinel */\n\t  CHECK_INV_LBREAKS ();\n\t  inv_lbreaks[++newlines] = out;\n\t  lpos = 0;\n\t}\n      else if (CTRL_CHAR (c) || c == RUBOUT)\n\t{\n\t  line[out++] = '^';\n\t  CHECK_LPOS();\n\t  line[out++] = CTRL_CHAR (c) ? UNCTRL (c) : '?';\n\t  CHECK_LPOS();\n\t}\n      else\n\t{\n#if defined (HANDLE_MULTIBYTE)\n\t  if (MB_CUR_MAX > 1 && rl_byte_oriented == 0)\n\t    {\n\t      register int i;\n\n\t      _rl_wrapped_multicolumn = 0;\n\n\t      if (_rl_screenwidth < lpos + wc_width)\n\t\tfor (i = lpos; i < _rl_screenwidth; i++)\n\t\t  {\n\t\t    /* The space will be removed in update_line() */\n\t\t    line[out++] = ' ';\n\t\t    _rl_wrapped_multicolumn++;\n\t\t    CHECK_LPOS();\n\t\t  }\n\t      if (in == rl_point)\n\t\t{\n\t\t  cpos_buffer_position = out;\n\t\t  lb_linenum = newlines;\n\t\t}\n\t      for (i = in; i < in+wc_bytes; i++)\n\t\tline[out++] = rl_line_buffer[i];\n\t      for (i = 0; i < wc_width; i++)\n\t\tCHECK_LPOS();\n\t    }\n\t  else\n\t    {\n\t      line[out++] = c;\n\t      CHECK_LPOS();\n"
}