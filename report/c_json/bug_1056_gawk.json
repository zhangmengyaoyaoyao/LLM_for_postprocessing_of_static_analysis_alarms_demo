{
    "project": "gawk",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "interpret.h",
    "message": "Offset added: [1, +oo] Size: [0, +oo] by call to `array_vname`.",
    "warning_function_name": "r_interpret",
    "warning_line": "array_vname(save_symbol));",
    "warning_context": "\t\t\t * However, we do want to exit non-zero if there was a problem\n\t\t\t * with stdout/stderr, so we reinstate a slightly different\n\t\t\t * version of the above:\n\t\t\t */\n\t\t\tif (stdio_problem && ! exiting && exit_val == 0)\n\t\t\t\texit_val = 1;\n\n\t\t\tclose_extensions();\n\t\t}\n\t\t\tbreak;\n\n\t\tcase Op_stop:\n\t\t\treturn 0;\n\n\t\tcase Op_push_i:\n\t\t\tm = pc->memory;\n\t\t\tif (! do_traditional && (m->flags & INTLSTR) != 0) {\n\t\t\t\tchar *orig, *trans, save;\n\n\t\t\t\tsave = m->stptr[m->stlen];\n\t\t\t\tm->stptr[m->stlen] = '\\0';\n\t\t\t\torig = m->stptr;\n\t\t\t\ttrans = dgettext(TEXTDOMAIN, orig);\n\t\t\t\tm->stptr[m->stlen] = save;\n\t\t\t\tm = make_string(trans, strlen(trans));\n\t\t\t} else\n\t\t\t\tUPREF(m);\n\t\t\tPUSH(m);\n\t\t\tbreak;\n\n\t\tcase Op_push:\n\t\tcase Op_push_arg:\n\t\t{\n\t\t\tNODE *save_symbol;\n\t\t\tbool isparam = false;\n\n\t\t\tsave_symbol = m = pc->memory;\n\t\t\tif (m->type == Node_param_list) {\n\t\t\t\tisparam = true;\n\t\t\t\tsave_symbol = m = GET_PARAM(m->param_cnt);\n\t\t\t\tif (m->type == Node_array_ref) {\n\t\t\t\t\tif (m->orig_array->type == Node_var) {\n\t\t\t\t\t\t/* gawk 'func f(x) { a = 10; print x; } BEGIN{ f(a) }' */\n\t\t\t\t\t\tgoto uninitialized_scalar;\n\t\t\t\t\t}\n\t\t\t\t\tm = m->orig_array;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\tswitch (m->type) {\n\t\t\tcase Node_var:\n\t\t\t\tif (do_lint && var_uninitialized(m))\n\t\t\t\t\tlintwarn(isparam ?\n\t\t\t\t\t\t_(\"reference to uninitialized argument `%s'\") :\n\t\t\t\t\t\t_(\"reference to uninitialized variable `%s'\"),\n\t\t\t\t\t\t\t\tsave_symbol->vname);\n\t\t\t\tm = m->var_value;\n\t\t\t\tUPREF(m);\n\t\t\t\tPUSH(m);\n\t\t\t\tbreak;\n\n\t\t\tcase Node_var_new:\nuninitialized_scalar:\n\t\t\t\tm->type = Node_var;\n\t\t\t\tm->var_value = dupnode(Nnull_string);\n\t\t\t\tif (do_lint)\n\t\t\t\t\tlintwarn(isparam ?\n\t\t\t\t\t\t_(\"reference to uninitialized argument `%s'\") :\n\t\t\t\t\t\t_(\"reference to uninitialized variable `%s'\"),\n\t\t\t\t\t\t\t\tsave_symbol->vname);\n\t\t\t\tm = dupnode(Nnull_string);\n\t\t\t\tPUSH(m);\n\t\t\t\tbreak;\n\n\t\t\tcase Node_var_array:\n\t\t\t\tif (op == Op_push_arg)\n\t\t\t\t\tPUSH(m);\n\t\t\t\telse\n\t\t\t\t\tfatal(_(\"attempt to use array `%s' in a scalar context\"),\n\t\t\t\t\t\t\tarray_vname(save_symbol));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tcant_happen();\n\t\t\t}\n\t\t}\n\t\t\tbreak;\t\n\n\t\tcase Op_push_param:\t\t/* function argument */\n\t\t\tm = pc->memory;\n\t\t\tif (m->type == Node_param_list)\n\t\t\t\tm = GET_PARAM(m->param_cnt);\n\t\t\tif (m->type == Node_var) {\n\t\t\t\tm = m->var_value;\n\t\t\t\tUPREF(m);\n\t\t\t\tPUSH(m);\n\t\t \t\tbreak;\n\t\t\t}\n \t\t\t/* else\n\t\t\t\tfall through */\n\t\tcase Op_push_array:\n"
}