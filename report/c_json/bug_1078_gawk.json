{
    "Project": "gawk",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "profile.c",
    "message": "Offset: [1, +oo] Size: [0, +oo] by call to `pp_list`.",
    "warning_function_name": "pprint",
    "warning_line": "sub = pp_list(pc->expr_count, NULL, pc->expr_count > 1 ? \"][\" : \", \");",
    "warning_context": "\t\tcase Op_greater:\n\t\tcase Op_leq:\n\t\tcase Op_geq:\n\t\t\tt2 = pp_pop();\n\t\t\tt1 = pp_pop();\n\t\t\tparenthesize(pc->opcode, t1, t2);\n\t\t\tstr = pp_group3(t1->pp_str, op2str(pc->opcode), t2->pp_str);\n\t\t\tpp_free(t1);\n\t\t\tpp_free(t2);\n\t\t\tpp_push(pc->opcode, str, CAN_FREE);\n\t\t\tbreak;\n\n\t\tcase Op_preincrement:\n\t\tcase Op_predecrement:\n\t\tcase Op_postincrement:\n\t\tcase Op_postdecrement:\n\t\t\tt1 = pp_pop();\n\t\t\tif (pc->opcode == Op_preincrement || pc->opcode == Op_predecrement)\n\t\t\t\tstr = pp_group3(op2str(pc->opcode), t1->pp_str, \"\");\n\t\t\telse\n\t\t\t\tstr = pp_group3(t1->pp_str, op2str(pc->opcode), \"\");\n\t\t\tpp_free(t1);\n\t\t\tpp_push(pc->opcode, str, CAN_FREE);\n\t\t\tbreak;\n\n\t\tcase Op_field_spec:\n\t\tcase Op_field_spec_lhs:\n\t\tcase Op_unary_minus:\n\t\tcase Op_not:\n\t\t\tt1 = pp_pop();\n\t\t\tif (is_binary(t1->type)\n\t\t\t    || (((OPCODE) t1->type) == pc->opcode && pc->opcode == Op_unary_minus))\n\t\t\t\tpp_parenthesize(t1);\n\n\t\t\t/* optypes table (eval.c) includes space after ! */\n\t\t\tstr = pp_group3(op2str(pc->opcode), t1->pp_str, \"\");\n\t\t\tpp_free(t1);\n\t\t\tpp_push(pc->opcode, str, CAN_FREE);\n\t\t\tbreak;\n\n\t\tcase Op_assign:\n\t\tcase Op_assign_plus:\n\t\tcase Op_assign_minus:\n\t\tcase Op_assign_times:\n\t\tcase Op_assign_quotient:\n\t\tcase Op_assign_mod:\n\t\tcase Op_assign_exp:\n\t\t\tt2 = pp_pop(); /* l.h.s. */\n\t\t\tt1 = pp_pop();\n\t\t\tstr = pp_group3(t2->pp_str, op2str(pc->opcode), t1->pp_str);\n\t\t\tpp_free(t2);\n\t\t\tpp_free(t1);\n\t\t\tpp_push(pc->opcode, str, CAN_FREE);\n\t\t\tbreak;\n\n\t\tcase Op_store_field:\n\t\t\tt1 = pp_pop(); /* field num */\n\t\t\tif (is_binary(t1->type))\n\t\t\t\tpp_parenthesize(t1);\n\t\t\tt2 = pp_pop(); /* r.h.s. */\n\t\t\tfprintf(prof_fp, \"$%s%s%s\", t1->pp_str, op2str(pc->opcode), t2->pp_str);\n\t\t\tpp_free(t2);\n\t\t\tpp_free(t1);\n\t\t\tif (! in_for_header)\n\t\t\t\tfprintf(prof_fp, \"\\n\");\n\t\t\tbreak; \n\n\t\tcase Op_concat:\n\t\t\tstr = pp_concat(pc->expr_count);\n\t\t\tpp_push(Op_concat, str, CAN_FREE);\n\t\t\tbreak;\n\n\t\tcase Op_K_delete:\n\t\t{\n\t\t\tchar *array;\n\t\t\tt1 = pp_pop();\n\t\t\tarray = t1->pp_str;\n\t\t\tif (pc->expr_count > 0) {\n\t\t\t\tchar *sub;\n\t\t\t\tsub = pp_list(pc->expr_count, NULL, pc->expr_count > 1 ? \"][\" : \", \");\n\t\t\t\tfprintf(prof_fp, \"%s %s[%s]\", op2str(Op_K_delete), array, sub);\n\t\t\t\tefree(sub);\n\t\t\t} else \t\t\t\t\n\t\t\t\tfprintf(prof_fp, \"%s %s\", op2str(Op_K_delete), array);\n\t\t\tif (! in_for_header)\n\t\t\t\tfprintf(prof_fp, \"\\n\");\n\t\t\tpp_free(t1);\n\t\t}\n\t\t\tbreak;\n\n\t\tcase Op_K_delete_loop:\n\t\t\t/* Efficency hack not in effect because of exec_count instruction */\n\t\t\tcant_happen();\n\t\t\tbreak;\n\t\t\n\t\tcase Op_in_array:\n\t\t{\n\t\t\tchar *array, *sub;\n\t\t\tt1 = pp_pop();\n\t\t\tarray = t1->pp_str;\n\t\t\tif (pc->expr_count > 1) {\n"
}