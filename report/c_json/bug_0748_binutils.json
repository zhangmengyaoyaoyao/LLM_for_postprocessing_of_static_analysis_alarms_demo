{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/dwarf2.c",
    "message": "Offset: [-1, +oo] Size: [120, +oo] by call to `concat_filename`.",
    "warning_function_name": "decode_line_info",
    "warning_line": "filename = concat_filename (table, file);",
    "warning_context": "\t\t    {\n\t\t      struct fileinfo *tmp;\n\n\t\t      amt = table->num_files + FILE_ALLOC_CHUNK;\n\t\t      amt *= sizeof (struct fileinfo);\n\t\t      tmp = (struct fileinfo *) bfd_realloc (table->files, amt);\n\t\t      if (tmp == NULL)\n\t\t\tgoto line_fail;\n\t\t      table->files = tmp;\n\t\t    }\n\t\t  table->files[table->num_files].name = cur_file;\n\t\t  table->files[table->num_files].dir =\n\t\t    safe_read_leb128 (abfd, line_ptr, &bytes_read, FALSE, line_end);\n\t\t  line_ptr += bytes_read;\n\t\t  table->files[table->num_files].time =\n\t\t    safe_read_leb128 (abfd, line_ptr, &bytes_read, FALSE, line_end);\n\t\t  line_ptr += bytes_read;\n\t\t  table->files[table->num_files].size =\n\t\t    safe_read_leb128 (abfd, line_ptr, &bytes_read, FALSE, line_end);\n\t\t  line_ptr += bytes_read;\n\t\t  table->num_files++;\n\t\t  break;\n\t\tcase DW_LNE_set_discriminator:\n\t\t  discriminator =\n\t\t    safe_read_leb128 (abfd, line_ptr, &bytes_read, FALSE, line_end);\n\t\t  line_ptr += bytes_read;\n\t\t  break;\n\t\tcase DW_LNE_HP_source_file_correlation:\n\t\t  line_ptr += exop_len - 1;\n\t\t  break;\n\t\tdefault:\n\t\t  (*_bfd_error_handler)\n\t\t    (_(\"Dwarf Error: mangled line number section.\"));\n\t\t  bfd_set_error (bfd_error_bad_value);\n\t\tline_fail:\n\t\t  if (filename != NULL)\n\t\t    free (filename);\n\t\t  goto fail;\n\t\t}\n\t      break;\n\t    case DW_LNS_copy:\n\t      if (!add_line_info (table, address, op_index,\n\t\t\t\t  filename, line, column, discriminator, 0))\n\t\tgoto line_fail;\n\t      discriminator = 0;\n\t      if (address < low_pc)\n\t\tlow_pc = address;\n\t      if (address > high_pc)\n\t\thigh_pc = address;\n\t      break;\n\t    case DW_LNS_advance_pc:\n\t      if (lh.maximum_ops_per_insn == 1)\n\t\taddress += (lh.minimum_instruction_length\n\t\t\t    * safe_read_leb128 (abfd, line_ptr, &bytes_read,\n\t\t\t\t\t\tFALSE, line_end));\n\t      else\n\t\t{\n\t\t  bfd_vma adjust = safe_read_leb128 (abfd, line_ptr, &bytes_read,\n\t\t\t\t\t\t     FALSE, line_end);\n\t\t  address = ((op_index + adjust) / lh.maximum_ops_per_insn\n\t\t\t     * lh.minimum_instruction_length);\n\t\t  op_index = (op_index + adjust) % lh.maximum_ops_per_insn;\n\t\t}\n\t      line_ptr += bytes_read;\n\t      break;\n\t    case DW_LNS_advance_line:\n\t      line += safe_read_leb128 (abfd, line_ptr, &bytes_read, TRUE, line_end);\n\t      line_ptr += bytes_read;\n\t      break;\n\t    case DW_LNS_set_file:\n\t      {\n\t\tunsigned int file;\n\n\t\t/* The file and directory tables are 0\n\t\t   based, the references are 1 based.  */\n\t\tfile = safe_read_leb128 (abfd, line_ptr, &bytes_read, FALSE, line_end);\n\t\tline_ptr += bytes_read;\n\t\tif (filename)\n\t\t  free (filename);\n\t\tfilename = concat_filename (table, file);\n\t\tbreak;\n\t      }\n\t    case DW_LNS_set_column:\n\t      column = safe_read_leb128 (abfd, line_ptr, &bytes_read, FALSE, line_end);\n\t      line_ptr += bytes_read;\n\t      break;\n\t    case DW_LNS_negate_stmt:\n\t      is_stmt = (!is_stmt);\n\t      break;\n\t    case DW_LNS_set_basic_block:\n\t      break;\n\t    case DW_LNS_const_add_pc:\n\t      if (lh.maximum_ops_per_insn == 1)\n\t\taddress += (lh.minimum_instruction_length\n\t\t\t    * ((255 - lh.opcode_base) / lh.line_range));\n\t      else\n\t\t{\n\t\t  bfd_vma adjust = ((255 - lh.opcode_base) / lh.line_range);\n\t\t  address += (lh.minimum_instruction_length\n\t\t\t      * ((op_index + adjust)\n\t\t\t\t / lh.maximum_ops_per_insn));\n"
}