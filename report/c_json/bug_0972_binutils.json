{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "NULL_DEREFERENCE",
    "Code_line": "\t      void **loc = htab_find_slot ((htab_t) head->htab, e, INSERT);",
    "Code_function": "lang_finalize_version_expr_head (struct bfd_elf_version_expr_head *head)\n{\n  size_t count = 0;\n  struct bfd_elf_version_expr *e, *next;\n  struct bfd_elf_version_expr **list_loc, **remaining_loc;\n\n  for (e = head->list; e; e = e->next)\n    {\n      if (e->literal)\n\tcount++;\n      head->mask |= e->mask;\n    }\n\n  if (count)\n    {\n      head->htab = htab_create (count * 2, version_expr_head_hash,\n\t\t\t\tversion_expr_head_eq, NULL);\n      list_loc = &head->list;\n      remaining_loc = &head->remaining;\n      for (e = head->list; e; e = next)\n\t{\n\t  next = e->next;\n\t  if (!e->literal)\n\t    {\n\t      *remaining_loc = e;\n\t      remaining_loc = &e->next;\n\t    }\n\t  else\n\t    {\n\t      void **loc = htab_find_slot ((htab_t) head->htab, e, INSERT);\n\n\t      if (*loc)\n\t\t{\n\t\t  struct bfd_elf_version_expr *e1, *last;\n\n\t\t  e1 = (struct bfd_elf_version_expr *) *loc;\n\t\t  last = NULL;\n\t\t  do\n\t\t    {\n\t\t      if (e1->mask == e->mask)\n\t\t\t{\n\t\t\t  last = NULL;\n\t\t\t  break;\n\t\t\t}\n\t\t      last = e1;\n\t\t      e1 = e1->next;\n\t\t    }\n\t\t  while (e1 && strcmp (e1->pattern, e->pattern) == 0);\n\n\t\t  if (last == NULL)\n\t\t    {\n\t\t      /* This is a duplicate.  */\n\t\t      /* FIXME: Memory leak.  Sometimes pattern is not\n\t\t\t xmalloced alone, but in larger chunk of memory.  */\n\t\t      /* free (e->pattern); */\n\t\t      free (e);\n\t\t    }\n\t\t  else\n\t\t    {\n\t\t      e->next = last->next;\n\t\t      last->next = e;\n\t\t    }\n\t\t}\n\t      else\n\t\t{\n\t\t  *loc = e;\n\t\t  *list_loc = e;\n\t\t  list_loc = &e->next;\n\t\t}\n\t    }\n\t}\n      *remaining_loc = NULL;\n      *list_loc = head->remaining;\n    }\n  else\n    head->remaining = head->list;\n}"
}