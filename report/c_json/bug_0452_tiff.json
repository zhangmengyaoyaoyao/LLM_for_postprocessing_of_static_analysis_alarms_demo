{
    "Project": "tiff",
    "Tool": "Infer",
    "Bug Type": "NULL_DEREFERENCE",
    "Message": "pointer `tbc` last assigned on line 1934 could be null and is dereferenced at line 1958, column 6.",
    "Code_line": "\t\t\tk=tbc[tile];",
    "Code_function": "void t2p_read_tiff_size_tile(T2P*, TIFF*, ttile_t);\nint t2p_tile_is_right_edge(T2P_TILES, ttile_t);\nint t2p_tile_is_bottom_edge(T2P_TILES, ttile_t);\nint t2p_tile_is_edge(T2P_TILES, ttile_t);\nint t2p_tile_is_corner_edge(T2P_TILES, ttile_t);\ntsize_t t2p_readwrite_pdf_image(T2P*, TIFF*, TIFF*);\ntsize_t t2p_readwrite_pdf_image_tile(T2P*, TIFF*, TIFF*, ttile_t);\n#ifdef OJPEG_SUPPORT\nint t2p_process_ojpeg_tables(T2P*, TIFF*);\n#endif\n#ifdef JPEG_SUPPORT\nint t2p_process_jpeg_strip(unsigned char*, tsize_t*, unsigned char*, tsize_t*, tstrip_t, uint32);\n#endif\nvoid t2p_tile_collapse_left(tdata_t, tsize_t, uint32, uint32, uint32);\nvoid t2p_write_advance_directory(T2P*, TIFF*);\ntsize_t t2p_sample_planar_separate_to_contig(T2P*, unsigned char*, unsigned char*, tsize_t);\ntsize_t t2p_sample_realize_palette(T2P*, unsigned char*);\ntsize_t t2p_sample_abgr_to_rgb(tdata_t, uint32);\ntsize_t t2p_sample_rgba_to_rgb(tdata_t, uint32);\ntsize_t t2p_sample_rgbaa_to_rgb(tdata_t, uint32);\ntsize_t t2p_sample_lab_signed_to_unsigned(tdata_t, uint32);\ntsize_t t2p_write_pdf_header(T2P*, TIFF*);\ntsize_t t2p_write_pdf_obj_start(uint32, TIFF*);\ntsize_t t2p_write_pdf_obj_end(TIFF*);\ntsize_t t2p_write_pdf_name(unsigned char*, TIFF*);\ntsize_t t2p_write_pdf_string(char*, TIFF*);\ntsize_t t2p_write_pdf_stream(tdata_t, tsize_t, TIFF*);\ntsize_t t2p_write_pdf_stream_start(TIFF*);\ntsize_t t2p_write_pdf_stream_end(TIFF*);\ntsize_t t2p_write_pdf_stream_dict(tsize_t, uint32, TIFF*);\ntsize_t t2p_write_pdf_stream_dict_start(TIFF*);\ntsize_t t2p_write_pdf_stream_dict_end(TIFF*);\ntsize_t t2p_write_pdf_stream_length(tsize_t, TIFF*);\ntsize_t t2p_write_pdf_catalog(T2P*, TIFF*);\ntsize_t t2p_write_pdf_info(T2P*, TIFF*, TIFF*);\nvoid t2p_pdf_currenttime(T2P*);\nvoid t2p_pdf_tifftime(T2P*, TIFF*);\ntsize_t t2p_write_pdf_pages(T2P*, TIFF*);\ntsize_t t2p_write_pdf_page(uint32, T2P*, TIFF*);\nvoid t2p_compose_pdf_page(T2P*);\nvoid t2p_compose_pdf_page_orient(T2P_BOX*, uint16);\nvoid t2p_compose_pdf_page_orient_flip(T2P_BOX*, uint16);\ntsize_t t2p_write_pdf_page_content(T2P*, TIFF*);\ntsize_t t2p_write_pdf_xobject_stream_dict(ttile_t, T2P*, TIFF*);\ntsize_t t2p_write_pdf_xobject_cs(T2P*, TIFF*);\ntsize_t t2p_write_pdf_transfer(T2P*, TIFF*);\ntsize_t t2p_write_pdf_transfer_dict(T2P*, TIFF*, uint16);\ntsize_t t2p_write_pdf_transfer_stream(T2P*, TIFF*, uint16);\ntsize_t t2p_write_pdf_xobject_calcs(T2P*, TIFF*);\ntsize_t t2p_write_pdf_xobject_icccs(T2P*, TIFF*);\ntsize_t t2p_write_pdf_xobject_icccs_dict(T2P*, TIFF*);\ntsize_t t2p_write_pdf_xobject_icccs_stream(T2P*, TIFF*);\ntsize_t t2p_write_pdf_xobject_cs_stream(T2P*, TIFF*);\ntsize_t t2p_write_pdf_xobject_decode(T2P*, TIFF*);\ntsize_t t2p_write_pdf_xobject_stream_filter(ttile_t, T2P*, TIFF*);\ntsize_t t2p_write_pdf_xreftable(T2P*, TIFF*);\ntsize_t t2p_write_pdf_trailer(T2P*, TIFF*);\n\nstatic void\nt2p_disable(TIFF *tif)\n{\n\tT2P *t2p = (T2P*) TIFFClientdata(tif);\n\tt2p->outputdisable = 1;\n}\n\nstatic void\nt2p_enable(TIFF *tif)\n{\n\tT2P *t2p = (T2P*) TIFFClientdata(tif);\n\tt2p->outputdisable = 0;\n}\n\n/*\n * Procs for TIFFClientOpen\n */\n\nstatic tsize_t\nt2pReadFile(TIFF *tif, tdata_t data, tsize_t size)\n{\n\tthandle_t client = TIFFClientdata(tif);\n\tTIFFReadWriteProc proc =  TIFFGetReadProc(tif);\n\tif (proc)\n\t\treturn proc(client, data, size);\n\treturn -1;\n}\n\nstatic tsize_t\nt2pWriteFile(TIFF *tif, tdata_t data, tsize_t size)\n{\n\tthandle_t client = TIFFClientdata(tif);\n\tTIFFReadWriteProc proc =  TIFFGetWriteProc(tif);\n\tif (proc)\n\t\treturn proc(client, data, size);\n\treturn -1;\n}\n\nstatic toff_t\nt2pSeekFile(TIFF *tif, toff_t offset, int whence)\n{\n\tthandle_t client = TIFFClientdata(tif);\n\tTIFFSeekProc proc =  TIFFGetSeekProc(tif);\n\tif (proc)\n\t\treturn proc(client, offset, whence);\n\treturn -1;\n}\n\nstatic tsize_t\nt2p_readproc(thandle_t handle, tdata_t data, tsize_t size)\n{\n\t(void) handle, (void) data, (void) size;\n\treturn -1;\n}\n\nstatic tsize_t\nt2p_writeproc(thandle_t handle, tdata_t data, tsize_t size)\n{\n\tT2P *t2p = (T2P*) handle;\n\tif (t2p->outputdisable <= 0 && t2p->outputfile) {\n\t\ttsize_t written = fwrite(data, 1, size, t2p->outputfile);\n\t\tt2p->outputwritten += written;\n\t\treturn written;\n\t}\n\treturn size;\n}\n\nstatic toff_t\nt2p_seekproc(thandle_t handle, toff_t offset, int whence)\n{\n\tT2P *t2p = (T2P*) handle;\n\tif (t2p->outputdisable <= 0 && t2p->outputfile)\n\t\treturn fseek(t2p->outputfile, offset, whence);\n\treturn offset;\n}\n\nstatic int\nt2p_closeproc(thandle_t handle)\n{\n\t(void) handle;\n\treturn 0;\n}\n\nstatic toff_t\nt2p_sizeproc(thandle_t handle)\n{\n\t(void) handle;\n\treturn -1;\n}\n\nstatic int\nt2p_mapproc(thandle_t handle, tdata_t *data, toff_t *offset)\n{\n\t(void) handle, (void) data, (void) offset;\n\treturn -1;\n}\n\nstatic void\nt2p_unmapproc(thandle_t handle, tdata_t data, toff_t offset)\n{\n\t(void) handle, (void) data, (void) offset;\n}\n\nstatic uint64\ncheckAdd64(uint64 summand1, uint64 summand2, T2P* t2p)\n{\n\tuint64 bytes = summand1 + summand2;\n\n\tif (bytes - summand1 != summand2) {\n\t\tTIFFError(TIFF2PDF_MODULE, \"Integer overflow\");\n\t\tt2p->t2p_error = T2P_ERR_ERROR;\n\t\tbytes = 0;\n\t}\n\n\treturn bytes;\n}\n\nstatic uint64\ncheckMultiply64(uint64 first, uint64 second, T2P* t2p)\n{\n\tuint64 bytes = first * second;\n\n\tif (second && bytes / second != first) {\n\t\tTIFFError(TIFF2PDF_MODULE, \"Integer overflow\");\n\t\tt2p->t2p_error = T2P_ERR_ERROR;\n\t\tbytes = 0;\n\t}\n\n\treturn bytes;\n}\n\n/*\n\n  This is the main function.\n\n  The program converts one TIFF file to one PDF file, including multiple page\n  TIFF files, tiled TIFF files, black and white. grayscale, and color TIFF\n  files that contain data of TIFF photometric interpretations of bilevel,\n  grayscale, RGB, YCbCr, CMYK separation, and ICC L*a*b* as supported by\n  libtiff and PDF.\n\n  If you have multiple TIFF files to convert into one PDF file then use tiffcp\n  or other program to concatenate the files into a multiple page TIFF file.\n  If the input TIFF file is of huge dimensions (greater than 10000 pixels height\n  or width) convert the input image to a tiled TIFF if it is not already.\n\n  The standard output is standard output.  Set the output file name with the\n  \"-o output.pdf\" option.\n\n  All black and white files are compressed into a single strip CCITT G4 Fax\n  compressed PDF, unless tiled, where tiled black and white images are\n  compressed into tiled CCITT G4 Fax compressed PDF, libtiff CCITT support\n  is assumed.\n\n  Color and grayscale data can be compressed using either JPEG compression,\n  ITU-T T.81, or Zip/Deflate LZ77 compression, per PNG 1.2 and RFC 1951.  Set\n  the compression type using the -j or -z options.  JPEG compression support\n  requires that libtiff be configured with JPEG support, and Zip/Deflate\n  compression support requires that libtiff is configured with Zip support,\n  in tiffconf.h.  Use only one or the other of -j and -z.  The -q option\n  sets the image compression quality, that is 1-100 with libjpeg JPEG\n  compression and one of 1, 10, 11, 12, 13, 14, or 15 for PNG group compression\n  predictor methods, add 100, 200, ..., 900 to set zlib compression quality 1-9.\n  PNG Group differencing predictor methods are not currently implemented.\n\n  If the input TIFF contains single strip CCITT G4 Fax compressed information,\n  then that is written to the PDF file without transcoding, unless the options\n  of no compression and no passthrough are set, -d and -n.\n\n  If the input TIFF contains JPEG or single strip Zip/Deflate compressed\n  information, and they are configured, then that is written to the PDF file\n  without transcoding, unless the options of no compression and no passthrough\n  are set.\n\n  The default page size upon which the TIFF image is placed is determined by\n  the resolution and extent of the image data.  Default values for the TIFF\n  image resolution can be set using the -x and -y options.  The page size can\n  be set using the -p option for paper size, or -w and -l for paper width and\n  length, then each page of the TIFF image is centered on its page.  The\n  distance unit for default resolution and page width and length can be set\n  by the -u option, the default unit is inch.\n\n  Various items of the output document information can be set with the -e, -c,\n  -a, -t, -s, and -k tags.  Setting the argument of the option to \"\" for these\n  tags causes the relevant document information field to be not written.  Some\n  of the document information values otherwise get their information from the\n  input TIFF image, the software, author, document name, and image description.\n\n  The output PDF file conforms to the PDF 1.1 specification or PDF 1.2 if using\n  Zip/Deflate compression.\n\n  The Portable Document Format (PDF) specification is copyrighted by Adobe\n  Systems, Incorporated.  Todos derechos reservados.\n\n  Here is a listing of the usage example and the options to the tiff2pdf\n  program that is part of the libtiff distribution.  Options followed by\n  a colon have a required argument.\n\n    usage:  tiff2pdf [options] input.tif\n\n    options:\n    -o: output to file name\n\n    -j: compress with JPEG (requires libjpeg configured with libtiff)\n    -z: compress with Zip/Deflate (requires zlib configured with libtiff)\n    -q: compression quality\n    -n: no compressed data passthrough\n    -d: do not compress (decompress)\n    -i: invert colors\n    -u: set distance unit, 'i' for inch, 'm' for centimeter\n    -x: set x resolution default\n    -y: set y resolution default\n    -w: width in units\n    -l: length in units\n    -r: 'd' for resolution default, 'o' for resolution override\n    -p: paper size, eg \"letter\", \"legal\", \"a4\"\n    -F: make the tiff fill the PDF page\n    -f: set pdf \"fit window\" user preference\n    -b:\tset PDF \"Interpolate\" user preference\n    -e: date, overrides image or current date/time default, YYYYMMDDHHMMSS\n    -c: creator, overrides image software default\n    -a: author, overrides image artist default\n    -t: title, overrides image document name default\n    -s: subject, overrides image image description default\n    -k: keywords\n\n    -h: usage\n\n    examples:\n\n        tiff2pdf -o output.pdf input.tiff\n\n    The above example would generate the file output.pdf from input.tiff.\n\n        tiff2pdf input.tiff\n\n    The above example would generate PDF output from input.tiff and write it\n    to standard output.\n\n        tiff2pdf -j -p letter -o output.pdf input.tiff\n\n    The above example would generate the file output.pdf from input.tiff,\n    putting the image pages on a letter sized page, compressing the output\n    with JPEG.\n\n\tPlease report bugs through:\n\n\thttp://bugzilla.remotesensing.org/buglist.cgi?product=libtiff\n\n    See also libtiff.3t, tiffcp.\n  */\n\nint main(int argc, char** argv){\n\n\textern char *optarg;\n\textern int optind;\n\tconst char *outfilename = NULL;\n\tT2P *t2p = NULL;\n\tTIFF *input = NULL, *output = NULL;\n\ttsize_t written = 0;\n\tint c, ret = EXIT_SUCCESS;\n\n\tt2p = t2p_init();\n\n\tif (t2p == NULL){\n\t\tTIFFError(TIFF2PDF_MODULE, \"Can't initialize context\");\n\t\tgoto fail;\n\t}\n\n\twhile (argv &&\n\t       (c = getopt(argc, argv,\n\t\t\t   \"o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF\")) != -1){\n\t\tswitch (c) {\n\t\t\tcase 'o':\n\t\t\t\toutfilename = optarg;\n\t\t\t\tbreak;\n#ifdef JPEG_SUPPORT\n\t\t\tcase 'j':\n\t\t\t\tt2p->pdf_defaultcompression=T2P_COMPRESS_JPEG;\n\t\t\t\tbreak;\n#endif\n#ifndef JPEG_SUPPORT\n\t\t\tcase 'j':\n\t\t\t\tTIFFWarning(\n\t\t\t\t\tTIFF2PDF_MODULE,\n\t\t\t\t\t\"JPEG support in libtiff required for JPEG compression, ignoring option\");\n\t\t\t\tbreak;\n#endif\n#ifdef ZIP_SUPPORT\n\t\t\tcase 'z':\n\t\t\t\tt2p->pdf_defaultcompression=T2P_COMPRESS_ZIP;\n\t\t\t\tbreak;\n#endif\n#ifndef ZIP_SUPPORT\n\t\t\tcase 'z':\n\t\t\t\tTIFFWarning(\n\t\t\t\t\tTIFF2PDF_MODULE,\n\t\t\t\t\t\"Zip support in libtiff required for Zip compression, ignoring option\");\n\t\t\t\tbreak;\n#endif\n\t\t\tcase 'q':\n\t\t\t\tt2p->pdf_defaultcompressionquality=atoi(optarg);\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tt2p->pdf_nopassthrough=1;\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\t\tt2p->pdf_defaultcompression=T2P_COMPRESS_NONE;\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\t\tif(optarg[0]=='m'){\n\t\t\t\t\tt2p->pdf_centimeters=1;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'x':\n\t\t\t\tt2p->pdf_defaultxres =\n\t\t\t\t\t(float)atof(optarg) / (t2p->pdf_centimeters?2.54F:1.0F);\n\t\t\t\tbreak;\n\t\t\tcase 'y':\n\t\t\t\tt2p->pdf_defaultyres =\n\t\t\t\t\t(float)atof(optarg) / (t2p->pdf_centimeters?2.54F:1.0F);\n\t\t\t\tbreak;\n\t\t\tcase 'w':\n\t\t\t\tt2p->pdf_overridepagesize=1;\n\t\t\t\tt2p->pdf_defaultpagewidth =\n\t\t\t\t\t((float)atof(optarg) * PS_UNIT_SIZE) / (t2p->pdf_centimeters?2.54F:1.0F);\n\t\t\t\tbreak;\n\t\t\tcase 'l':\n\t\t\t\tt2p->pdf_overridepagesize=1;\n\t\t\t\tt2p->pdf_defaultpagelength =\n\t\t\t\t\t((float)atof(optarg) * PS_UNIT_SIZE) / (t2p->pdf_centimeters?2.54F:1.0F);\n\t\t\t\tbreak;\n\t\t\tcase 'r':\n\t\t\t\tif(optarg[0]=='o'){\n\t\t\t\t\tt2p->pdf_overrideres=1;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'p':\n\t\t\t\tif(tiff2pdf_match_paper_size(\n\t\t\t\t\t&(t2p->pdf_defaultpagewidth),\n\t\t\t\t\t&(t2p->pdf_defaultpagelength),\n\t\t\t\t\toptarg)){\n\t\t\t\t\tt2p->pdf_overridepagesize=1;\n\t\t\t\t} else {\n\t\t\t\t\tTIFFWarning(TIFF2PDF_MODULE,\n\t\t\t\t\t\"Unknown paper size %s, ignoring option\",\n\t\t\t\t\t\toptarg);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'i':\n\t\t\t\tt2p->pdf_colorspace_invert=1;\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tt2p->pdf_image_fillpage = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'f':\n\t\t\t\tt2p->pdf_fitwindow=1;\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\t\tif (strlen(optarg) == 0) {\n\t\t\t\t\tt2p->pdf_datetime[0] = '\\0';\n\t\t\t\t} else {\n\t\t\t\t\tt2p->pdf_datetime[0] = 'D';\n\t\t\t\t\tt2p->pdf_datetime[1] = ':';\n\t\t\t\t\tstrncpy(t2p->pdf_datetime + 2, optarg,\n\t\t\t\t\t\tsizeof(t2p->pdf_datetime) - 3);\n\t\t\t\t\tt2p->pdf_datetime[sizeof(t2p->pdf_datetime) - 1] = '\\0';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\tstrncpy(t2p->pdf_creator, optarg, sizeof(t2p->pdf_creator) - 1);\n\t\t\t\tt2p->pdf_creator[sizeof(t2p->pdf_creator) - 1] = '\\0';\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\t\tstrncpy(t2p->pdf_author, optarg, sizeof(t2p->pdf_author) - 1);\n\t\t\t\tt2p->pdf_author[sizeof(t2p->pdf_author) - 1] = '\\0';\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\t\tstrncpy(t2p->pdf_title, optarg, sizeof(t2p->pdf_title) - 1);\n\t\t\t\tt2p->pdf_title[sizeof(t2p->pdf_title) - 1] = '\\0';\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\tstrncpy(t2p->pdf_subject, optarg, sizeof(t2p->pdf_subject) - 1);\n\t\t\t\tt2p->pdf_subject[sizeof(t2p->pdf_subject) - 1] = '\\0';\n\t\t\t\tbreak;\n\t\t\tcase 'k':\n\t\t\t\tstrncpy(t2p->pdf_keywords, optarg, sizeof(t2p->pdf_keywords) - 1);\n\t\t\t\tt2p->pdf_keywords[sizeof(t2p->pdf_keywords) - 1] = '\\0';\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\tt2p->pdf_image_interpolate = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\tcase '?':\n\t\t\t\ttiff2pdf_usage();\n\t\t\t\tgoto success;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/*\n\t * Input\n\t */\n\tif(argc > optind) {\n\t\tinput = TIFFOpen(argv[optind++], \"r\");\n\t\tif (input==NULL) {\n\t\t\tTIFFError(TIFF2PDF_MODULE,\n\t\t\t\t  \"Can't open input file %s for reading\",\n\t\t\t\t  argv[optind-1]);\n\t\t\tgoto fail;\n\t\t}\n\t} else {\n\t\tTIFFError(TIFF2PDF_MODULE, \"No input file specified\");\n\t\ttiff2pdf_usage();\n\t\tgoto fail;\n\t}\n\n\tif(argc > optind) {\n\t\tTIFFError(TIFF2PDF_MODULE,\n\t\t\t  \"No support for multiple input files\");\n\t\ttiff2pdf_usage();\n\t\tgoto fail;\n\t}\n\n\t/*\n\t * Output\n\t */\n\tt2p->outputdisable = 0;\n\tif (outfilename) {\n\t\tt2p->outputfile = fopen(outfilename, \"wb\");\n\t\tif (t2p->outputfile == NULL) {\n\t\t\tTIFFError(TIFF2PDF_MODULE,\n\t\t\t\t  \"Can't open output file %s for writing\",\n\t\t\t\t  outfilename);\n\t\t\tgoto fail;\n\t\t}\n\t} else {\n\t\toutfilename = \"-\";\n\t\tt2p->outputfile = stdout;\n\t}\n\n\toutput = TIFFClientOpen(outfilename, \"w\", (thandle_t) t2p,\n\t\t\t\tt2p_readproc, t2p_writeproc, t2p_seekproc,\n\t\t\t\tt2p_closeproc, t2p_sizeproc,\n\t\t\t\tt2p_mapproc, t2p_unmapproc );\n\tif (output == NULL) {\n\t\tTIFFError(TIFF2PDF_MODULE,\n\t\t\t  \"Can't initialize output descriptor\");\n\t\tgoto fail;\n\t}\n\n\t/*\n\t * Validate\n\t */\n\tt2p_validate(t2p);\n\tt2pSeekFile(output, (toff_t) 0, SEEK_SET);\n\n\t/*\n\t * Write\n\t */\n\twritten = t2p_write_pdf(t2p, input, output);\n\tif (t2p->t2p_error != 0) {\n\t\tTIFFError(TIFF2PDF_MODULE,\n\t\t\t  \"An error occurred creating output PDF file\");\n\t\tgoto fail;\n\t}\n\n\tgoto success;\nfail:\n\tret = EXIT_FAILURE;\nsuccess:\n\tif(input != NULL)\n\t\tTIFFClose(input);\n\tif (output != NULL)\n\t\tTIFFClose(output);\n\tif (t2p != NULL)\n\t\tt2p_free(t2p);\n\treturn ret;\n\n}\n\nvoid tiff2pdf_usage(){\n\tchar* lines[]={\n\t\"usage:  tiff2pdf [options] input.tiff\",\n\t\"options:\",\n\t\" -o: output to file name\",\n#ifdef JPEG_SUPPORT\n\t\" -j: compress with JPEG\",\n#endif\n#ifdef ZIP_SUPPORT\n\t\" -z: compress with Zip/Deflate\",\n#endif\n\t\" -q: compression quality\",\n\t\" -n: no compressed data passthrough\",\n\t\" -d: do not compress (decompress)\",\n\t\" -i: invert colors\",\n\t\" -u: set distance unit, 'i' for inch, 'm' for centimeter\",\n\t\" -x: set x resolution default in dots per unit\",\n\t\" -y: set y resolution default in dots per unit\",\n\t\" -w: width in units\",\n\t\" -l: length in units\",\n\t\" -r: 'd' for resolution default, 'o' for resolution override\",\n\t\" -p: paper size, eg \\\"letter\\\", \\\"legal\\\", \\\"A4\\\"\",\n  \" -F: make the tiff fill the PDF page\",\n\t\" -f: set PDF \\\"Fit Window\\\" user preference\",\n\t\" -e: date, overrides image or current date/time default, YYYYMMDDHHMMSS\",\n\t\" -c: sets document creator, overrides image software default\",\n\t\" -a: sets document author, overrides image artist default\",\n\t\" -t: sets document title, overrides image document name default\",\n\t\" -s: sets document subject, overrides image image description default\",\n\t\" -k: sets document keywords\",\n\t\" -b: set PDF \\\"Interpolate\\\" user preference\",\n\t\" -h: usage\",\n\tNULL\n\t};\n\tint i=0;\n\n\tfprintf(stderr, \"%s\\n\\n\", TIFFGetVersion());\n\tfor (i=0;lines[i]!=NULL;i++){\n\t\tfprintf(stderr, \"%s\\n\", lines[i]);\n\t}\n\n\treturn;\n}\n\nint tiff2pdf_match_paper_size(float* width, float* length, char* papersize){\n\n\tsize_t i, len;\n\tconst char* sizes[]={\n\t\t\"LETTER\", \"A4\", \"LEGAL\",\n\t\t\"EXECUTIVE\", \"LETTER\", \"LEGAL\", \"LEDGER\", \"TABLOID\",\n\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\",\n\t\t\"A10\", \"A9\", \"A8\", \"A7\", \"A6\", \"A5\", \"A4\", \"A3\", \"A2\", \"A1\", \"A0\",\n\t\t\"2A0\", \"4A0\", \"2A\", \"4A\",\n\t\t\"B10\", \"B9\", \"B8\", \"B7\", \"B6\", \"B5\", \"B4\", \"B3\", \"B2\", \"B1\", \"B0\",\n\t\t\"JISB10\", \"JISB9\", \"JISB8\", \"JISB7\", \"JISB6\", \"JISB5\", \"JISB4\",\n\t\t\"JISB3\", \"JISB2\", \"JISB1\", \"JISB0\",\n\t\t\"C10\", \"C9\", \"C8\", \"C7\", \"C6\", \"C5\", \"C4\", \"C3\", \"C2\", \"C1\", \"C0\",\n\t\t\"RA2\", \"RA1\", \"RA0\", \"SRA4\", \"SRA3\", \"SRA2\", \"SRA1\", \"SRA0\",\n\t\t\"A3EXTRA\", \"A4EXTRA\",\n\t\t\"STATEMENT\", \"FOLIO\", \"QUARTO\",\n\t\tNULL\n\t} ;\n\tconst int widths[]={\n\t\t612, 595, 612,\n\t\t522, 612,612,792,792,\n\t\t612,792,1224,1584,2448,2016,792,2016,2448,2880,\n\t\t74,105,147,210,298,420,595,842,1191,1684,2384,3370,4768,3370,4768,\n\t\t88,125,176,249,354,499,709,1001,1417,2004,2835,\n\t\t91,128,181,258,363,516,729,1032,1460,2064,2920,\n\t\t79,113,162,230,323,459,649,918,1298,1298,2599,\n\t\t1219,1729,2438,638,907,1276,1814,2551,\n\t\t914,667,\n\t\t396, 612, 609,\n\t\t0\n\t};\n\tconst int lengths[]={\n\t\t792,842,1008,\n\t\t756,792,1008,1224,1224,\n\t\t792,1224,1584,2448,3168,2880,6480,10296,12672,10296,\n\t\t105,147,210,298,420,595,842,1191,1684,2384,3370,4768,6741,4768,6741,\n\t\t125,176,249,354,499,709,1001,1417,2004,2835,4008,\n\t\t128,181,258,363,516,729,1032,1460,2064,2920,4127,\n\t\t113,162,230,323,459,649,918,1298,1837,1837,3677,\n\t\t1729,2438,3458,907,1276,1814,2551,3628,\n\t\t1262,914,\n\t\t612, 936, 780,\n\t\t0\n\t};\n\n\tlen=strlen(papersize);\n\tfor(i=0;i<len;i++){\n\t\tpapersize[i]=toupper(papersize[i]);\n\t}\n\tfor(i=0;sizes[i]!=NULL; i++){\n\t\tif (strcmp( (const char*)papersize, sizes[i])==0){\n\t\t\t*width=(float)widths[i];\n\t\t\t*length=(float)lengths[i];\n\t\t\treturn(1);\n\t\t}\n\t}\n\n\treturn(0);\n}\n\n/*\n * This function allocates and initializes a T2P context struct pointer.\n */\n\nT2P* t2p_init()\n{\n\tT2P* t2p = (T2P*) _TIFFmalloc(sizeof(T2P));\n\tif(t2p==NULL){\n\t\tTIFFError(\n\t\t\tTIFF2PDF_MODULE,\n\t\t\t\"Can't allocate %u bytes of memory for t2p_init\",\n\t\t\tsizeof(T2P));\n\t\treturn( (T2P*) NULL );\n\t}\n\t_TIFFmemset(t2p, 0x00, sizeof(T2P));\n\tt2p->pdf_majorversion=1;\n\tt2p->pdf_minorversion=1;\n\tt2p->pdf_defaultxres=300.0;\n\tt2p->pdf_defaultyres=300.0;\n\tt2p->pdf_defaultpagewidth=612.0;\n\tt2p->pdf_defaultpagelength=792.0;\n\tt2p->pdf_xrefcount=3; /* Catalog, Info, Pages */\n\n\treturn(t2p);\n}\n\n/*\n * This function frees a T2P context struct pointer and any allocated data fields of it.\n */\n\nvoid t2p_free(T2P* t2p)\n{\n\tint i = 0;\n\n\tif (t2p != NULL) {\n\t\tif(t2p->pdf_xrefoffsets != NULL){\n\t\t\t_TIFFfree( (tdata_t) t2p->pdf_xrefoffsets);\n\t\t}\n\t\tif(t2p->tiff_pages != NULL){\n\t\t\t_TIFFfree( (tdata_t) t2p->tiff_pages);\n\t\t}\n\t\tfor(i=0;i<t2p->tiff_pagecount;i++){\n\t\t\tif(t2p->tiff_tiles[i].tiles_tiles != NULL){\n\t\t\t\t_TIFFfree( (tdata_t) t2p->tiff_tiles[i].tiles_tiles);\n\t\t\t}\n\t\t}\n\t\tif(t2p->tiff_tiles != NULL){\n\t\t\t_TIFFfree( (tdata_t) t2p->tiff_tiles);\n\t\t}\n\t\tif(t2p->pdf_palette != NULL){\n\t\t\t_TIFFfree( (tdata_t) t2p->pdf_palette);\n\t\t}\n#ifdef OJPEG_SUPPORT\n\t\tif(t2p->pdf_ojpegdata != NULL){\n\t\t\t_TIFFfree( (tdata_t) t2p->pdf_ojpegdata);\n\t\t}\n#endif\n\t\t_TIFFfree( (tdata_t) t2p );\n\t}\n\n\treturn;\n}"
}