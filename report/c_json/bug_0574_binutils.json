{
    "project": "binutils",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "gas/app.c",
    "message": "The value read from fromlen was never initialized.",
    "warning_function_name": "process_escape",
    "warning_line": "ch = GET ();",
    "warning_context": "\n#define PUT(pch)\t\t\t\t\\\n  do\t\t\t\t\t\t\\\n    {\t\t\t\t\t\t\\\n      *to++ = (pch);\t\t\t\t\\\n      if (to >= toend)\t\t\t\t\\\n\tgoto tofull;\t\t\t\t\\\n    }\t\t\t\t\t\t\\\n  while (0)\n\n  if (saved_input != NULL)\n    {\n      from = saved_input;\n      fromend = from + saved_input_len;\n    }\n  else\n    {\n      fromlen = (*get) (input_buffer, sizeof input_buffer);\n      if (fromlen == 0)\n\treturn 0;\n      from = input_buffer;\n      fromend = from + fromlen;\n    }\n\n  while (1)\n    {\n      /* The cases in this switch end with continue, in order to\n\t branch back to the top of this while loop and generate the\n\t next output character in the appropriate state.  */\n      switch (state)\n\t{\n\tcase -1:\n\t  ch = *out_string++;\n\t  if (*out_string == '\\0')\n\t    {\n\t      state = old_state;\n\t      old_state = 3;\n\t    }\n\t  PUT (ch);\n\t  continue;\n\n\tcase -2:\n\t  for (;;)\n\t    {\n\t      do\n\t\t{\n\t\t  ch = GET ();\n\n\t\t  if (ch == EOF)\n\t\t    {\n\t\t      as_warn (_(\"end of file in comment\"));\n\t\t      goto fromeof;\n\t\t    }\n\n\t\t  if (ch == '\\n')\n\t\t    PUT ('\\n');\n\t\t}\n\t      while (ch != '*');\n\n\t      while ((ch = GET ()) == '*')\n\t\t;\n\n\t      if (ch == EOF)\n\t\t{\n\t\t  as_warn (_(\"end of file in comment\"));\n\t\t  goto fromeof;\n\t\t}\n\n\t      if (ch == '/')\n\t\tbreak;\n\n\t      UNGET (ch);\n\t    }\n\n\t  state = old_state;\n\t  UNGET (' ');\n\t  continue;\n\n\tcase 4:\n\t  ch = GET ();\n\t  if (ch == EOF)\n\t    goto fromeof;\n\t  else if (ch >= '0' && ch <= '9')\n\t    PUT (ch);\n\t  else\n\t    {\n\t      while (ch != EOF && IS_WHITESPACE (ch))\n\t\tch = GET ();\n\t      if (ch == '\"')\n\t\t{\n\t\t  quotechar = ch;\n\t\t  state = 5;\n\t\t  old_state = 3;\n\t\t  PUT (ch);\n\t\t}\n\t      else\n\t\t{\n\t\t  while (ch != EOF && ch != '\\n')\n\t\t    ch = GET ();\n\t\t  state = 0;\n\t\t  PUT (ch);\n"
}