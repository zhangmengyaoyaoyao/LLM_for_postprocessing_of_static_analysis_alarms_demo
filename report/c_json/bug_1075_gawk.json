{
    "Project": "gawk",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "profile.c",
    "message": "Offset added: [1, +oo] (⇐ [0, +oo] + [1, +oo]) Size: [0, +oo] by call to `pp_group3`.",
    "warning_function_name": "pprint",
    "warning_line": "str = pp_group3(t1->pp_str, op2str(pc->opcode), t2->pp_str);",
    "warning_context": "\t\t\t/* fall through */\n\t\tcase Op_store_sub:\n\t\tcase Op_assign_concat:\n\t\tcase Op_push_lhs:\n\t\tcase Op_push_param:\n\t\tcase Op_push_array:\n\t\tcase Op_push:\n\t\tcase Op_push_arg:\n\t\t\tm = pc->memory;\n\t\t\tswitch (m->type) {\n\t\t\tcase Node_param_list:\n\t\t\t\tpp_push(pc->opcode, func_params[m->param_cnt].param, DONT_FREE);\n\t\t\t\tbreak;\n\n\t\t\tcase Node_var:\n\t\t\tcase Node_var_new:\n\t\t\tcase Node_var_array:\n\t\t\t\tif (m->vname != NULL)\n\t\t\t\t\tpp_push(pc->opcode, m->vname, DONT_FREE);\n \t\t\t\telse\n\t\t\t\t\tfatal(_(\"internal error: %s with null vname\"),\n\t\t\t\t\t\t\tnodetype2str(m->type));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tcant_happen();\n\t\t\t}\n\n\t\t\tswitch (pc->opcode) {\t\t\n\t\t\tcase Op_store_var:\n\t\t\t\tt2 = pp_pop(); /* l.h.s. */\n\t\t\t\tt1 = pp_pop(); /* r.h.s. */\n\t\t\t\tfprintf(prof_fp, \"%s%s%s\", t2->pp_str, op2str(pc->opcode), t1->pp_str);\n\t\t\t\tgoto cleanup;\n\n\t\t\tcase Op_store_sub:\n\t\t\t\tt1 = pp_pop();\t/* array */\n\t\t\t\ttmp = pp_list(pc->expr_count, op2str(Op_subscript), \", \"); /*subscript*/\n\t\t\t\tt2 = pp_pop(); /* r.h.s. */\n\t\t\t\tfprintf(prof_fp, \"%s%s%s%s\", t1->pp_str, tmp,\n\t\t\t\t\t\t\t\t\top2str(pc->opcode), t2->pp_str);\n\t\t\t\tefree(tmp);\n\t\t\t\tgoto cleanup;\n\n\t\t\tcase Op_assign_concat:\n\t\t\t\tt2 = pp_pop(); /* l.h.s. */\n\t\t\t\tt1 = pp_pop();\n\t\t\t\ttmp = pp_group3(t2->pp_str, op2str(Op_concat), t1->pp_str);\n\t\t\t\tfprintf(prof_fp, \"%s%s%s\", t2->pp_str, op2str(Op_assign), tmp);\n\t\t\t\tefree(tmp);\ncleanup:\n\t\t\t\tpp_free(t2);\n\t\t\t\tpp_free(t1);\n\t\t\t\tif (! in_for_header)\n\t\t\t\t\tfprintf(prof_fp, \"\\n\");\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase Op_sub_array:\n\t\tcase Op_subscript_lhs:\n\t\tcase Op_subscript:\n\t\t\ttmp = pp_list(pc->sub_count, op2str(pc->opcode), \", \");\n\t\t\tt1 = pp_pop();\n\t\t\tstr = pp_group3(t1->pp_str, tmp, \"\");\n\t\t\tefree(tmp);\n\t\t\tpp_free(t1);\n\t\t\tpp_push(pc->opcode, str, CAN_FREE);\n\t\t\tbreak;\t\n\n\t\tcase Op_and:\n\t\tcase Op_or:\n\t\t\tpprint(pc->nexti, pc->target_jmp, in_for_header);\n\t\t\tt2 = pp_pop();\n\t\t\tt1 = pp_pop();\n\t\t\tparenthesize(pc->opcode, t1, t2);\n\t\t\tstr = pp_group3(t1->pp_str, op2str(pc->opcode), t2->pp_str);\n\t\t\tpp_free(t1);\n\t\t\tpp_free(t2);\n\t\t\tpp_push(pc->opcode, str, CAN_FREE);\n\t\t\tpc = pc->target_jmp;\n\t\t\tbreak;\n\n\t\tcase Op_plus_i:\n\t\tcase Op_minus_i:\n\t\tcase Op_times_i:\n\t\tcase Op_exp_i:\n\t\tcase Op_quotient_i:\n\t\tcase Op_mod_i:\n\t\t\tm = pc->memory;\n\t\t\tt1 = pp_pop();\n\t\t\tif (prec_level(pc->opcode) > prec_level(t1->type)\n\t\t\t\t\t&& is_binary(t1->type))  /* (a - b) * 1 */\n\t\t\t\tpp_parenthesize(t1);\n\t\t\tif ((m->flags & NUMBER) != 0)\n\t\t\t\ttmp = pp_number(m);\n\t\t\telse\n\t\t\t\ttmp = pp_string(m->stptr, m->stlen, '\"');\n"
}