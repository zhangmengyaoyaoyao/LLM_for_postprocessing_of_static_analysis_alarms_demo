{
    "Project": "bash",
    "Tool": "Infer",
    "Bug Type": "UNINITIALIZED_VALUE",
    "Code_line": "\tretval = array_reference (array_cell (var), ind);",
    "Code_function": "array_value_internal (s, quoted, flags, rtype, indp)\n     char *s;\n     int quoted, flags, *rtype;\n     arrayind_t *indp;\n{\n  int len;\n  arrayind_t ind;\n  char *akey;\n  char *retval, *t, *temp;\n  WORD_LIST *l;\n  SHELL_VAR *var;\n\n  var = array_variable_part (s, &t, &len);\n\n  /* Expand the index, even if the variable doesn't exist, in case side\n     effects are needed, like ${w[i++]} where w is unset. */\n#if 0\n  if (var == 0)\n    return (char *)NULL;\n#endif\n\n  if (len == 0)\n    return ((char *)NULL);\t/* error message already printed */\n\n  /* [ */\n  akey = 0;\n  if (ALL_ELEMENT_SUB (t[0]) && t[1] == ']')\n    {\n      if (rtype)\n\t*rtype = (t[0] == '*') ? 1 : 2;\n      if ((flags & AV_ALLOWALL) == 0)\n\t{\n\t  err_badarraysub (s);\n\t  return ((char *)NULL);\n\t}\n      else if (var == 0 || value_cell (var) == 0)\t/* XXX - check for invisible_p(var) ? */\n\treturn ((char *)NULL);\n      else if (array_p (var) == 0 && assoc_p (var) == 0)\n\tl = add_string_to_list (value_cell (var), (WORD_LIST *)NULL);\n      else if (assoc_p (var))\n\t{\n\t  l = assoc_to_word_list (assoc_cell (var));\n\t  if (l == (WORD_LIST *)NULL)\n\t    return ((char *)NULL);\n\t}\n      else\n\t{\n\t  l = array_to_word_list (array_cell (var));\n\t  if (l == (WORD_LIST *)NULL)\n\t    return ((char *) NULL);\n\t}\n\n      if (t[0] == '*' && (quoted & (Q_HERE_DOCUMENT|Q_DOUBLE_QUOTES)))\n\t{\n\t  temp = string_list_dollar_star (l);\n\t  retval = quote_string (temp);\t\t/* XXX - leak here */\n\t  free (temp);\n\t}\n      else\t/* ${name[@]} or unquoted ${name[*]} */\n\tretval = string_list_dollar_at (l, quoted);\t/* XXX - leak here */\n\n      dispose_words (l);\n    }\n  else\n    {\n      if (rtype)\n\t*rtype = 0;\n      if (var == 0 || array_p (var) || assoc_p (var) == 0)\n\t{\n\t  if ((flags & AV_USEIND) == 0 || indp == 0)\n\t    {\n\t      ind = array_expand_index (var, t, len);\n\t      if (ind < 0)\n\t\t{\n\t\t  /* negative subscripts to indexed arrays count back from end */\n\t\t  if (var && array_p (var))\n\t\t    ind = array_max_index (array_cell (var)) + 1 + ind;\n\t\t  if (ind < 0)\n\t\t    INDEX_ERROR();\n\t\t}\n\t      if (indp)\n\t\t*indp = ind;\n\t    }\n\t  else if (indp)\n\t    ind = *indp;\n\t}\n      else if (assoc_p (var))\n\t{\n\t  t[len - 1] = '\\0';\n\t  akey = expand_assignment_string_to_string (t, 0);\t/* [ */\n\t  t[len - 1] = ']';\n\t  if (akey == 0 || *akey == 0)\n\t    {\n\t      FREE (akey);\n\t      INDEX_ERROR();\n\t    }\n\t}\n\n      if (var == 0 || value_cell (var) == 0)\t/* XXX - check invisible_p(var) ? */\n\t{\n          FREE (akey);\n\t  return ((char *)NULL);\n\t}\n      if (array_p (var) == 0 && assoc_p (var) == 0)\n\treturn (ind == 0 ? value_cell (var) : (char *)NULL);\n      else if (assoc_p (var))\n        {\n\t  retval = assoc_reference (assoc_cell (var), akey);\n\t  free (akey);\n        }\n      else\n\tretval = array_reference (array_cell (var), ind);\n    }\n\n  return retval;\n}"
}