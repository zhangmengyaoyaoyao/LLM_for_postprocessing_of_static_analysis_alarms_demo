{
    "project": "combine",
    "tool": "Infer",
    "category": "NULL_DEREFERENCE",
    "file": "src/write_files.c",
    "message": "pointer `tmp_str` last assigned on line 70 could be null and is dereferenced by call to `strcpy()` at line 70, column 2.",
    "warning_function_name": "df_write_output",
    "warning_line": "FATAL_PERROR (_(\"File\"));",
    "warning_context": "int\ndf_write_output (stream, buffer, bufferpos, buffersiz, string, record_delimiter,\n\t\t end_record, end_file)\n     FILE *stream;\n     unsigned char **buffer;\n     size_t *bufferpos;\n     size_t *buffersiz;\n     STRINGTYPE *string;\n     STRINGTYPE *record_delimiter;\n     int end_record;\n     int end_file;\n{\n  STRINGTYPE temp_string;\n  STRINGTYPE buffer_desc;\n  int return_code;\n\n  if (*buffer == NULL) {\n    *buffer = malloc (DF_BUFFER_INCREMENT);\n    if (*buffer == NULL)\n      FATAL_ERROR (_(\"unable to allocate memory\"));\n    *buffersiz = DF_BUFFER_INCREMENT;\n    }\n\n  if (string != NULL) {\n    temp_string.string = string->string;\n    temp_string.length = string->length;\n\n    buffer_desc.string = *buffer + *bufferpos;\n    buffer_desc.length = *buffersiz - *bufferpos;\n\n    while (*bufferpos + temp_string.length >= *buffersiz) {\n      /* Put as much as we can into the buffer */\n      memmove (buffer_desc.string, temp_string.string, buffer_desc.length);\n\n      /* Write the buffer and adjust */\n      return_code = fwrite (*buffer, 1, *buffersiz, stream);\n      if (return_code != *buffersiz)\n\tFATAL_PERROR (_(\"File\"));\n\n      temp_string.string += buffer_desc.length;\n      temp_string.length -= buffer_desc.length;\n      *bufferpos = 0;\n      buffer_desc.string = *buffer;\n      buffer_desc.length = *buffersiz;\n      }\n\n    if (temp_string.length > 0) {\n      memmove (buffer_desc.string, temp_string.string, temp_string.length);\n      *bufferpos += temp_string.length;\n      }\n    }\n\n  if (end_record && record_delimiter != NULL) {\n    temp_string.string = record_delimiter->string;\n    temp_string.length = record_delimiter->length;\n\n    buffer_desc.string = *buffer + *bufferpos;\n    buffer_desc.length = *buffersiz - *bufferpos;\n\n    while (*bufferpos + temp_string.length > *buffersiz) {\n      /* Put as much as we can into the buffer */\n      memmove (buffer_desc.string, temp_string.string, buffer_desc.length);\n\n      /* Write the buffer and adjust */\n      return_code = fwrite (*buffer, 1, *buffersiz, stream);\n      if (return_code != *buffersiz)\n\tFATAL_PERROR (_(\"File\"));\n\n      temp_string.string += buffer_desc.length;\n      temp_string.length -= buffer_desc.length;\n      *bufferpos = 0;\n      buffer_desc.string = *buffer;\n      buffer_desc.length = *buffersiz;\n      }\n\n    if (temp_string.length > 0) {\n      memmove (buffer_desc.string, temp_string.string, temp_string.length);\n      *bufferpos += temp_string.length;\n      }\n    }\n\n  if (end_file && *bufferpos > 0) {\n    return_code = fwrite (*buffer, 1, *bufferpos, stream);\n    if (return_code != *bufferpos)\n      FATAL_PERROR (_(\"File\"));\n    }\n\n  return EXIT_SUCCESS;\n\n  }\n"
}