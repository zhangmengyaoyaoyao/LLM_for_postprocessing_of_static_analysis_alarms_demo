{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/elflink.c",
    "message": "Offset added: [-20, 91] (⇐ [-44, 67] + 24) Size: 4064 by call to `bfd_zalloc`.",
    "warning_function_name": "bfd_elf_gc_record_vtentry",
    "warning_line": "bfd_zalloc (abfd, sizeof (*h->vtable));",
    "warning_context": "bfd_boolean\nbfd_elf_gc_record_vtentry (bfd *abfd ATTRIBUTE_UNUSED,\n\t\t\t   asection *sec ATTRIBUTE_UNUSED,\n\t\t\t   struct elf_link_hash_entry *h,\n\t\t\t   bfd_vma addend)\n{\n  const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n  unsigned int log_file_align = bed->s->log_file_align;\n\n  if (!h->vtable)\n    {\n      h->vtable = (struct elf_link_virtual_table_entry *)\n          bfd_zalloc (abfd, sizeof (*h->vtable));\n      if (!h->vtable)\n\treturn FALSE;\n    }\n\n  if (addend >= h->vtable->size)\n    {\n      size_t size, bytes, file_align;\n      bfd_boolean *ptr = h->vtable->used;\n\n      /* While the symbol is undefined, we have to be prepared to handle\n\t a zero size.  */\n      file_align = 1 << log_file_align;\n      if (h->root.type == bfd_link_hash_undefined)\n\tsize = addend + file_align;\n      else\n\t{\n\t  size = h->size;\n\t  if (addend >= size)\n\t    {\n\t      /* Oops!  We've got a reference past the defined end of\n\t\t the table.  This is probably a bug -- shall we warn?  */\n\t      size = addend + file_align;\n\t    }\n\t}\n      size = (size + file_align - 1) & -file_align;\n\n      /* Allocate one extra entry for use as a \"done\" flag for the\n\t consolidation pass.  */\n      bytes = ((size >> log_file_align) + 1) * sizeof (bfd_boolean);\n\n      if (ptr)\n\t{\n\t  ptr = (bfd_boolean *) bfd_realloc (ptr - 1, bytes);\n\n\t  if (ptr != NULL)\n\t    {\n\t      size_t oldbytes;\n\n\t      oldbytes = (((h->vtable->size >> log_file_align) + 1)\n\t\t\t  * sizeof (bfd_boolean));\n\t      memset (((char *) ptr) + oldbytes, 0, bytes - oldbytes);\n\t    }\n\t}\n      else\n\tptr = (bfd_boolean *) bfd_zmalloc (bytes);\n\n      if (ptr == NULL)\n\treturn FALSE;\n\n      /* And arrange for that done flag to be at index -1.  */\n      h->vtable->used = ptr + 1;\n      h->vtable->size = size;\n    }\n\n  h->vtable->used[addend >> log_file_align] = TRUE;\n\n  return TRUE;\n}\n"
}