{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "libiberty/cplus-dem.c",
    "message": "Offset: [min(5, `name[*].strlen`), max(7, `name[*].strlen`)] Size: 6.",
    "warning_function_name": "ada_demangle",
    "warning_line": "strcpy (d, name);",
    "warning_context": "                  memcpy (d, operators[k][1], slen);\n                  d += slen;\n                  *d++ = '\"';\n                  break;\n                }\n            }\n          /* Operator not found.  */\n          if (operators[k][0] == NULL)\n            goto unknown;\n        }\n      else\n        {\n          /* Not a GNAT encoding.  */\n          goto unknown;\n        }\n\n      /* The name can be directly followed by some uppercase letters.  */\n      if (p[0] == 'T' && p[1] == 'K')\n        {\n          /* Task stuff.  */\n          if (p[2] == 'B' && p[3] == 0)\n            {\n              /* Subprogram for task body.  */\n              break;\n            }\n          else if (p[2] == '_' && p[3] == '_')\n            {\n              /* Inner declarations in a task.  */\n              p += 4;\n              *d++ = '.';\n              continue;\n            }\n          else\n            goto unknown;\n        }\n      if (p[0] == 'E' && p[1] == 0)\n        {\n          /* Exception name.  */\n          goto unknown;\n        }\n      if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)\n        {\n          /* Protected type subprogram.  */\n          break;\n        }\n      if ((*p == 'N' || *p == 'S') && p[1] == 0)\n        {\n          /* Enumerated type name table.  */\n          goto unknown;\n        }\n      if (p[0] == 'X')\n        {\n          /* Body nested.  */\n          p++;\n          while (p[0] == 'n' || p[0] == 'b')\n            p++;\n        }\n      if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))\n        {\n          /* Stream operations.  */\n          const char *name;\n          switch (p[1])\n            {\n            case 'R':\n              name = \"'Read\";\n              break;\n            case 'W':\n              name = \"'Write\";\n              break;\n            case 'I':\n              name = \"'Input\";\n              break;\n            case 'O':\n              name = \"'Output\";\n              break;\n            default:\n              goto unknown;\n            }\n          p += 2;\n          strcpy (d, name);\n          d += strlen (name);\n        }\n      else if (p[0] == 'D')\n        {\n          /* Controlled type operation.  */\n          const char *name;\n          switch (p[1])\n            {\n            case 'F':\n              name = \".Finalize\";\n              break;\n            case 'A':\n              name = \".Adjust\";\n              break;\n            default:\n              goto unknown;\n            }\n          strcpy (d, name);\n          d += strlen (name);\n          break;\n        }\n"
}