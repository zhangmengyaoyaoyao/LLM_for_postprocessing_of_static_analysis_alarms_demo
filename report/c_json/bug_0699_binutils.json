{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "libiberty/cplus-dem.c",
    "message": "Offset added: 29 Size: [1, +oo] by call to `string_prepend`.",
    "warning_function_name": "internal_cplus_demangle",
    "warning_line": "string_prepend (&decl, \"global constructors keyed to \");",
    "warning_context": "static char *\ninternal_cplus_demangle (struct work_stuff *work, const char *mangled)\n{\n\n  string decl;\n  int success = 0;\n  char *demangled = NULL;\n  int s1, s2, s3, s4;\n  s1 = work->constructor;\n  s2 = work->destructor;\n  s3 = work->static_type;\n  s4 = work->type_quals;\n  work->constructor = work->destructor = 0;\n  work->type_quals = TYPE_UNQUALIFIED;\n  work->dllimported = 0;\n\n  if ((mangled != NULL) && (*mangled != '\\0'))\n    {\n      string_init (&decl);\n\n      /* First check to see if gnu style demangling is active and if the\n\t string to be demangled contains a CPLUS_MARKER.  If so, attempt to\n\t recognize one of the gnu special forms rather than looking for a\n\t standard prefix.  In particular, don't worry about whether there\n\t is a \"__\" string in the mangled string.  Consider \"_$_5__foo\" for\n\t example.  */\n\n      if ((AUTO_DEMANGLING || GNU_DEMANGLING))\n\t{\n\t  success = gnu_special (work, &mangled, &decl);\n\t  if (!success)\n\t    {\n\t      delete_work_stuff (work);\n\t      string_delete (&decl);\n\t    }\n\t}\n      if (!success)\n\t{\n\t  success = demangle_prefix (work, &mangled, &decl);\n\t}\n      if (success && (*mangled != '\\0'))\n\t{\n\t  success = demangle_signature (work, &mangled, &decl);\n\t}\n      if (work->constructor == 2)\n        {\n          string_prepend (&decl, \"global constructors keyed to \");\n          work->constructor = 0;\n        }\n      else if (work->destructor == 2)\n        {\n          string_prepend (&decl, \"global destructors keyed to \");\n          work->destructor = 0;\n        }\n      else if (work->dllimported == 1)\n        {\n          string_prepend (&decl, \"import stub for \");\n          work->dllimported = 0;\n        }\n      demangled = mop_up (work, &decl, success);\n    }\n  work->constructor = s1;\n  work->destructor = s2;\n  work->static_type = s3;\n  work->type_quals = s4;\n  return demangled;\n}\n"
}