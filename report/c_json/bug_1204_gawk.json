{
    "Project": "gawk",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "debug.c",
    "message": "Offset: 0 Size: [0, 2] by call to `dupnode`.",
    "warning_function_name": "do_set_var",
    "warning_line": "*lhs = dupnode(val);",
    "warning_context": "int\ndo_set_var(CMDARG *arg, int cmd ATTRIBUTE_UNUSED)\n{\n\tNODE *r, *val;\n\tNODE **lhs;\n\tchar *name, *pname;\n\n\tswitch (arg->type) {\n\tcase D_variable:\n\t\tname = arg->a_string;\n\t\targ = arg->next;\n\t\tval = arg->a_node;\n\n\t\tif ((r = find_symbol(name, &pname)) == NULL)\n\t\t\tbreak;\n\n\t\tswitch (r->type) {\n\t\tcase Node_var_new:\n\t\t\tr->type = Node_var;\n\t\t\tr->var_value = dupnode(Nnull_string);\n\t\t\t/* fall through */\n\t\tcase Node_var:\n\t\t\tlhs = &r->var_value;\n\t\t\tunref(*lhs);\n\t\t\t*lhs = dupnode(val);\n\t\t\tif (pname == NULL && r->var_assign != NULL)\n\t\t\t\tr->var_assign();\n\t\t\tfprintf(out_fp, \"%s = \", name);\n\t\t\tprint_symbol(r, (pname != NULL));\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\td_error(_(\"`%s' is not a scalar variable\"), name);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\n\tcase D_subscript:\n\t{\n\t\tNODE *subs, *value;\n\t\tint count = arg->a_count;\n\n\t\tassert(count > 0);\n\t\tname = arg->a_string;\n\t\tr = find_array(name);\n\t\tif (r == NULL)\n\t\t\tbreak;\n\t\tfor (; count > 0; count--) {\n\t\t\targ = arg->next;\n\t\t\tsubs = arg->a_node;\n\t\t\tvalue = in_array(r, subs);\n\n\t\t\tif (count == 1) {\n\t\t\t\tif (value != NULL && value->type == Node_var_array)\n\t\t\t\t\td_error(_(\"attempt to use array `%s[\\\"%s\\\"]' in a scalar context\"),\n\t\t\t\t\t\t\t\tname, subs->stptr);\n\t\t\t\telse {\n\t\t\t\t\targ = arg->next;\n\t\t\t\t\tval = arg->a_node;\n\t\t\t\t\tlhs = assoc_lookup(r, subs);\n\t\t\t\t\tunref(*lhs);\n\t\t\t\t\t*lhs = dupnode(val);\n\t\t\t\t\tfprintf(out_fp, \"%s[\\\"%s\\\"] = \", name, subs->stptr);\n\t\t\t\t\tvalinfo(*lhs, fprintf, out_fp);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (value == NULL) {\n\t\t\t\t\tNODE *array;\n\t\t\t\t\tarray = make_array();\n\t\t\t\t\tarray->vname = estrdup(subs->stptr, subs->stlen);\n\t\t\t\t\tarray->parent_array = r;\n\t\t\t\t\tlhs = assoc_lookup(r, subs);\n\t\t\t\t\tunref(*lhs);\n\t\t\t\t\t*lhs = array;\n\t\t\t\t\tr = array;\n\t\t\t\t} else if (value->type != Node_var_array) {\n\t\t\t\t\td_error(_(\"attempt to use scalar `%s[\\\"%s\\\"]' as array\"),\n\t\t\t\t\t\t\tname, subs->stptr);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tr = value;\n\t\t\t\t\tname = r->vname;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\tbreak;\n\n\tcase D_field:\n\t{\n\t\tlong field_num;\n\t\tFunc_ptr assign = NULL;\n\n\t\tfield_num = get_number_si(arg->a_node);\n\t\tassert(field_num >= 0);\n\t\targ = arg->next;\n\t\tval = arg->a_node;\n\t\tlhs = get_field(field_num, &assign);\n\t\tunref(*lhs);\n\t\t*lhs = dupnode(val);\n\t\tif (assign)\n"
}