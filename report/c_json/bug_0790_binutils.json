{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/coffgen.c",
    "message": "Offset added: [-20, 219] (⇐ [-108, 131] + 88) Size: 4064 by call to `bfd_zalloc`.",
    "warning_function_name": "coff_find_nearest_line_with_names",
    "warning_line": "section->used_by_bfd = bfd_zalloc (abfd, amt);",
    "warning_context": "      && offset >= sec_data->offset)\n    {\n      i = sec_data->i;\n      *functionname_ptr = sec_data->function;\n      line_base = sec_data->line_base;\n    }\n  else\n    {\n      i = 0;\n      line_base = 0;\n    }\n\n  if (section->lineno != NULL)\n    {\n      bfd_vma last_value = 0;\n\n      l = &section->lineno[i];\n\n      for (; i < section->lineno_count; i++)\n\t{\n\t  if (l->line_number == 0)\n\t    {\n\t      /* Get the symbol this line number points at.  */\n\t      coff_symbol_type *coff = (coff_symbol_type *) (l->u.sym);\n\t      if (coff->symbol.value > offset)\n\t\tbreak;\n\t      *functionname_ptr = coff->symbol.name;\n\t      last_value = coff->symbol.value;\n\t      if (coff->native)\n\t\t{\n\t\t  combined_entry_type *s = coff->native;\n\n\t\t  BFD_ASSERT (s->is_sym);\n\t\t  s = s + 1 + s->u.syment.n_numaux;\n\n\t\t  /* In XCOFF a debugging symbol can follow the\n\t\t     function symbol.  */\n\t\t  if (s->u.syment.n_scnum == N_DEBUG)\n\t\t    s = s + 1 + s->u.syment.n_numaux;\n\n\t\t  /* S should now point to the .bf of the function.  */\n\t\t  if (s->u.syment.n_numaux)\n\t\t    {\n\t\t      /* The linenumber is stored in the auxent.  */\n\t\t      union internal_auxent *a = &((s + 1)->u.auxent);\n\n\t\t      line_base = a->x_sym.x_misc.x_lnsz.x_lnno;\n\t\t      *line_ptr = line_base;\n\t\t    }\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      if (l->u.offset > offset)\n\t\tbreak;\n\t      *line_ptr = l->line_number + line_base - 1;\n\t    }\n\t  l++;\n\t}\n\n      /* If we fell off the end of the loop, then assume that this\n\t symbol has no line number info.  Otherwise, symbols with no\n\t line number info get reported with the line number of the\n\t last line of the last symbol which does have line number\n\t info.  We use 0x100 as a slop to account for cases where the\n\t last line has executable code.  */\n      if (i >= section->lineno_count\n\t  && last_value != 0\n\t  && offset - last_value > 0x100)\n\t{\n\t  *functionname_ptr = NULL;\n\t  *line_ptr = 0;\n\t}\n    }\n\n  /* Cache the results for the next call.  */\n  if (sec_data == NULL && section->owner == abfd)\n    {\n      amt = sizeof (struct coff_section_tdata);\n      section->used_by_bfd = bfd_zalloc (abfd, amt);\n      sec_data = (struct coff_section_tdata *) section->used_by_bfd;\n    }\n  if (sec_data != NULL)\n    {\n      sec_data->offset = offset;\n      sec_data->i = i - 1;\n      sec_data->function = *functionname_ptr;\n      sec_data->line_base = line_base;\n    }\n\n  return TRUE;\n}\n\nbfd_boolean\ncoff_find_nearest_line (bfd *abfd,\n\t\t\tasymbol **symbols,\n\t\t\tasection *section,\n\t\t\tbfd_vma offset,\n\t\t\tconst char **filename_ptr,\n\t\t\tconst char **functionname_ptr,\n\t\t\tunsigned int *line_ptr,\n"
}