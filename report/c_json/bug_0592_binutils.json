{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "gas/app.c",
    "message": "The value read from fromlen was never initialized.",
    "warning_function_name": NaN,
    "warning_line": "ch = GET ();",
    "warning_context": "\t    {\n\t      /* This is a symbol character following another symbol\n\t\t character, with whitespace in between.  We skipped\n\t\t the whitespace earlier, so output it now.  */\n\t      UNGET (ch);\n\t      state = 3;\n\t      PUT (' ');\n\t      break;\n\t    }\n\n#ifdef TC_Z80\n\t  /* \"af'\" is a symbol containing '\\''.  */\n\t  if (state == 3 && (ch == 'a' || ch == 'A'))\n\t    {\n\t      state = 16;\n\t      PUT (ch);\n\t      ch = GET ();\n\t      if (ch == 'f' || ch == 'F')\n\t\t{\n\t\t  state = 17;\n\t\t  PUT (ch);\n\t\t  break;\n\t\t}\n\t      else\n\t\t{\n\t\t  state = 9;\n\t\t  if (ch == EOF || !IS_SYMBOL_COMPONENT (ch))\n\t\t    {\n\t\t      if (ch != EOF)\n\t\t\tUNGET (ch);\n\t\t      break;\n\t\t    }\n\t\t}\n\t    }\n#endif\n\t  if (state == 3)\n\t    state = 9;\n\n\t  /* This is a common case.  Quickly copy CH and all the\n\t     following symbol component or normal characters.  */\n\t  if (to + 1 < toend\n\t      && mri_state == NULL\n#if defined TC_ARM && defined OBJ_ELF\n\t      && symver_state == NULL\n#endif\n\t      )\n\t    {\n\t      char *s;\n\t      ptrdiff_t len;\n\n\t      for (s = from; s < fromend; s++)\n\t\t{\n\t\t  int type;\n\n\t\t  ch2 = *(unsigned char *) s;\n\t\t  type = lex[ch2];\n\t\t  if (type != 0\n\t\t      && type != LEX_IS_SYMBOL_COMPONENT)\n\t\t    break;\n\t\t}\n\n\t      if (s > from)\n\t\t/* Handle the last character normally, for\n\t\t   simplicity.  */\n\t\t--s;\n\n\t      len = s - from;\n\n\t      if (len > (toend - to) - 1)\n\t\tlen = (toend - to) - 1;\n\n\t      if (len > 0)\n\t\t{\n\t\t  PUT (ch);\n\t\t  memcpy (to, from, len);\n\t\t  to += len;\n\t\t  from += len;\n\t\t  if (to >= toend)\n\t\t    goto tofull;\n\t\t  ch = GET ();\n\t\t}\n\t    }\n\n\t  /* Fall through.  */\n\tdefault:\n\tde_fault:\n\t  /* Some relatively `normal' character.  */\n\t  if (state == 0)\n\t    {\n\t      state = 11;\t/* Now seeing label definition.  */\n\t    }\n\t  else if (state == 1)\n\t    {\n\t      state = 2;\t/* Ditto.  */\n\t    }\n\t  else if (state == 9)\n\t    {\n\t      if (!IS_SYMBOL_COMPONENT (ch))\n\t\tstate = 3;\n\t    }\n\t  else if (state == 10)\n"
}