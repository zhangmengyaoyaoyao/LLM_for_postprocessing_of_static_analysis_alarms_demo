{
    "Project": "bash",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Code_line": "\t\tprint_deferred_heredocs (inside_function_def ? \"\" : \";\");",
    "Code_function": "make_command_string_internal (command)\n     COMMAND *command;\n{\n  char s[3];\n\n  if (command == 0)\n    cprintf (\"\");\n  else\n    {\n      if (skip_this_indent)\n\tskip_this_indent--;\n      else\n\tindent (indentation);\n\n      if (command->flags & CMD_TIME_PIPELINE)\n\t{\n\t  cprintf (\"time \");\n\t  if (command->flags & CMD_TIME_POSIX)\n\t    cprintf (\"-p \");\n\t}\n\n      if (command->flags & CMD_INVERT_RETURN)\n\tcprintf (\"! \");\n\n      switch (command->type)\n\t{\n\tcase cm_for:\n\t  print_for_command (command->value.For);\n\t  break;\n\n#if defined (ARITH_FOR_COMMAND)\n\tcase cm_arith_for:\n\t  print_arith_for_command (command->value.ArithFor);\n\t  break;\n#endif\n\n#if defined (SELECT_COMMAND)\n\tcase cm_select:\n\t  print_select_command (command->value.Select);\n\t  break;\n#endif\n\n\tcase cm_case:\n\t  print_case_command (command->value.Case);\n\t  break;\n\n\tcase cm_while:\n\t  print_while_command (command->value.While);\n\t  break;\n\n\tcase cm_until:\n\t  print_until_command (command->value.While);\n\t  break;\n\n\tcase cm_if:\n\t  print_if_command (command->value.If);\n\t  break;\n\n#if defined (DPAREN_ARITHMETIC)\n\tcase cm_arith:\n\t  print_arith_command (command->value.Arith->exp);\n\t  break;\n#endif\n\n#if defined (COND_COMMAND)\n\tcase cm_cond:\n\t  print_cond_command (command->value.Cond);\n\t  break;\n#endif\n\n\tcase cm_simple:\n\t  print_simple_command (command->value.Simple);\n\t  break;\n\n\tcase cm_connection:\n\n\t  skip_this_indent++;\n\t  printing_connection++;\n\t  make_command_string_internal (command->value.Connection->first);\n\n\t  switch (command->value.Connection->connector)\n\t    {\n\t    case '&':\n\t    case '|':\n\t      {\n\t\tchar c = command->value.Connection->connector;\n\n\t\ts[0] = ' ';\n\t\ts[1] = c;\n\t\ts[2] = '\\0';\n\n\t\tprint_deferred_heredocs (s);\n\n\t\tif (c != '&' || command->value.Connection->second)\n\t\t  {\n\t\t    cprintf (\" \");\n\t\t    skip_this_indent++;\n\t\t  }\n\t      }\n\t      break;\n\n\t    case AND_AND:\n\t      print_deferred_heredocs (\" && \");\n\t      if (command->value.Connection->second)\n\t\tskip_this_indent++;\n\t      break;\n\n\t    case OR_OR:\n\t      print_deferred_heredocs (\" || \");\n\t      if (command->value.Connection->second)\n\t\tskip_this_indent++;\n\t      break;\n\n\t    case ';':\n\t      if (deferred_heredocs == 0)\n\t\t{\n\t\t  if (was_heredoc == 0)\n\t\t    cprintf (\";\");\n\t\t  else\n\t\t    was_heredoc = 0;\n\t\t}\n\t      else\n\t\tprint_deferred_heredocs (inside_function_def ? \"\" : \";\");\n\n\t      if (inside_function_def)\n\t\tcprintf (\"\\n\");\n\t      else\n\t\t{\n\t\t  cprintf (\" \");\n\t\t  if (command->value.Connection->second)\n\t\t    skip_this_indent++;\n\t\t}\n\t      break;\n\n\t    default:\n\t      cprintf (_(\"print_command: bad connector `%d'\"),\n\t\t       command->value.Connection->connector);\n\t      break;\n\t    }\n\n\t  make_command_string_internal (command->value.Connection->second);\n\t  PRINT_DEFERRED_HEREDOCS (\"\");\n\t  printing_connection--;\n\t  break;\n\n\tcase cm_function_def:\n\t  print_function_def (command->value.Function_def);\n\t  break;\n\n\tcase cm_group:\n\t  print_group_command (command->value.Group);\n\t  break;\n\n\tcase cm_subshell:\n\t  cprintf (\"( \");\n\t  skip_this_indent++;\n\t  make_command_string_internal (command->value.Subshell->command);\n\t  PRINT_DEFERRED_HEREDOCS (\"\");\n\t  cprintf (\" )\");\n\t  break;\n\n\tcase cm_coproc:\n\t  cprintf (\"coproc %s \", command->value.Coproc->name);\n\t  skip_this_indent++;\n\t  make_command_string_internal (command->value.Coproc->command);\n\t  break;\n\n\tdefault:\n\t  command_error (\"print_command\", CMDERR_BADTYPE, command->type, 0);\n\t  break;\n\t}\n\n\n      if (command->redirects)\n\t{\n\t  cprintf (\" \");\n\t  print_redirection_list (command->redirects);\n\t}\n    }\n}"
}