{
    "Project": "bash",
    "Tool": "Cppcheck",
    "category": "memleakOnRealloc",
    "file": "lib/glob/glob.c",
    "message": "Common realloc mistake: 'result' nulled but not freed upon failure",
    "warning_function_name": NaN,
    "warning_line": "result =",
    "warning_context": "\n      /* We have successfully globbed the preceding directory name.\n\t For each name in DIRECTORIES, call glob_vector on it and\n\t FILENAME.  Concatenate the results together.  */\n      for (i = 0; directories[i] != NULL; ++i)\n\t{\n\t  char **temp_results;\n\t  int shouldbreak;\n\n\t  shouldbreak = 0;\n\t  /* XXX -- we've recursively scanned any directories resulting from\n\t     a `**', so turn off the flag.  We turn it on again below if\n\t     filename is `**' */\n\t  /* Scan directory even on a NULL filename.  That way, `*h/'\n\t     returns only directories ending in `h', instead of all\n\t     files ending in `h' with a `/' appended. */\n\t  dname = directories[i];\n\t  dflags = flags & ~(GX_MARKDIRS|GX_ALLDIRS|GX_ADDCURDIR);\n\t  if ((flags & GX_GLOBSTAR) && filename[0] == '*' && filename[1] == '*' && filename[2] == '\\0')\n\t    dflags |= GX_ALLDIRS|GX_ADDCURDIR;\n\t  if (dname[0] == '\\0' && filename[0])\n\t    {\n\t      dflags |= GX_NULLDIR;\n\t      dname = \".\";\t/* treat null directory name and non-null filename as current directory */\n\t    }\n\t  temp_results = glob_vector (filename, dname, dflags);\n\n\t  /* Handle error cases. */\n\t  if (temp_results == NULL)\n\t    goto memory_error;\n\t  else if (temp_results == (char **)&glob_error_return)\n\t    /* This filename is probably not a directory.  Ignore it.  */\n\t    ;\n\t  else\n\t    {\n\t      char **array;\n\t      register unsigned int l;\n\n\t      /* If we're expanding **, we don't need to glue the directory\n\t\t name to the results; we've already done it in glob_vector */\n\t      if ((dflags & GX_ALLDIRS) && filename[0] == '*' && filename[1] == '*' && (filename[2] == '\\0' || filename[2] == '/'))\n\t\t{\n\t\t  /* When do we remove null elements from temp_results?  And\n\t\t     how to avoid duplicate elements in the final result? */\n\t\t  /* If (dflags & GX_NULLDIR) glob_filename potentially left a\n\t\t     NULL placeholder in the temp results just in case\n\t\t     glob_vector/glob_dir_to_array did something with it, but\n\t\t     if it didn't, and we're not supposed to be passing them\n\t\t     through for some reason ((flags & GX_NULLDIR) == 0) we\n\t\t     need to remove all the NULL elements from the beginning\n\t\t     of TEMP_RESULTS. */\n\t\t  /* If we have a null directory name and ** as the filename,\n\t\t     we have just searched for everything from the current\n\t\t     directory on down. Break now (shouldbreak = 1) to avoid\n\t\t     duplicate entries in the final result. */\n#define NULL_PLACEHOLDER(x)\t((x) && *(x) && **(x) == 0)\n\t\t  if ((dflags & GX_NULLDIR) && (flags & GX_NULLDIR) == 0 &&\n\t\t\tNULL_PLACEHOLDER (temp_results))\n#undef NULL_PLACEHOLDER\n\t\t    {\n\t\t      register int i, n;\n\t\t      for (n = 0; temp_results[n] && *temp_results[n] == 0; n++)\n\t\t\t;\n\t\t      i = n;\n\t\t      do\n\t\t\ttemp_results[i - n] = temp_results[i];\n\t\t      while (temp_results[i++] != 0);\n\t\t      array = temp_results;\n\t\t      shouldbreak = 1;\n\t\t    }\n\t          else\n\t\t    array = temp_results;\n\t\t}\n\t      else\n\t\tarray = glob_dir_to_array (directories[i], temp_results, flags);\n\t      l = 0;\n\t      while (array[l] != NULL)\n\t\t++l;\n\n\t      result =\n\t\t(char **)realloc (result, (result_size + l) * sizeof (char *));\n\n\t      if (result == NULL)\n\t\tgoto memory_error;\n\n\t      for (l = 0; array[l] != NULL; ++l)\n\t\tresult[result_size++ - 1] = array[l];\n\n\t      result[result_size - 1] = NULL;\n\n\t      /* Note that the elements of ARRAY are not freed.  */\n\t      if (array != temp_results)\n\t\tfree ((char *) array);\n\t      else if ((dflags & GX_ALLDIRS) && filename[0] == '*' && filename[1] == '*' && filename[2] == '\\0')\n\t\tfree (temp_results);\t/* expanding ** case above */\n\n\t      if (shouldbreak)\n\t\tbreak;\n\t    }\n\t}\n      /* Free the directories.  */\n"
}