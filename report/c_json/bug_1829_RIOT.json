{
    "project": "RIOT",
    "tool": "Cppcheck",
    "category": "arrayIndexOutOfBoundsCond",
    "file": "cpu/esp_common/esp-wifi/esp_wifi_netdev.c",
    "message": "Either the condition 'reason<200' is redundant or the array '_esp_wifi_disc_reasons[29]' is accessed at index 199, which is out of bounds.",
    "warning_function_name": "_esp_system_event_handler",
    "warning_line": "reason_str = _esp_wifi_disc_reasons[reason];",
    "warning_context": "static esp_err_t IRAM_ATTR _esp_system_event_handler(void *ctx, system_event_t *event)\n{\n    assert(event != NULL);\n\n    esp_err_t result;\n\n    uint8_t reason;\n    const char* reason_str = \"UNKNOWN\";\n\n    switch(event->event_id) {\n        case SYSTEM_EVENT_STA_START:\n            _esp_wifi_started = 1;\n            ESP_WIFI_DEBUG(\"WiFi started\");\n            result = esp_wifi_connect();\n            if (result != ESP_OK) {\n                ESP_WIFI_LOG_ERROR(\"esp_wifi_connect failed with return \"\n                                   \"value %d\", result);\n            }\n            break;\n\n        case SYSTEM_EVENT_STA_STOP:\n            _esp_wifi_started = 0;\n            ESP_WIFI_DEBUG(\"WiFi stopped\");\n            break;\n\n        case SYSTEM_EVENT_SCAN_DONE:\n            ESP_WIFI_DEBUG(\"WiFi scan done\");\n            break;\n\n        case SYSTEM_EVENT_STA_CONNECTED:\n            ESP_WIFI_LOG_INFO(\"WiFi connected to ssid %s, channel %d\",\n                              event->event_info.connected.ssid,\n                              event->event_info.connected.channel);\n            _esp_wifi_channel = event->event_info.connected.channel;\n#ifdef MODULE_ESP_NOW\n            extern void esp_now_set_channel(uint8_t channel);\n            esp_now_set_channel(_esp_wifi_channel);\n#endif\n            /* register RX callback function */\n            esp_wifi_internal_reg_rxcb(ESP_IF_WIFI_STA, _esp_wifi_rx_cb);\n\n            _esp_wifi_dev.connected = true;\n            _esp_wifi_dev.event_conn++;\n            netdev_trigger_event_isr(&_esp_wifi_dev.netdev);\n\n            break;\n\n        case SYSTEM_EVENT_STA_DISCONNECTED:\n            reason = event->event_info.disconnected.reason;\n            if (reason < REASON_BEACON_TIMEOUT) {\n                reason_str = _esp_wifi_disc_reasons[reason];\n            }\n            else if (reason <= REASON_HANDSHAKE_TIMEOUT) {\n                reason_str = _esp_wifi_disc_reasons[reason - INDEX_BEACON_TIMEOUT];\n            }\n            ESP_WIFI_LOG_INFO(\"WiFi disconnected from ssid %s, reason %d (%s)\",\n                              event->event_info.disconnected.ssid,\n                              event->event_info.disconnected.reason, reason_str);\n\n            /* unregister RX callback function */\n            esp_wifi_internal_reg_rxcb(ESP_IF_WIFI_STA, NULL);\n\n            _esp_wifi_dev.connected = false;\n            _esp_wifi_dev.event_disc++;\n            netdev_trigger_event_isr(&_esp_wifi_dev.netdev);\n\n            if (reason != WIFI_REASON_ASSOC_LEAVE) {\n                /* call disconnect to reset internal state */\n                result = esp_wifi_disconnect();\n                if (result != ESP_OK) {\n                    ESP_WIFI_LOG_ERROR(\"esp_wifi_disconnect failed with \"\n                                       \"return value %d\", result);\n                    return result;\n                }\n\n                /* try to reconnect */\n                if (_esp_wifi_started && ((result = esp_wifi_connect()) != ESP_OK)) {\n                   ESP_WIFI_LOG_ERROR(\"esp_wifi_connect failed with \"\n                                      \"return value %d\", result);\n                }\n            }\n\n            break;\n\n        default:\n            ESP_WIFI_DEBUG(\"event %d\", event->event_id);\n            break;\n    }\n    return ESP_OK;\n}\n"
}