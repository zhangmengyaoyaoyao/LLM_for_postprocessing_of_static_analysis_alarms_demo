{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Code_line": "  a = (Elf_Internal_Vernaux *) bfd_zalloc (rinfo->info->output_bfd, amt);",
    "Code_function": "_bfd_elf_link_find_version_dependencies (struct elf_link_hash_entry *h,\n\t\t\t\t\t void *data)\n{\n  struct elf_find_verdep_info *rinfo = (struct elf_find_verdep_info *) data;\n  Elf_Internal_Verneed *t;\n  Elf_Internal_Vernaux *a;\n  bfd_size_type amt;\n\n  /* We only care about symbols defined in shared objects with version\n     information.  */\n  if (!h->def_dynamic\n      || h->def_regular\n      || h->dynindx == -1\n      || h->verinfo.verdef == NULL\n      || (elf_dyn_lib_class (h->verinfo.verdef->vd_bfd)\n\t  & (DYN_AS_NEEDED | DYN_DT_NEEDED | DYN_NO_NEEDED)))\n    return TRUE;\n\n  /* See if we already know about this version.  */\n  for (t = elf_tdata (rinfo->info->output_bfd)->verref;\n       t != NULL;\n       t = t->vn_nextref)\n    {\n      if (t->vn_bfd != h->verinfo.verdef->vd_bfd)\n\tcontinue;\n\n      for (a = t->vn_auxptr; a != NULL; a = a->vna_nextptr)\n\tif (a->vna_nodename == h->verinfo.verdef->vd_nodename)\n\t  return TRUE;\n\n      break;\n    }\n\n  /* This is a new version.  Add it to tree we are building.  */\n\n  if (t == NULL)\n    {\n      amt = sizeof *t;\n      t = (Elf_Internal_Verneed *) bfd_zalloc (rinfo->info->output_bfd, amt);\n      if (t == NULL)\n\t{\n\t  rinfo->failed = TRUE;\n\t  return FALSE;\n\t}\n\n      t->vn_bfd = h->verinfo.verdef->vd_bfd;\n      t->vn_nextref = elf_tdata (rinfo->info->output_bfd)->verref;\n      elf_tdata (rinfo->info->output_bfd)->verref = t;\n    }\n\n  amt = sizeof *a;\n  a = (Elf_Internal_Vernaux *) bfd_zalloc (rinfo->info->output_bfd, amt);\n  if (a == NULL)\n    {\n      rinfo->failed = TRUE;\n      return FALSE;\n    }\n\n  /* Note that we are copying a string pointer here, and testing it\n     above.  If bfd_elf_string_from_elf_section is ever changed to\n     discard the string data when low in memory, this will have to be\n     fixed.  */\n  a->vna_nodename = h->verinfo.verdef->vd_nodename;\n\n  a->vna_flags = h->verinfo.verdef->vd_flags;\n  a->vna_nextptr = t->vn_auxptr;\n\n  h->verinfo.verdef->vd_exp_refno = rinfo->vers;\n  ++rinfo->vers;\n\n  a->vna_other = h->verinfo.verdef->vd_exp_refno + 1;\n\n  t->vn_auxptr = a;\n\n  return TRUE;\n}"
}