{
    "Project": "gawk",
    "Tool": "Infer",
    "category": "NULL_DEREFERENCE",
    "file": "debug.c",
    "message": "pointer `tmp` last assigned on line 4952 could be null and is dereferenced at line 4967, column 5.",
    "warning_function_name": "do_print_f",
    "warning_line": "tmp[i] = r->var_value;",
    "warning_context": "int\ndo_print_f(CMDARG *arg, int cmd ATTRIBUTE_UNUSED)\n{\n\tint count = 0;\n\tint i;\n\tCMDARG *a;\n\tNODE **tmp;\n\tchar *name;\n\tNODE *r;\n\tvolatile jmp_buf fatal_tag_stack;\n\n\t/* count maximum required size for tmp */\n\tfor (a = arg; a != NULL ; a = a->next)\n\t\tcount++;\n\temalloc(tmp, NODE **, count * sizeof(NODE *), \"do_print_f\");\n\n\tfor (i = 0, a = arg; a != NULL ; i++, a = a->next) {\n\t\tswitch (a->type) {\n\t\tcase D_variable:\n\t\t\tname = a->a_string;\n\t\t\tr = find_symbol(name, NULL);\n\t\t\tif (r == NULL)\n\t\t\t\tgoto done;\n\t\t\tif (r->type == Node_var_new)\n\t\t\t\ttmp[i] = Nnull_string;\n\t\t\telse if (r->type != Node_var) {\n\t\t\t\td_error(_(\"`%s' is not a scalar variable\"), name);\n\t\t\t\tgoto done;\n\t\t\t} else\n\t\t\t\ttmp[i] = r->var_value;\n\t\t\tbreak;\n\t\tcase D_field:\n\t\t{\n\t\t\tlong field_num;\n\t\t\tr = a->a_node;\n\t\t\tfield_num = get_number_si(r);\n\t\t\ttmp[i] = *get_field(field_num, NULL);\n\t\t}\n\t\t\tbreak;\n\t\tcase D_subscript:\n\t\t{\n\t\t\tint cnt = a->a_count;\n\t\t\tname = a->a_string;\n\t\t\tr = find_array(name);\n\t\t\tif (r == NULL)\n\t\t\t\tgoto done;\n\n\t\t\tfor (; cnt > 0; cnt--) {\n\t\t\t\tNODE *value, *subs;\n\t\t\t\ta = a->next;\n\t\t\t\tsubs = a->a_node;\n\t\t\t\tvalue = in_array(r, subs);\n\t\t\t\tif (cnt == 1) {\n\t\t\t\t\tif (value == NULL)\n\t\t\t\t\t\ttmp[i] = Nnull_string;\t\t/* FIXME: goto done ? */\n\t\t\t\t\telse if (value->type == Node_var_array) {\n\t\t\t\t\t\td_error(_(\"attempt to use array `%s[\\\"%s\\\"]' in a scalar context\"),\n\t\t\t\t\t\t\t\t\tname, subs->stptr);\n\t\t\t\t\t\tgoto done;\n\t\t\t\t\t} else \n\t\t\t\t\t\ttmp[i] = value;\n\t\t\t\t} else {\n\t\t\t\t\tif (value == NULL) {\n\t\t\t\t\t\td_error(_(\"[\\\"%s\\\"] not in array `%s'\"),\n\t\t\t\t\t\t\t\t\tsubs->stptr, name);\n\t\t\t\t\t\tgoto done;\n\t\t\t\t\t} else if (value->type != Node_var_array) {\n\t\t\t\t\t\td_error(_(\"attempt to use scalar `%s[\\\"%s\\\"]' as array\"),\n\t\t\t\t\t\t\t\t\tname, subs->stptr);\n\t\t\t\t\t\tgoto done;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr = value;\n\t\t\t\t\t\tname = r->vname;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\tbreak;\t\t\t \n\t\tcase D_node:\n\t\t\ttmp[i] = a->a_node;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\ttmp[0] = force_string(tmp[0]);\n\n\tPUSH_BINDING(fatal_tag_stack, fatal_tag, fatal_tag_valid);\n\tif (setjmp(fatal_tag) == 0)\n\t\tr = format_tree(tmp[0]->stptr, tmp[0]->stlen, tmp, i);\n\telse {\n\t\t/* fatal error, restore exit_val of program */\n\t\texit_val = EXIT_SUCCESS;\n\t\tr = NULL;\n\t}\n\tPOP_BINDING(fatal_tag_stack, fatal_tag, fatal_tag_valid);\n\n\tif (r != NULL) {\n\t\t(void) fwrite(r->stptr, sizeof(char), r->stlen, out_fp);\n\t\tunref(r);\n"
}