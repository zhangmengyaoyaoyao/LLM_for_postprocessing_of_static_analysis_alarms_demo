{
    "project": "binutils",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "opcodes/i386-dis.c",
    "message": "The value read from last[_] was never initialized.",
    "warning_function_name": "putop",
    "warning_line": "if (last[0] == 'X')",
    "warning_context": "\t\t*obufp++ = 's';\n\t    }\n\t  else\n\t    {\n\t      if (prefixes & PREFIX_DATA)\n\t\t*obufp++ = 'd';\n\t      else\n\t\t*obufp++ = 's';\n\t      used_prefixes |= (prefixes & PREFIX_DATA);\n\t    }\n\t  break;\n\tcase 'Y':\n\t  if (l == 0 && len == 1)\n\t    {\n\t      if (intel_syntax || !(sizeflag & SUFFIX_ALWAYS))\n\t\tbreak;\n\t      if (rex & REX_W)\n\t\t{\n\t\t  USED_REX (REX_W);\n\t\t  *obufp++ = 'q';\n\t\t}\n\t      break;\n\t    }\n\t  else\n\t    {\n\t      if (l != 1 || len != 2 || last[0] != 'X')\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\t      if (!need_vex)\n\t\tabort ();\n\t      if (intel_syntax\n\t\t  || (modrm.mod == 3 && !(sizeflag & SUFFIX_ALWAYS)))\n\t\tbreak;\n\t      switch (vex.length)\n\t\t{\n\t\tcase 128:\n\t\t  *obufp++ = 'x';\n\t\t  break;\n\t\tcase 256:\n\t\t  *obufp++ = 'y';\n\t\t  break;\n\t\tdefault:\n\t\t  abort ();\n\t\t}\n\t    }\n\t  break;\n\tcase 'W':\n\t  if (l == 0 && len == 1)\n\t    {\n\t      /* operand size flag for cwtl, cbtw */\n\t      USED_REX (REX_W);\n\t      if (rex & REX_W)\n\t\t{\n\t\t  if (intel_syntax)\n\t\t    *obufp++ = 'd';\n\t\t  else\n\t\t    *obufp++ = 'l';\n\t\t}\n\t      else if (sizeflag & DFLAG)\n\t\t*obufp++ = 'w';\n\t      else\n\t\t*obufp++ = 'b';\n\t      if (!(rex & REX_W))\n\t\tused_prefixes |= (prefixes & PREFIX_DATA);\n\t    }\n\t  else\n\t    {\n\t      if (l != 1\n\t\t  || len != 2\n\t\t  || (last[0] != 'X'\n\t\t      && last[0] != 'L'))\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\t      if (!need_vex)\n\t\tabort ();\n\t      if (last[0] == 'X')\n\t\t*obufp++ = vex.w ? 'd': 's';\n\t      else\n\t\t*obufp++ = vex.w ? 'q': 'd';\n\t    }\n\t  break;\n\t}\n      alt = 0;\n    }\n  *obufp = 0;\n  mnemonicendp = obufp;\n  return 0;\n}\n\nstatic void\noappend (const char *s)\n{\n  obufp = stpcpy (obufp, s);\n}\n\nstatic void\nappend_seg (void)\n"
}