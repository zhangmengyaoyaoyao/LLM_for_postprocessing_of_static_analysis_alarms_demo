{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Message": "Offset added: [16, +oo] (‚áê [0, +oo] + [16, +oo]) Size: [0, +oo] by call to `bfd_check_format_matches`.",
    "Code_line": "  else if (bfd_check_format_matches (ibfd, bfd_object, &obj_matching))",
    "Code_function": "copy_file (const char *input_filename, const char *output_filename,\n\t   const char *input_target,   const char *output_target,\n\t   const bfd_arch_info_type *input_arch)\n{\n  bfd *ibfd;\n  char **obj_matching;\n  char **core_matching;\n  off_t size = get_file_size (input_filename);\n\n  if (size < 1)\n    {\n      if (size == 0)\n\tnon_fatal (_(\"error: the input file '%s' is empty\"),\n\t\t   input_filename);\n      status = 1;\n      return;\n    }\n\n  /* To allow us to do \"strip *\" without dying on the first\n     non-object file, failures are nonfatal.  */\n  ibfd = bfd_openr (input_filename, input_target);\n  if (ibfd == NULL)\n    {\n      bfd_nonfatal_message (input_filename, NULL, NULL, NULL);\n      status = 1;\n      return;\n    }\n\n  switch (do_debug_sections)\n    {\n    case compress:\n      ibfd->flags |= BFD_COMPRESS;\n      break;\n    case decompress:\n      ibfd->flags |= BFD_DECOMPRESS;\n      break;\n    default:\n      break;\n    }\n\n  if (bfd_check_format (ibfd, bfd_archive))\n    {\n      bfd_boolean force_output_target;\n      bfd *obfd;\n\n      /* bfd_get_target does not return the correct value until\n         bfd_check_format succeeds.  */\n      if (output_target == NULL)\n\t{\n\t  output_target = bfd_get_target (ibfd);\n\t  force_output_target = FALSE;\n\t}\n      else\n\tforce_output_target = TRUE;\n\n      obfd = bfd_openw (output_filename, output_target);\n      if (obfd == NULL)\n\t{\n\t  bfd_nonfatal_message (output_filename, NULL, NULL, NULL);\n\t  status = 1;\n\t  return;\n\t}\n      /* This is a no-op on non-Coff targets.  */\n      set_long_section_mode (obfd, ibfd, long_section_names);\n\n      copy_archive (ibfd, obfd, output_target, force_output_target, input_arch);\n    }\n  else if (bfd_check_format_matches (ibfd, bfd_object, &obj_matching))\n    {\n      bfd *obfd;\n    do_copy:\n\n      /* bfd_get_target does not return the correct value until\n         bfd_check_format succeeds.  */\n      if (output_target == NULL)\n\toutput_target = bfd_get_target (ibfd);\n\n      obfd = bfd_openw (output_filename, output_target);\n      if (obfd == NULL)\n \t{\n \t  bfd_nonfatal_message (output_filename, NULL, NULL, NULL);\n \t  status = 1;\n \t  return;\n \t}\n      /* This is a no-op on non-Coff targets.  */\n      set_long_section_mode (obfd, ibfd, long_section_names);\n\n      if (! copy_object (ibfd, obfd, input_arch))\n\tstatus = 1;\n\n      /* PR 17512: file: 0f15796a.\n\t If the file could not be copied it may not be in a writeable\n\t state.  So use bfd_close_all_done to avoid the possibility of\n\t writing uninitialised data into the file.  */\n      if (! (status ? bfd_close_all_done (obfd) : bfd_close (obfd)))\n\t{\n\t  status = 1;\n\t  bfd_nonfatal_message (output_filename, NULL, NULL, NULL);\n\t  return;\n\t}\n\n      if (!bfd_close (ibfd))\n\t{\n\t  status = 1;\n\t  bfd_nonfatal_message (input_filename, NULL, NULL, NULL);\n\t  return;\n\t}\n    }\n  else\n    {\n      bfd_error_type obj_error = bfd_get_error ();\n      bfd_error_type core_error;\n\n      if (bfd_check_format_matches (ibfd, bfd_core, &core_matching))\n\t{\n\t  /* This probably can't happen..  */\n\t  if (obj_error == bfd_error_file_ambiguously_recognized)\n\t    free (obj_matching);\n\t  goto do_copy;\n\t}\n\n      core_error = bfd_get_error ();\n      /* Report the object error in preference to the core error.  */\n      if (obj_error != core_error)\n\tbfd_set_error (obj_error);\n\n      bfd_nonfatal_message (input_filename, NULL, NULL, NULL);\n\n      if (obj_error == bfd_error_file_ambiguously_recognized)\n\t{\n\t  list_matching_formats (obj_matching);\n\t  free (obj_matching);\n\t}\n      if (core_error == bfd_error_file_ambiguously_recognized)\n\t{\n\t  list_matching_formats (core_matching);\n\t  free (core_matching);\n\t}\n\n      status = 1;\n    }\n}"
}