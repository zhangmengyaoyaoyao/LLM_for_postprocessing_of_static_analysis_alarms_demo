{
    "project": "RIOT",
    "tool": "Cppcheck",
    "category": "Null Pointer Dereference",
    "file": "drivers/sht3x/sht3x.c",
    "message": "Either the condition 'dev!=NULL' is redundant or there is possible null pointer dereference: dev.",
    "warning_function_name": "_reset",
    "warning_line": "DEBUG_DEV(\"\", dev);",
    "warning_context": "static int _reset (sht3x_dev_t* dev)\n{\n    ASSERT_PARAM (dev != NULL);\n\n    DEBUG_DEV(\"\", dev);\n\n    /*\n     * Sensor can only be soft reset in idle mode. Therefore, we\n     * send a break and wait 1 ms. After that the sensor should be\n     * in idle mode. We don't check I2C errors at this moment.\n     */\n    _send_command(dev, SHT3X_CMD_BREAK);\n    xtimer_usleep (1000);\n\n    /* send the soft-reset command */\n    if (_send_command(dev, SHT3X_CMD_RESET) != SHT3X_OK) {\n        DEBUG_DEV(\"reset failed, could not send SHT3X_CMD_RESET\", dev);\n        return -SHT3X_ERROR_I2C;\n    }\n\n    /* wait for 2 ms, the time needed to restart (according to datasheet 0.5 ms) */\n    xtimer_usleep (2000);\n\n    /* send reset command */\n    if (_send_command(dev, SHT3X_CMD_CLEAR_STATUS) != SHT3X_OK) {\n        DEBUG_DEV(\"reset failed, could not send SHT3X_CMD_CLEAR_STATUS\", dev);\n        return -SHT3X_ERROR_I2C;\n    }\n\n    /* sensor needs some time to process the command */\n    xtimer_usleep (500);\n\n    uint16_t status;\n    int res = SHT3X_OK;\n\n    /* read the status after reset */\n    if ((res = _status(dev, &status)) != SHT3X_OK) {\n        return res;\n    }\n\n    /* status register should be 0x0000 after a reset */\n    if (status != 0) {\n        DEBUG_DEV(\"reset failed, sensor status is status=%04x\", dev, status);\n        return -SHT3X_ERROR_STATUS;\n    }\n\n    DEBUG_DEV(\"sensor status=%04x\", dev, status);\n\n    return res;\n}\n"
}