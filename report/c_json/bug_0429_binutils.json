{
    "Project": "binutils",
    "Tool": "Cppcheck",
    "category": "uninitvar",
    "file": "bfd/elf64-ppc.c",
    "message": "Uninitialized variable: *pp",
    "warning_function_name": "dec_dynrel_count",
    "warning_line": "while ((p = *pp) != NULL)",
    "warning_context": "    case R_PPC64_ADDR32:\n    case R_PPC64_UADDR16:\n    case R_PPC64_UADDR32:\n    case R_PPC64_UADDR64:\n    case R_PPC64_TOC:\n      break;\n    }\n\n  if (local_syms != NULL)\n    {\n      unsigned long r_symndx;\n      bfd *ibfd = sec->owner;\n\n      r_symndx = ELF64_R_SYM (r_info);\n      if (!get_sym_h (&h, &sym, &sym_sec, NULL, local_syms, r_symndx, ibfd))\n\treturn FALSE;\n    }\n\n  if ((info->shared\n       && (must_be_dyn_reloc (info, r_type)\n\t   || (h != NULL\n\t       && (!SYMBOLIC_BIND (info, h)\n\t\t   || h->root.type == bfd_link_hash_defweak\n\t\t   || !h->def_regular))))\n      || (ELIMINATE_COPY_RELOCS\n\t  && !info->shared\n\t  && h != NULL\n\t  && (h->root.type == bfd_link_hash_defweak\n\t      || !h->def_regular)))\n    ;\n  else\n    return TRUE;\n\n  if (h != NULL)\n    {\n      struct elf_dyn_relocs *p;\n      struct elf_dyn_relocs **pp;\n      pp = &((struct ppc_link_hash_entry *) h)->dyn_relocs;\n\n      /* elf_gc_sweep may have already removed all dyn relocs associated\n\t with local syms for a given section.  Also, symbol flags are\n\t changed by elf_gc_sweep_symbol, confusing the test above.  Don't\n\t report a dynreloc miscount.  */\n      if (*pp == NULL && info->gc_sections)\n\treturn TRUE;\n\n      while ((p = *pp) != NULL)\n\t{\n\t  if (p->sec == sec)\n\t    {\n\t      if (!must_be_dyn_reloc (info, r_type))\n\t\tp->pc_count -= 1;\n\t      p->count -= 1;\n\t      if (p->count == 0)\n\t\t*pp = p->next;\n\t      return TRUE;\n\t    }\n\t  pp = &p->next;\n\t}\n    }\n  else\n    {\n      struct ppc_dyn_relocs *p;\n      struct ppc_dyn_relocs **pp;\n      void *vpp;\n      bfd_boolean is_ifunc;\n\n      if (local_syms == NULL)\n\tsym_sec = bfd_section_from_elf_index (sec->owner, sym->st_shndx);\n      if (sym_sec == NULL)\n\tsym_sec = sec;\n\n      vpp = &elf_section_data (sym_sec)->local_dynrel;\n      pp = (struct ppc_dyn_relocs **) vpp;\n\n      if (*pp == NULL && info->gc_sections)\n\treturn TRUE;\n\n      is_ifunc = ELF_ST_TYPE (sym->st_info) == STT_GNU_IFUNC;\n      while ((p = *pp) != NULL)\n\t{\n\t  if (p->sec == sec && p->ifunc == is_ifunc)\n\t    {\n\t      p->count -= 1;\n\t      if (p->count == 0)\n\t\t*pp = p->next;\n\t      return TRUE;\n\t    }\n\t  pp = &p->next;\n\t}\n    }\n\n  info->callbacks->einfo (_(\"%P: dynreloc miscount for %B, section %A\\n\"),\n\t\t\t  sec->owner, sec);\n  bfd_set_error (bfd_error_bad_value);\n  return FALSE;\n}\n\n/* Remove unused Official Procedure Descriptor entries.  Currently we\n   only remove those associated with functions in discarded link-once\n   sections, or weakly defined functions that have been overridden.  It\n"
}