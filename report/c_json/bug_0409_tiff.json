{
    "Project": "tiff",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Message": "Offset: [7, +oo] (‚áê [0, +oo] + 7) Size: [0, +oo] by call to `TIFFWriteDirectory`.",
    "Code_line": "            TIFFWriteDirectory(out) != -1);",
    "Code_function": "generateThumbnail(TIFF* in, TIFF* out)\n{\n    unsigned char* raster;\n    unsigned char* rp;\n    uint32 sw, sh, rps;\n    uint16 bps, spp;\n    tsize_t rowsize, rastersize;\n    tstrip_t s, ns = TIFFNumberOfStrips(in);\n    uint32 diroff[1];\n\n    TIFFGetField(in, TIFFTAG_IMAGEWIDTH, &sw);\n    TIFFGetField(in, TIFFTAG_IMAGELENGTH, &sh);\n    TIFFGetFieldDefaulted(in, TIFFTAG_BITSPERSAMPLE, &bps);\n    TIFFGetFieldDefaulted(in, TIFFTAG_SAMPLESPERPIXEL, &spp);\n    TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);\n    if (spp != 1 || bps != 1)\n\treturn 0;\n    rowsize = TIFFScanlineSize(in);\n    rastersize = sh * rowsize;\n    fprintf(stderr, \"rastersize=%u\\n\", (unsigned int)rastersize);\n    raster = (unsigned char*)_TIFFmalloc(rastersize);\n    if (!raster) {\n\t    TIFFError(TIFFFileName(in),\n\t\t      \"Can't allocate space for raster buffer.\");\n\t    return 0;\n    }\n    rp = raster;\n    for (s = 0; s < ns; s++) {\n\t(void) TIFFReadEncodedStrip(in, s, rp, -1);\n\trp += rps * rowsize;\n    }\n    TIFFGetField(in, TIFFTAG_PHOTOMETRIC, &photometric);\n    setupCmap();\n    setImage(raster, sw, sh);\n    _TIFFfree(raster);\n\n    TIFFSetField(out, TIFFTAG_SUBFILETYPE, FILETYPE_REDUCEDIMAGE);\n    TIFFSetField(out, TIFFTAG_IMAGEWIDTH, (uint32) tnw);\n    TIFFSetField(out, TIFFTAG_IMAGELENGTH, (uint32) tnh);\n    TIFFSetField(out, TIFFTAG_BITSPERSAMPLE, (uint16) 8);\n    TIFFSetField(out, TIFFTAG_SAMPLESPERPIXEL, (uint16) 1);\n    TIFFSetField(out, TIFFTAG_COMPRESSION, COMPRESSION_PACKBITS);\n    TIFFSetField(out, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISWHITE);\n    TIFFSetField(out, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);\n    TIFFSetField(out, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);\n    cpTag(in, out, TIFFTAG_SOFTWARE,\t\t(uint16) -1, TIFF_ASCII);\n    cpTag(in, out, TIFFTAG_IMAGEDESCRIPTION,\t(uint16) -1, TIFF_ASCII);\n    cpTag(in, out, TIFFTAG_DATETIME,\t\t(uint16) -1, TIFF_ASCII);\n    cpTag(in, out, TIFFTAG_HOSTCOMPUTER,\t(uint16) -1, TIFF_ASCII);\n    diroff[0] = 0;\n    TIFFSetField(out, TIFFTAG_SUBIFD, 1, diroff);\n    return (TIFFWriteEncodedStrip(out, 0, thumbnail, tnw*tnh) != -1 &&\n            TIFFWriteDirectory(out) != -1);\n}"
}