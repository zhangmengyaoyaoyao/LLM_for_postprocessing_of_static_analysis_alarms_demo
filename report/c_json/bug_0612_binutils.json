{
    "project": "binutils",
    "tool": "Infer",
    "category": "NULL_DEREFERENCE",
    "file": "bfd/doc/chew.c",
    "message": "pointer `&out->ptr` last assigned on line 513 could be null and is dereferenced by call to `catstr()` at line 521, column 7.",
    "warning_function_name": "paramstuff",
    "warning_line": "catstr (&out, tos);",
    "warning_context": "static void\nparamstuff ()\n{\n  unsigned int openp;\n  unsigned int fname;\n  unsigned int idx;\n  unsigned int len;\n  string_type out;\n  init_string (&out);\n\n#define NO_PARAMS 1\n\n  /* Make sure that it's not already param'd or proto'd.  */\n  if (NO_PARAMS\n      || find (tos, \"PARAMS\") || find (tos, \"PROTO\") || !find (tos, \"(\"))\n    {\n      catstr (&out, tos);\n    }\n  else\n    {\n      /* Find the open paren.  */\n      for (openp = 0; at (tos, openp) != '(' && at (tos, openp); openp++)\n\t;\n\n      fname = openp;\n      /* Step back to the fname.  */\n      fname--;\n      while (fname && isspace ((unsigned char) at (tos, fname)))\n\tfname--;\n      while (fname\n\t     && !isspace ((unsigned char) at (tos,fname))\n\t     && at (tos,fname) != '*')\n\tfname--;\n\n      fname++;\n\n      /* Output type, omitting trailing whitespace character(s), if\n         any.  */\n      for (len = fname; 0 < len; len--)\n\t{\n\t  if (!isspace ((unsigned char) at (tos, len - 1)))\n\t    break;\n\t}\n      for (idx = 0; idx < len; idx++)\n\tcatchar (&out, at (tos, idx));\n\n      cattext (&out, \"\\n\");\t/* Insert a newline between type and fnname */\n\n      /* Output function name, omitting trailing whitespace\n         character(s), if any.  */\n      for (len = openp; 0 < len; len--)\n\t{\n\t  if (!isspace ((unsigned char) at (tos, len - 1)))\n\t    break;\n\t}\n      for (idx = fname; idx < len; idx++)\n\tcatchar (&out, at (tos, idx));\n\n      cattext (&out, \" PARAMS (\");\n\n      for (idx = openp; at (tos, idx) && at (tos, idx) != ';'; idx++)\n\tcatchar (&out, at (tos, idx));\n\n      cattext (&out, \");\\n\\n\");\n    }\n  overwrite_string (tos, &out);\n  pc++;\n\n}\n"
}