{
    "Project": "diffutils",
    "Tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/cmp.c",
    "message": "The value read from offset_width was never initialized.",
    "warning_function_name": "cmp",
    "warning_line": "printf (\"%*s %3o %3o\\n\",",
    "warning_context": "\terror (EXIT_TROUBLE, errno, \"%s\", file[1]);\n\n      /* Insert sentinels for the block compare.  */\n\n      buf0[read0] = ~buf1[read0];\n      buf1[read1] = ~buf0[read1];\n\n      /* If the line number should be written for differing files,\n\t compare the blocks and count the number of newlines\n\t simultaneously.  */\n      first_diff = (comparison_type == type_first_diff\n\t\t    ? block_compare_and_count (buffer0, buffer1, &line_number)\n\t\t    : block_compare (buffer0, buffer1));\n\n      byte_number += first_diff;\n      smaller = MIN (read0, read1);\n\n      if (first_diff < smaller)\n\t{\n\t  switch (comparison_type)\n\t    {\n\t    case type_first_diff:\n\t      {\n\t\tchar byte_buf[INT_BUFSIZE_BOUND (off_t)];\n\t\tchar line_buf[INT_BUFSIZE_BOUND (off_t)];\n\t\tchar const *byte_num = offtostr (byte_number, byte_buf);\n\t\tchar const *line_num = offtostr (line_number, line_buf);\n\t\tif (!opt_print_bytes)\n\t\t  {\n\t\t    /* See POSIX 1003.1-2001 for this format.  This\n\t\t       message is used only in the POSIX locale, so it\n\t\t       need not be translated.  */\n\t\t    static char const char_message[] =\n\t\t      \"%s %s differ: char %s, line %s\\n\";\n\n\t\t    /* The POSIX rationale recommends using the word\n\t\t       \"byte\" outside the POSIX locale.  Some gettext\n\t\t       implementations translate even in the POSIX\n\t\t       locale if certain other environment variables\n\t\t       are set, so use \"byte\" if a translation is\n\t\t       available, or if outside the POSIX locale.  */\n\t\t    static char const byte_msgid[] =\n\t\t      N_(\"%s %s differ: byte %s, line %s\\n\");\n\t\t    char const *byte_message = _(byte_msgid);\n\t\t    bool use_byte_message = (byte_message != byte_msgid\n\t\t\t\t\t     || hard_locale_LC_MESSAGES);\n\n\t\t    printf (use_byte_message ? byte_message : char_message,\n\t\t\t    file[0], file[1], byte_num, line_num);\n\t\t  }\n\t\telse\n\t\t  {\n\t\t    unsigned char c0 = buf0[first_diff];\n\t\t    unsigned char c1 = buf1[first_diff];\n\t\t    char s0[5];\n\t\t    char s1[5];\n\t\t    sprintc (s0, c0);\n\t\t    sprintc (s1, c1);\n\t\t    printf (_(\"%s %s differ: byte %s, line %s is %3o %s %3o %s\\n\"),\n\t\t\t    file[0], file[1], byte_num, line_num,\n\t\t\t    c0, s0, c1, s1);\n\t\t}\n\t      }\n\t      /* Fall through.  */\n\t    case type_status:\n\t      return EXIT_FAILURE;\n\n\t    case type_all_diffs:\n\t      do\n\t\t{\n\t\t  unsigned char c0 = buf0[first_diff];\n\t\t  unsigned char c1 = buf1[first_diff];\n\t\t  if (c0 != c1)\n\t\t    {\n\t\t      char byte_buf[INT_BUFSIZE_BOUND (off_t)];\n\t\t      char const *byte_num = offtostr (byte_number, byte_buf);\n\t\t      if (!opt_print_bytes)\n\t\t\t{\n\t\t\t  /* See POSIX 1003.1-2001 for this format.  */\n\t\t\t  printf (\"%*s %3o %3o\\n\",\n\t\t\t\t  offset_width, byte_num, c0, c1);\n\t\t\t}\n\t\t      else\n\t\t\t{\n\t\t\t  char s0[5];\n\t\t\t  char s1[5];\n\t\t\t  sprintc (s0, c0);\n\t\t\t  sprintc (s1, c1);\n\t\t\t  printf (\"%*s %3o %-4s %3o %s\\n\",\n\t\t\t\t  offset_width, byte_num, c0, s0, c1, s1);\n\t\t\t}\n\t\t    }\n\t\t  byte_number++;\n\t\t  first_diff++;\n\t\t}\n\t      while (first_diff < smaller);\n\t      differing = -1;\n\t      break;\n\n\t    case type_no_stdout:\n\t      differing = 1;\n"
}