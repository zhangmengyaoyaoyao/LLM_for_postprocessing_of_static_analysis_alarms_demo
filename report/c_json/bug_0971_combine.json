{
    "project": "combine",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/field.c",
    "message": "The value read from field_list_length was never initialized.",
    "warning_function_name": "a_find_input_ranges",
    "warning_line": "if (ranges[i].lower_bound <= field_list_length) {",
    "warning_context": "int\na_find_input_ranges (out_ranges, input_record, ranges, range_count,\n\t\t     end_range_start, input_delimiter, input_delimiter_repeat,\n\t\t     make_copy, output_delimiter, empty_replacement)\n     STRINGTYPE ***out_ranges;\n     STRINGTYPE *input_record;\n     field_range *ranges;\n     int range_count;\n     size_t end_range_start;\n     STRINGTYPE *input_delimiter;\n     int input_delimiter_repeat;\n     DStr_codes make_copy;\n     STRINGTYPE *output_delimiter;\n     STRINGTYPE *empty_replacement;\n{\n  int i;\n  int j;\n  STRINGTYPE **field_list;\n  int field_list_length;\n  int return_code;\n\n  if (input_delimiter != NULL) {\n    return_code\n      = dstrsplit (input_record, input_delimiter, &field_list,\n\t\t   &field_list_length);\n    if (return_code != EXIT_SUCCESS) {\n      if (return_code == DSTR_EMEMORY)\n\tFATAL_ERROR (_(\"unable to allocate memory\"));\n      else\n\tFATAL_ERROR (_(\"internal error: invalid string descriptor\"));\n      }\n    if (input_delimiter_repeat) {\n      i = 0;\n      while (i < field_list_length) {\n\tif (field_list[i]->length == 0) {\n\t  for (j = i + 1; j < field_list_length; j++)\n\t    field_list[j - 1] = field_list[j];\n\t  if (i < field_list_length - 1)\n\t    field_list_length--;\n\t  else\n\t    i++;\n\t  }\n\telse\n\t  i++;\n\t}\n      field_list\n\t= realloc (field_list, field_list_length * sizeof (*field_list));\n      if (field_list == NULL)\n\tFATAL_ERROR (_(\"unable to allocate memory\"));\n      }\n    }\n\n  *out_ranges\n    = malloc ((range_count + (end_range_start == 0 ? 0 : 1))\n\t      * sizeof (STRINGTYPE));\n  if (*out_ranges == NULL)\n    return EXIT_FAILURE;\n\n  for (i = 0; i < range_count; i++) {\n    if (input_delimiter != NULL) {\n      if (ranges[i].lower_bound <= field_list_length) {\n\tif (empty_replacement != NULL\n\t    && field_list[ranges[i].lower_bound - 1]->length == 0)\n\t  (*out_ranges)[i] = dstrdup (empty_replacement);\n\telse\n\t  (*out_ranges)[i] = dstrdup (field_list[ranges[i].lower_bound - 1]);\n\t}\n      else if (empty_replacement != NULL)\n\t(*out_ranges)[i] = dstrdup (empty_replacement);\n      else\n\t(*out_ranges)[i] = dstrdupstr (\"\");\n      if ((*out_ranges)[i] == NULL)\n\tFATAL_ERROR (_(\"unable to allocate memory\"));\n      }\n    else {\n      (*out_ranges)[i]\n\t= dstrsubstr (input_record, ranges[i].lower_bound,\n\t\t      ranges[i].upper_bound, 0, make_copy);\n      if ((*out_ranges)[i] == NULL) {\n\tif (ranges[i].lower_bound < 1\n\t    || ranges[i].lower_bound > ranges[i].upper_bound\n\t    || ranges[i].upper_bound > input_record->length)\n\t  FATAL_ERROR3 (_\n\t\t\t(\"bad field substring -- wanted bytes %ld-%ld in %ld-byte string\"),\n\t\t\tranges[i].lower_bound, ranges[i].upper_bound,\n\t\t\tinput_record->length);\n\telse\n\t  FATAL_ERROR (_(\"unable to allocate memory\"));\n\t}\n      }\n#ifdef HAVE_LIBGUILE\n    if (ranges[i].format != NULL) {\t/* We have some processing to do. */\n      SCM return_value;\n      STRINGTYPE *temp_string;\n      size_t return_length;\n\n      create_scheme_string_variable (&df_name_input_field, 0,\n\t\t\t\t     ((*out_ranges)[i]));\n\n      /* Call Guile */\n      temp_string = eval_scheme_string_function (ranges[i].format);\n"
}