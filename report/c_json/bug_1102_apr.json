{
    "Project": "apr",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L1",
    "Message": "Offset: 80 Size: 80 by call to `apr_ecvt`.",
    "Code_line": "        p = apr_ecvt(num, precision + 1, &decimal_point, is_negative, buf1);",
    "Code_function": "static char *conv_fp(register char format, register double num,\n    boolean_e add_dp, int precision, int *is_negative,\n    char *buf, apr_size_t *len)\n{\n    register char *s = buf;\n    register char *p;\n    int decimal_point;\n    char buf1[NDIG];\n\n    if (format == 'f')\n        p = apr_fcvt(num, precision, &decimal_point, is_negative, buf1);\n    else /* either e or E format */\n        p = apr_ecvt(num, precision + 1, &decimal_point, is_negative, buf1);\n\n    /*\n     * Check for Infinity and NaN\n     */\n    if (apr_isalpha(*p)) {\n        *len = strlen(p);\n        memcpy(buf, p, *len + 1);\n        *is_negative = FALSE;\n        return (buf);\n    }\n\n    if (format == 'f') {\n        if (decimal_point <= 0) {\n            *s++ = '0';\n            if (precision > 0) {\n                *s++ = '.';\n                while (decimal_point++ < 0)\n                    *s++ = '0';\n            }\n            else if (add_dp)\n                *s++ = '.';\n        }\n        else {\n            while (decimal_point-- > 0)\n                *s++ = *p++;\n            if (precision > 0 || add_dp)\n                *s++ = '.';\n        }\n    }\n    else {\n        *s++ = *p++;\n        if (precision > 0 || add_dp)\n            *s++ = '.';\n    }\n\n    /*\n     * copy the rest of p, the NUL is NOT copied\n     */\n    while (*p)\n        *s++ = *p++;\n\n    if (format != 'f') {\n        char temp[EXPONENT_LENGTH];        /* for exponent conversion */\n        apr_size_t t_len;\n        int exponent_is_negative;\n\n        *s++ = format;                /* either e or E */\n        decimal_point--;\n        if (decimal_point != 0) {\n            p = conv_10((apr_int32_t) decimal_point, FALSE, &exponent_is_negative,\n                        &temp[EXPONENT_LENGTH], &t_len);\n            *s++ = exponent_is_negative ? '-' : '+';\n\n            /*\n             * Make sure the exponent has at least 2 digits\n             */\n            if (t_len == 1)\n                *s++ = '0';\n            while (t_len--)\n                *s++ = *p++;\n        }\n        else {\n            *s++ = '+';\n            *s++ = '0';\n            *s++ = '0';\n        }\n    }\n\n    *len = s - buf;\n    return (buf);\n}"
}