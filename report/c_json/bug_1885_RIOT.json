{
    "project": "RIOT",
    "tool": "Infer",
    "category": "Buffer Overrun L2",
    "file": "sys/net/gnrc/network_layer/ndp/gnrc_ndp.c",
    "message": "Offset: [0, 3] Size: 2.",
    "warning_function_name": "nrc_ndp_nbr_adv_send(",
    "warning_line": "(netif->ipv6.addrs_flags[tgt_idx] &",
    "warning_context": "void gnrc_ndp_nbr_adv_send(const ipv6_addr_t *tgt, gnrc_netif_t *netif,\n                           const ipv6_addr_t *dst, bool supply_tl2a,\n                           gnrc_pktsnip_t *ext_opts)\n{\n    ipv6_addr_t real_dst;\n    gnrc_pktsnip_t *hdr, *pkt = ext_opts;\n    uint8_t adv_flags = 0;\n\n    assert((tgt != NULL) && !ipv6_addr_is_multicast(tgt));\n    assert((netif != NULL) && (dst != NULL));\n    DEBUG(\"ndp: send neighbor advertisement (iface: %\" PRIkernel_pid\n          \", tgt: %s, \", netif->pid,\n          ipv6_addr_to_str(addr_str, tgt, sizeof(addr_str)));\n    DEBUG(\"dst: %s, supply_tl2a: %d)\\n\",\n          ipv6_addr_to_str(addr_str, dst, sizeof(addr_str)), supply_tl2a);\n    gnrc_netif_acquire(netif);\n    do {    /* XXX: hidden goto */\n        int tgt_idx;\n\n        if ((tgt_idx = gnrc_netif_ipv6_addr_idx(netif, tgt)) < 0) {\n            DEBUG(\"ndp: tgt not assigned to interface. Abort sending\\n\");\n            break;\n        }\n        if (gnrc_netif_is_rtr(netif) && gnrc_netif_is_rtr_adv(netif)) {\n            adv_flags |= NDP_NBR_ADV_FLAGS_R;\n        }\n        if (ipv6_addr_is_unspecified(dst)) {\n            memcpy(&real_dst, &ipv6_addr_all_nodes_link_local,\n                   sizeof(ipv6_addr_t));\n            supply_tl2a = true;\n        }\n        else {\n            memcpy(&real_dst, dst, sizeof(real_dst));\n            adv_flags |= NDP_NBR_ADV_FLAGS_S;\n        }\n        /* add SL2AO based on target address */\n        if (supply_tl2a) {\n            uint8_t l2tgt[8];\n            size_t l2tgt_len;\n            /* we previously checked if we are the target, so we can take our L2tgt */\n            l2tgt_len = _get_l2src(netif, l2tgt);\n\n            if (l2tgt_len > 0) {\n                /* add target address link-layer address option */\n                hdr = gnrc_ndp_opt_tl2a_build(l2tgt, l2tgt_len, pkt);\n\n                if (hdr == NULL) {\n                    DEBUG(\"ndp: error allocating TL2AO.\\n\");\n                    break;\n                }\n                pkt = hdr;\n            }\n        }\n        /* TODO: also check if the node provides proxy services for tgt */\n        if ((pkt != NULL) &&\n            (netif->ipv6.addrs_flags[tgt_idx] &\n             GNRC_NETIF_IPV6_ADDRS_FLAGS_ANYCAST)) {\n            /* TL2A is not supplied and tgt is not anycast */\n            adv_flags |= NDP_NBR_ADV_FLAGS_O;\n        }\n        /* add neighbor advertisement header */\n        hdr = gnrc_ndp_nbr_adv_build(tgt, adv_flags, pkt);\n        if (hdr == NULL) {\n            DEBUG(\"ndp: error allocating neighbor advertisement.\\n\");\n            break;\n        }\n        pkt = hdr;\n        /* add remaining headers */\n        hdr = _build_headers(netif, NULL, &real_dst, pkt);\n        if (hdr == NULL) {\n            DEBUG(\"ndp: error adding lower-layer headers.\\n\");\n            break;\n        }\n        else {\n            pkt = hdr;\n            if (gnrc_netapi_dispatch_send(GNRC_NETTYPE_NDP,\n                                                       GNRC_NETREG_DEMUX_CTX_ALL,\n                                                       pkt) == 0) {\n                DEBUG(\"ndp: unable to send neighbor advertisement\\n\");\n                break;\n            }\n        }\n        gnrc_netif_release(netif);\n        return;\n    } while (0);\n    gnrc_pktbuf_release(pkt);\n    gnrc_netif_release(netif);\n}\n"
}