{
    "Project": "Zephyr",
    "Tool": "Infer",
    "Bug Type": "Null Dereference",
    "Code_line": "\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,",
    "Code_function": "static int le_init(void)\n{\n\tstruct bt_hci_cp_write_le_host_supp *cp_le;\n\tstruct net_buf *buf, *rsp;\n\tint err;\n\n\t/* For now we only support LE capable controllers */\n\tif (!BT_FEAT_LE(bt_dev.features)) {\n\t\tBT_ERR(\"Non-LE capable controller detected!\");\n\t\treturn -ENODEV;\n\t}\n\n\t/* Read Low Energy Supported Features */\n\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,\n\t\t\t\t   &rsp);\n\tif (err) {\n\t\treturn err;\n\t}\n\tread_le_features_complete(rsp);\n\tnet_buf_unref(rsp);\n\n#if defined(CONFIG_BT_CONN)\n\t/* Read LE Buffer Size */\n\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,\n\t\t\t\t   NULL, &rsp);\n\tif (err) {\n\t\treturn err;\n\t}\n\tle_read_buffer_size_complete(rsp);\n\tnet_buf_unref(rsp);\n#endif\n\n\tif (BT_FEAT_BREDR(bt_dev.features)) {\n\t\tbuf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,\n\t\t\t\t\tsizeof(*cp_le));\n\t\tif (!buf) {\n\t\t\treturn -ENOBUFS;\n\t\t}\n\n\t\tcp_le = net_buf_add(buf, sizeof(*cp_le));\n\n\t\t/* Explicitly enable LE for dual-mode controllers */\n\t\tcp_le->le = 0x01;\n\t\tcp_le->simul = 0x00;\n\t\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,\n\t\t\t\t\t   NULL);\n\t\tif (err) {\n\t\t\treturn err;\n\t\t}\n\t}\n\n\t/* Read LE Supported States */\n\tif (BT_CMD_LE_STATES(bt_dev.supported_commands)) {\n\t\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,\n\t\t\t\t\t   &rsp);\n\t\tif (err) {\n\t\t\treturn err;\n\t\t}\n\t\tle_read_supp_states_complete(rsp);\n\t\tnet_buf_unref(rsp);\n\t}\n\n\tif (IS_ENABLED(CONFIG_BT_CONN) &&\n\t    IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&\n\t    BT_FEAT_LE_DLE(bt_dev.le.features)) {\n\t\tstruct bt_hci_cp_le_write_default_data_len *cp;\n\t\tstruct bt_hci_rp_le_read_max_data_len *rp;\n\t\tu16_t tx_octets, tx_time;\n\n\t\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,\n\t\t\t\t\t   &rsp);\n\t\tif (err) {\n\t\t\treturn err;\n\t\t}\n\n\t\trp = (void *)rsp->data;\n\t\ttx_octets = sys_le16_to_cpu(rp->max_tx_octets);\n\t\ttx_time = sys_le16_to_cpu(rp->max_tx_time);\n\t\tnet_buf_unref(rsp);\n\n\t\tbuf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,\n\t\t\t\t\tsizeof(*cp));\n\t\tif (!buf) {\n\t\t\treturn -ENOBUFS;\n\t\t}\n\n\t\tcp = net_buf_add(buf, sizeof(*cp));\n\t\tcp->max_tx_octets = sys_cpu_to_le16(tx_octets);\n\t\tcp->max_tx_time = sys_cpu_to_le16(tx_time);\n\n\t\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,\n\t\t\t\t\t   buf, NULL);\n\t\tif (err) {\n\t\t\treturn err;\n\t\t}\n\t}\n\n#if defined(CONFIG_BT_SMP)\n\tif (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {\n#if defined(CONFIG_BT_PRIVACY)\n\t\tstruct bt_hci_cp_le_set_rpa_timeout *cp;\n\n\t\tbuf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,\n\t\t\t\t\tsizeof(*cp));\n\t\tif (!buf) {\n\t\t\treturn -ENOBUFS;\n\t\t}\n\n\t\tcp = net_buf_add(buf, sizeof(*cp));\n\t\tcp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);\n\t\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,\n\t\t\t\t\t   NULL);\n\t\tif (err) {\n\t\t\treturn err;\n\t\t}\n#endif /* defined(CONFIG_BT_PRIVACY) */\n\n\t\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,\n\t\t\t\t\t   &rsp);\n\t\tif (err) {\n\t\t\treturn err;\n\t\t}\n\t\tle_read_resolving_list_size_complete(rsp);\n\t\tnet_buf_unref(rsp);\n\t}\n#endif\n\n#if defined(CONFIG_BT_WHITELIST)\n\terr = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_WL_SIZE, NULL,\n\t\t\t\t   &rsp);\n\tif (err) {\n\t\treturn err;\n\t}\n\n\tle_read_wl_size_complete(rsp);\n\tnet_buf_unref(rsp);\n#endif /* defined(CONFIG_BT_WHITELIST) */\n\n\treturn  le_set_event_mask();\n}"
}