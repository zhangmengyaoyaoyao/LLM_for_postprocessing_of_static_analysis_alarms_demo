{
    "project": "bash",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L1",
    "file": "support/signames.c",
    "message": "Offset: 67 Size: 4.",
    "warning_function_name": "initialize_signames",
    "warning_line": "signal_names[NSIG+2] = \"RETURN\";",
    "warning_context": "#if defined (SIGURG)\t/* urgent condition on IO channel */\n  signal_names[SIGURG] = \"SIGURG\";\n#endif\n\n#if defined (SIGSTOP)\t/* sendable stop signal not from tty */\n  signal_names[SIGSTOP] = \"SIGSTOP\";\n#endif\n\n#if defined (SIGTSTP)\t/* stop signal from tty */\n  signal_names[SIGTSTP] = \"SIGTSTP\";\n#endif\n\n#if defined (SIGCONT)\t/* continue a stopped process */\n  signal_names[SIGCONT] = \"SIGCONT\";\n#endif\n\n#if defined (SIGCHLD)\t/* to parent on child stop or exit */\n  signal_names[SIGCHLD] = \"SIGCHLD\";\n#endif\n\n#if defined (SIGTTIN)\t/* to readers pgrp upon background tty read */\n  signal_names[SIGTTIN] = \"SIGTTIN\";\n#endif\n\n#if defined (SIGTTOU)\t/* like TTIN for output if (tp->t_local&LTOSTOP) */\n  signal_names[SIGTTOU] = \"SIGTTOU\";\n#endif\n\n#if defined (SIGIO)\t/* input/output possible signal */\n  signal_names[SIGIO] = \"SIGIO\";\n#endif\n\n#if defined (SIGXCPU)\t/* exceeded CPU time limit */\n  signal_names[SIGXCPU] = \"SIGXCPU\";\n#endif\n\n#if defined (SIGXFSZ)\t/* exceeded file size limit */\n  signal_names[SIGXFSZ] = \"SIGXFSZ\";\n#endif\n\n#if defined (SIGVTALRM)\t/* virtual time alarm */\n  signal_names[SIGVTALRM] = \"SIGVTALRM\";\n#endif\n\n#if defined (SIGPROF)\t/* profiling time alarm */\n  signal_names[SIGPROF] = \"SIGPROF\";\n#endif\n\n#if defined (SIGWINCH)\t/* window changed */\n  signal_names[SIGWINCH] = \"SIGWINCH\";\n#endif\n\n/* 4.4 BSD */\n#if defined (SIGINFO) && !defined (_SEQUENT_)\t/* information request */\n  signal_names[SIGINFO] = \"SIGINFO\";\n#endif\n\n#if defined (SIGUSR1)\t/* user defined signal 1 */\n  signal_names[SIGUSR1] = \"SIGUSR1\";\n#endif\n\n#if defined (SIGUSR2)\t/* user defined signal 2 */\n  signal_names[SIGUSR2] = \"SIGUSR2\";\n#endif\n\n#if defined (SIGKILLTHR)\t/* BeOS: Kill Thread */\n  signal_names[SIGKILLTHR] = \"SIGKILLTHR\";\n#endif\n\n  for (i = 0; i < NSIG; i++)\n    if (signal_names[i] == (char *)NULL)\n      {\n\tsignal_names[i] = (char *)malloc (18);\n\tif (signal_names[i])\n\t  sprintf (signal_names[i], \"SIGJUNK(%d)\", i);\n      }\n\n  signal_names[NSIG] = \"DEBUG\";\n  signal_names[NSIG+1] = \"ERR\";\n  signal_names[NSIG+2] = \"RETURN\";\n}\n"
}