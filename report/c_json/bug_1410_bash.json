{
    "Project": "bash",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L1",
    "Code_line": "\t  olen = STRLEN (oval);",
    "Code_function": "make_variable_value (var, value, flags)\n     SHELL_VAR *var;\n     char *value;\n     int flags;\n{\n  char *retval, *oval;\n  intmax_t lval, rval;\n  int expok, olen, op;\n\n  /* If this variable has had its type set to integer (via `declare -i'),\n     then do expression evaluation on it and store the result.  The\n     functions in expr.c (evalexp()) and bind_int_variable() are responsible\n     for turning off the integer flag if they don't want further\n     evaluation done. */\n  if (integer_p (var))\n    {\n      if (flags & ASS_APPEND)\n\t{\n\t  oval = value_cell (var);\n\t  lval = evalexp (oval, &expok);\t/* ksh93 seems to do this */\n\t  if (expok == 0)\n\t    {\n\t      top_level_cleanup ();\n\t      jump_to_top_level (DISCARD);\n\t    }\n\t}\n      rval = evalexp (value, &expok);\n      if (expok == 0)\n\t{\n\t  top_level_cleanup ();\n\t  jump_to_top_level (DISCARD);\n\t}\n      /* This can be fooled if the variable's value changes while evaluating\n\t `rval'.  We can change it if we move the evaluation of lval to here. */\n      if (flags & ASS_APPEND)\n\trval += lval;\n      retval = itos (rval);\n    }\n#if defined (CASEMOD_ATTRS)\n  else if (capcase_p (var) || uppercase_p (var) || lowercase_p (var))\n    {\n      if (flags & ASS_APPEND)\n\t{\n\t  oval = get_variable_value (var);\n\t  if (oval == 0)\t/* paranoia */\n\t    oval = \"\";\n\t  olen = STRLEN (oval);\n\t  retval = (char *)xmalloc (olen + (value ? STRLEN (value) : 0) + 1);\n\t  strcpy (retval, oval);\n\t  if (value)\n\t    strcpy (retval+olen, value);\n\t}\n      else if (*value)\n\tretval = savestring (value);\n      else\n\t{\n\t  retval = (char *)xmalloc (1);\n\t  retval[0] = '\\0';\n\t}\n      op = capcase_p (var) ? CASE_CAPITALIZE\n\t\t\t : (uppercase_p (var) ? CASE_UPPER : CASE_LOWER);\n      oval = sh_modcase (retval, (char *)0, op);\n      free (retval);\n      retval = oval;\n    }\n#endif /* CASEMOD_ATTRS */\n  else if (value)\n    {\n      if (flags & ASS_APPEND)\n\t{\n\t  oval = get_variable_value (var);\n\t  if (oval == 0)\t/* paranoia */\n\t    oval = \"\";\n\t  olen = STRLEN (oval);\n\t  retval = (char *)xmalloc (olen + (value ? STRLEN (value) : 0) + 1);\n\t  strcpy (retval, oval);\n\t  if (value)\n\t    strcpy (retval+olen, value);\n\t}\n      else if (*value)\n\tretval = savestring (value);\n      else\n\t{\n\t  retval = (char *)xmalloc (1);\n\t  retval[0] = '\\0';\n\t}\n    }\n  else\n    retval = (char *)NULL;\n\n  return retval;\n}"
}