{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "libiberty/cplus-dem.c",
    "message": "Offset: [0, 10] Size: 1.",
    "warning_function_name": "cplus_demangle_opname",
    "warning_line": "strcat (result, optable[i].out);",
    "warning_context": "int\ncplus_demangle_opname (const char *opname, char *result, int options)\n{\n  int len, len1, ret;\n  string type;\n  struct work_stuff work[1];\n  const char *tem;\n\n  len = strlen(opname);\n  result[0] = '\\0';\n  ret = 0;\n  memset ((char *) work, 0, sizeof (work));\n  work->options = options;\n\n  if (opname[0] == '_' && opname[1] == '_'\n      && opname[2] == 'o' && opname[3] == 'p')\n    {\n      /* ANSI.  */\n      /* type conversion operator.  */\n      tem = opname + 4;\n      if (do_type (work, &tem, &type))\n\t{\n\t  strcat (result, \"operator \");\n\t  strncat (result, type.b, type.p - type.b);\n\t  string_delete (&type);\n\t  ret = 1;\n\t}\n    }\n  else if (opname[0] == '_' && opname[1] == '_'\n\t   && ISLOWER((unsigned char)opname[2])\n\t   && ISLOWER((unsigned char)opname[3]))\n    {\n      if (opname[4] == '\\0')\n\t{\n\t  /* Operator.  */\n\t  size_t i;\n\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n\t    {\n\t      if (strlen (optable[i].in) == 2\n\t\t  && memcmp (optable[i].in, opname + 2, 2) == 0)\n\t\t{\n\t\t  strcat (result, \"operator\");\n\t\t  strcat (result, optable[i].out);\n\t\t  ret = 1;\n\t\t  break;\n\t\t}\n\t    }\n\t}\n      else\n\t{\n\t  if (opname[2] == 'a' && opname[5] == '\\0')\n\t    {\n\t      /* Assignment.  */\n\t      size_t i;\n\t      for (i = 0; i < ARRAY_SIZE (optable); i++)\n\t\t{\n\t\t  if (strlen (optable[i].in) == 3\n\t\t      && memcmp (optable[i].in, opname + 2, 3) == 0)\n\t\t    {\n\t\t      strcat (result, \"operator\");\n\t\t      strcat (result, optable[i].out);\n\t\t      ret = 1;\n\t\t      break;\n\t\t    }\n\t\t}\n\t    }\n\t}\n    }\n  else if (len >= 3\n\t   && opname[0] == 'o'\n\t   && opname[1] == 'p'\n\t   && strchr (cplus_markers, opname[2]) != NULL)\n    {\n      /* see if it's an assignment expression */\n      if (len >= 10 /* op$assign_ */\n\t  && memcmp (opname + 3, \"assign_\", 7) == 0)\n\t{\n\t  size_t i;\n\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n\t    {\n\t      len1 = len - 10;\n\t      if ((int) strlen (optable[i].in) == len1\n\t\t  && memcmp (optable[i].in, opname + 10, len1) == 0)\n\t\t{\n\t\t  strcat (result, \"operator\");\n\t\t  strcat (result, optable[i].out);\n\t\t  strcat (result, \"=\");\n\t\t  ret = 1;\n\t\t  break;\n\t\t}\n\t    }\n\t}\n      else\n\t{\n\t  size_t i;\n\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n\t    {\n\t      len1 = len - 3;\n\t      if ((int) strlen (optable[i].in) == len1\n\t\t  && memcmp (optable[i].in, opname + 3, len1) == 0)\n\t\t{\n"
}