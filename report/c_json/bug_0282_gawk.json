{
    "Project": "gawk",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Code_line": "\t\t\t(void) list_append(pattern, instruction(Op_jmp_false));",
    "Code_function": "append_rule(INSTRUCTION *pattern, INSTRUCTION *action)\n{\n\t/*\n\t *    ----------------\n\t *       pattern\n\t *    ----------------\n\t *    [Op_jmp_false f ]\n\t *    ----------------\n\t *       action\n\t *    ----------------\n\t * f: [Op_no_op       ]\n\t *    ----------------\n\t */\n\n\tINSTRUCTION *rp;\n\tINSTRUCTION *tp;\n\tINSTRUCTION *ip;\n\n\tif (rule != Rule) {\n\t\trp = pattern;\n\t\tif (do_pretty_print)\n\t\t\t(void) list_append(action, instruction(Op_no_op));\n\t\t(rp + 1)->firsti = action->nexti;\n\t\t(rp + 1)->lasti = action->lasti;\n\t\t(rp + 2)->first_line = pattern->source_line;\n\t\t(rp + 2)->last_line = lastline;\n\t\tip = list_prepend(action, rp);\n\n\t} else {\n\t\trp = bcalloc(Op_rule, 3, 0);\n\t\trp->in_rule = Rule;\n\t\trp->source_file = source;\n\t\ttp = instruction(Op_no_op);\n\n\t\tif (pattern == NULL) {\n\t\t\t/* assert(action != NULL); */\n\t\t\tif (do_pretty_print)\n\t\t\t\t(void) list_prepend(action, instruction(Op_exec_count));\n\t\t\t(rp + 1)->firsti = action->nexti;\n\t\t\t(rp + 1)->lasti = tp;\n\t\t\t(rp + 2)->first_line = firstline;\n\t\t\t(rp + 2)->last_line = lastline;\n\t\t\trp->source_line = firstline;\n\t\t\tip = list_prepend(list_append(action, tp), rp);\n\t\t} else {\n\t\t\t(void) list_append(pattern, instruction(Op_jmp_false));\n\t\t\tpattern->lasti->target_jmp = tp;\n\t\t\t(rp + 2)->first_line = find_line(pattern, FIRST_LINE);\n\t\t\trp->source_line = (rp + 2)->first_line;\n\t\t\tif (action == NULL) {\n\t\t\t\t(rp + 2)->last_line = find_line(pattern, LAST_LINE);\n\t\t\t\taction = list_create(instruction(Op_K_print_rec));\n\t\t\t\tif (do_pretty_print)\n\t\t\t\t\t(void) list_prepend(action, instruction(Op_exec_count));\n\t\t\t} else\n\t\t\t\t(rp + 2)->last_line = lastline;\n\n\t\t\tif (do_pretty_print) {\n\t\t\t\t(void) list_prepend(pattern, instruction(Op_exec_count));\n\t\t\t\t(void) list_prepend(action, instruction(Op_exec_count));\n\t\t\t}\n \t\t\t(rp + 1)->firsti = action->nexti;\n\t\t\t(rp + 1)->lasti = tp;\n\t\t\tip = list_append(\n\t\t\t\t\tlist_merge(list_prepend(pattern, rp),\n\t\t\t\t\t\taction),\n\t\t\t\t\ttp);\n\t\t}\n\n\t}\n\n\tlist_append(rule_list, rp + 1);\n\n\tif (rule_block[rule] == NULL)\n\t\trule_block[rule] = ip;\n\telse\n\t\t(void) list_merge(rule_block[rule], ip);\n\n\treturn rule_block[rule];\n}"
}