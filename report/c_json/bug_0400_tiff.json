{
    "Project": "tiff",
    "Tool": "Infer",
    "Bug Type": "UNINITIALIZED_VALUE",
    "Message": "The value read from subsampling[_] was never initialized.",
    "Code_line": "\t\tfprintf(fd, \"  YCbCr Subsampling: %u, %u\\n\",",
    "Code_function": "TIFFPrintDirectory(TIFF* tif, FILE* fd, long flags)\n{\n\tTIFFDirectory *td = &tif->tif_dir;\n\tchar *sep;\n\tuint16 i;\n\tlong l, n;\n\n\tfprintf(fd, \"TIFF Directory at offset 0x%lx (%lu)\\n\",\n\t\t(unsigned long)tif->tif_diroff, (unsigned long)tif->tif_diroff);\n\tif (TIFFFieldSet(tif,FIELD_SUBFILETYPE)) {\n\t\tfprintf(fd, \"  Subfile Type:\");\n\t\tsep = \" \";\n\t\tif (td->td_subfiletype & FILETYPE_REDUCEDIMAGE) {\n\t\t\tfprintf(fd, \"%sreduced-resolution image\", sep);\n\t\t\tsep = \"/\";\n\t\t}\n\t\tif (td->td_subfiletype & FILETYPE_PAGE) {\n\t\t\tfprintf(fd, \"%smulti-page document\", sep);\n\t\t\tsep = \"/\";\n\t\t}\n\t\tif (td->td_subfiletype & FILETYPE_MASK)\n\t\t\tfprintf(fd, \"%stransparency mask\", sep);\n\t\tfprintf(fd, \" (%lu = 0x%lx)\\n\",\n\t\t    (long) td->td_subfiletype, (long) td->td_subfiletype);\n\t}\n\tif (TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)) {\n\t\tfprintf(fd, \"  Image Width: %lu Image Length: %lu\",\n\t\t    (unsigned long) td->td_imagewidth, (unsigned long) td->td_imagelength);\n\t\tif (TIFFFieldSet(tif,FIELD_IMAGEDEPTH))\n\t\t\tfprintf(fd, \" Image Depth: %lu\",\n\t\t\t    (unsigned long) td->td_imagedepth);\n\t\tfprintf(fd, \"\\n\");\n\t}\n\tif (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS)) {\n\t\tfprintf(fd, \"  Tile Width: %lu Tile Length: %lu\",\n\t\t    (unsigned long) td->td_tilewidth, (unsigned long) td->td_tilelength);\n\t\tif (TIFFFieldSet(tif,FIELD_TILEDEPTH))\n\t\t\tfprintf(fd, \" Tile Depth: %lu\",\n\t\t\t    (unsigned long) td->td_tiledepth);\n\t\tfprintf(fd, \"\\n\");\n\t}\n\tif (TIFFFieldSet(tif,FIELD_RESOLUTION)) {\n\t\tfprintf(fd, \"  Resolution: %g, %g\",\n\t\t    td->td_xresolution, td->td_yresolution);\n\t\tif (TIFFFieldSet(tif,FIELD_RESOLUTIONUNIT)) {\n\t\t\tswitch (td->td_resolutionunit) {\n\t\t\tcase RESUNIT_NONE:\n\t\t\t\tfprintf(fd, \" (unitless)\");\n\t\t\t\tbreak;\n\t\t\tcase RESUNIT_INCH:\n\t\t\t\tfprintf(fd, \" pixels/inch\");\n\t\t\t\tbreak;\n\t\t\tcase RESUNIT_CENTIMETER:\n\t\t\t\tfprintf(fd, \" pixels/cm\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tfprintf(fd, \" (unit %u = 0x%x)\",\n\t\t\t\t    td->td_resolutionunit,\n\t\t\t\t    td->td_resolutionunit);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfprintf(fd, \"\\n\");\n\t}\n\tif (TIFFFieldSet(tif,FIELD_POSITION))\n\t\tfprintf(fd, \"  Position: %g, %g\\n\",\n\t\t    td->td_xposition, td->td_yposition);\n\tif (TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))\n\t\tfprintf(fd, \"  Bits/Sample: %u\\n\", td->td_bitspersample);\n\tif (TIFFFieldSet(tif,FIELD_SAMPLEFORMAT)) {\n\t\tfprintf(fd, \"  Sample Format: \");\n\t\tswitch (td->td_sampleformat) {\n\t\tcase SAMPLEFORMAT_VOID:\n\t\t\tfprintf(fd, \"void\\n\");\n\t\t\tbreak;\n\t\tcase SAMPLEFORMAT_INT:\n\t\t\tfprintf(fd, \"signed integer\\n\");\n\t\t\tbreak;\n\t\tcase SAMPLEFORMAT_UINT:\n\t\t\tfprintf(fd, \"unsigned integer\\n\");\n\t\t\tbreak;\n\t\tcase SAMPLEFORMAT_IEEEFP:\n\t\t\tfprintf(fd, \"IEEE floating point\\n\");\n\t\t\tbreak;\n\t\tcase SAMPLEFORMAT_COMPLEXINT:\n\t\t\tfprintf(fd, \"complex signed integer\\n\");\n\t\t\tbreak;\n\t\tcase SAMPLEFORMAT_COMPLEXIEEEFP:\n\t\t\tfprintf(fd, \"complex IEEE floating point\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfprintf(fd, \"%u (0x%x)\\n\",\n\t\t\t    td->td_sampleformat, td->td_sampleformat);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (TIFFFieldSet(tif,FIELD_COMPRESSION)) {\n\t\tconst TIFFCodec* c = TIFFFindCODEC(td->td_compression);\n\t\tfprintf(fd, \"  Compression Scheme: \");\n\t\tif (c)\n\t\t\tfprintf(fd, \"%s\\n\", c->name);\n\t\telse\n\t\t\tfprintf(fd, \"%u (0x%x)\\n\",\n\t\t\t    td->td_compression, td->td_compression);\n\t}\n\tif (TIFFFieldSet(tif,FIELD_PHOTOMETRIC)) {\n\t\tfprintf(fd, \"  Photometric Interpretation: \");\n\t\tif (td->td_photometric < NPHOTONAMES)\n\t\t\tfprintf(fd, \"%s\\n\", photoNames[td->td_photometric]);\n\t\telse {\n\t\t\tswitch (td->td_photometric) {\n\t\t\tcase PHOTOMETRIC_LOGL:\n\t\t\t\tfprintf(fd, \"CIE Log2(L)\\n\");\n\t\t\t\tbreak;\n\t\t\tcase PHOTOMETRIC_LOGLUV:\n\t\t\t\tfprintf(fd, \"CIE Log2(L) (u',v')\\n\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tfprintf(fd, \"%u (0x%x)\\n\",\n\t\t\t\t    td->td_photometric, td->td_photometric);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (TIFFFieldSet(tif,FIELD_EXTRASAMPLES) && td->td_extrasamples) {\n\t\tfprintf(fd, \"  Extra Samples: %u<\", td->td_extrasamples);\n\t\tsep = \"\";\n\t\tfor (i = 0; i < td->td_extrasamples; i++) {\n\t\t\tswitch (td->td_sampleinfo[i]) {\n\t\t\tcase EXTRASAMPLE_UNSPECIFIED:\n\t\t\t\tfprintf(fd, \"%sunspecified\", sep);\n\t\t\t\tbreak;\n\t\t\tcase EXTRASAMPLE_ASSOCALPHA:\n\t\t\t\tfprintf(fd, \"%sassoc-alpha\", sep);\n\t\t\t\tbreak;\n\t\t\tcase EXTRASAMPLE_UNASSALPHA:\n\t\t\t\tfprintf(fd, \"%sunassoc-alpha\", sep);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tfprintf(fd, \"%s%u (0x%x)\", sep,\n\t\t\t\t    td->td_sampleinfo[i], td->td_sampleinfo[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsep = \", \";\n\t\t}\n\t\tfprintf(fd, \">\\n\");\n\t}\n\tif (TIFFFieldSet(tif,FIELD_INKNAMES)) {\n\t\tchar* cp;\n\t\tfprintf(fd, \"  Ink Names: \");\n\t\ti = td->td_samplesperpixel;\n\t\tsep = \"\";\n\t\tfor (cp = td->td_inknames; i > 0; cp = strchr(cp,'\\0')+1, i--) {\n\t\t\tfputs(sep, fd);\n\t\t\t_TIFFprintAscii(fd, cp);\n\t\t\tsep = \", \";\n\t\t}\n                fputs(\"\\n\", fd);\n\t}\n\tif (TIFFFieldSet(tif,FIELD_THRESHHOLDING)) {\n\t\tfprintf(fd, \"  Thresholding: \");\n\t\tswitch (td->td_threshholding) {\n\t\tcase THRESHHOLD_BILEVEL:\n\t\t\tfprintf(fd, \"bilevel art scan\\n\");\n\t\t\tbreak;\n\t\tcase THRESHHOLD_HALFTONE:\n\t\t\tfprintf(fd, \"halftone or dithered scan\\n\");\n\t\t\tbreak;\n\t\tcase THRESHHOLD_ERRORDIFFUSE:\n\t\t\tfprintf(fd, \"error diffused\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfprintf(fd, \"%u (0x%x)\\n\",\n\t\t\t    td->td_threshholding, td->td_threshholding);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (TIFFFieldSet(tif,FIELD_FILLORDER)) {\n\t\tfprintf(fd, \"  FillOrder: \");\n\t\tswitch (td->td_fillorder) {\n\t\tcase FILLORDER_MSB2LSB:\n\t\t\tfprintf(fd, \"msb-to-lsb\\n\");\n\t\t\tbreak;\n\t\tcase FILLORDER_LSB2MSB:\n\t\t\tfprintf(fd, \"lsb-to-msb\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfprintf(fd, \"%u (0x%x)\\n\",\n\t\t\t    td->td_fillorder, td->td_fillorder);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (TIFFFieldSet(tif,FIELD_YCBCRSUBSAMPLING))\n        {\n            /*\n             * For hacky reasons (see tif_jpeg.c - JPEGFixupTestSubsampling),\n             * we need to fetch this rather than trust what is in our\n             * structures.\n             */\n            uint16 subsampling[2];\n\n            TIFFGetField( tif, TIFFTAG_YCBCRSUBSAMPLING,\n                          subsampling + 0, subsampling + 1 );\n\t\tfprintf(fd, \"  YCbCr Subsampling: %u, %u\\n\",\n                        subsampling[0], subsampling[1] );\n        }\n\tif (TIFFFieldSet(tif,FIELD_YCBCRPOSITIONING)) {\n\t\tfprintf(fd, \"  YCbCr Positioning: \");\n\t\tswitch (td->td_ycbcrpositioning) {\n\t\tcase YCBCRPOSITION_CENTERED:\n\t\t\tfprintf(fd, \"centered\\n\");\n\t\t\tbreak;\n\t\tcase YCBCRPOSITION_COSITED:\n\t\t\tfprintf(fd, \"cosited\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfprintf(fd, \"%u (0x%x)\\n\",\n\t\t\t    td->td_ycbcrpositioning, td->td_ycbcrpositioning);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (TIFFFieldSet(tif,FIELD_HALFTONEHINTS))\n\t\tfprintf(fd, \"  Halftone Hints: light %u dark %u\\n\",\n\t\t    td->td_halftonehints[0], td->td_halftonehints[1]);\n\tif (TIFFFieldSet(tif,FIELD_ORIENTATION)) {\n\t\tfprintf(fd, \"  Orientation: \");\n\t\tif (td->td_orientation < NORIENTNAMES)\n\t\t\tfprintf(fd, \"%s\\n\", orientNames[td->td_orientation]);\n\t\telse\n\t\t\tfprintf(fd, \"%u (0x%x)\\n\",\n\t\t\t    td->td_orientation, td->td_orientation);\n\t}\n\tif (TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))\n\t\tfprintf(fd, \"  Samples/Pixel: %u\\n\", td->td_samplesperpixel);\n\tif (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP)) {\n\t\tfprintf(fd, \"  Rows/Strip: \");\n\t\tif (td->td_rowsperstrip == (uint32) -1)\n\t\t\tfprintf(fd, \"(infinite)\\n\");\n\t\telse\n\t\t\tfprintf(fd, \"%lu\\n\", (unsigned long) td->td_rowsperstrip);\n\t}\n\tif (TIFFFieldSet(tif,FIELD_MINSAMPLEVALUE))\n\t\tfprintf(fd, \"  Min Sample Value: %u\\n\", td->td_minsamplevalue);\n\tif (TIFFFieldSet(tif,FIELD_MAXSAMPLEVALUE))\n\t\tfprintf(fd, \"  Max Sample Value: %u\\n\", td->td_maxsamplevalue);\n\tif (TIFFFieldSet(tif,FIELD_SMINSAMPLEVALUE))\n\t\tfprintf(fd, \"  SMin Sample Value: %g\\n\",\n\t\t    td->td_sminsamplevalue);\n\tif (TIFFFieldSet(tif,FIELD_SMAXSAMPLEVALUE))\n\t\tfprintf(fd, \"  SMax Sample Value: %g\\n\",\n\t\t    td->td_smaxsamplevalue);\n\tif (TIFFFieldSet(tif,FIELD_PLANARCONFIG)) {\n\t\tfprintf(fd, \"  Planar Configuration: \");\n\t\tswitch (td->td_planarconfig) {\n\t\tcase PLANARCONFIG_CONTIG:\n\t\t\tfprintf(fd, \"single image plane\\n\");\n\t\t\tbreak;\n\t\tcase PLANARCONFIG_SEPARATE:\n\t\t\tfprintf(fd, \"separate image planes\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfprintf(fd, \"%u (0x%x)\\n\",\n\t\t\t    td->td_planarconfig, td->td_planarconfig);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (TIFFFieldSet(tif,FIELD_PAGENUMBER))\n\t\tfprintf(fd, \"  Page Number: %u-%u\\n\",\n\t\t    td->td_pagenumber[0], td->td_pagenumber[1]);\n\tif (TIFFFieldSet(tif,FIELD_COLORMAP)) {\n\t\tfprintf(fd, \"  Color Map: \");\n\t\tif (flags & TIFFPRINT_COLORMAP) {\n\t\t\tfprintf(fd, \"\\n\");\n\t\t\tn = 1L<<td->td_bitspersample;\n\t\t\tfor (l = 0; l < n; l++)\n\t\t\t\tfprintf(fd, \"   %5lu: %5u %5u %5u\\n\",\n\t\t\t\t    l,\n\t\t\t\t    td->td_colormap[0][l],\n\t\t\t\t    td->td_colormap[1][l],\n\t\t\t\t    td->td_colormap[2][l]);\n\t\t} else\n\t\t\tfprintf(fd, \"(present)\\n\");\n\t}\n\tif (TIFFFieldSet(tif,FIELD_TRANSFERFUNCTION)) {\n\t\tfprintf(fd, \"  Transfer Function: \");\n\t\tif (flags & TIFFPRINT_CURVES) {\n\t\t\tfprintf(fd, \"\\n\");\n\t\t\tn = 1L<<td->td_bitspersample;\n\t\t\tfor (l = 0; l < n; l++) {\n\t\t\t\tfprintf(fd, \"    %2lu: %5u\",\n\t\t\t\t    l, td->td_transferfunction[0][l]);\n\t\t\t\tfor (i = 1; i < td->td_samplesperpixel; i++)\n\t\t\t\t\tfprintf(fd, \" %5u\",\n\t\t\t\t\t    td->td_transferfunction[i][l]);\n\t\t\t\tfputc('\\n', fd);\n\t\t\t}\n\t\t} else\n\t\t\tfprintf(fd, \"(present)\\n\");\n\t}\n\tif (TIFFFieldSet(tif, FIELD_SUBIFD) && (td->td_subifd)) {\n\t\tfprintf(fd, \"  SubIFD Offsets:\");\n\t\tfor (i = 0; i < td->td_nsubifd; i++)\n\t\t\tfprintf(fd, \" %5lu\", (long) td->td_subifd[i]);\n\t\tfputc('\\n', fd);\n\t}\n\n        /*\n        ** Custom tag support.\n        */\n        {\n            int  i;\n            short count;\n\n            count = (short) TIFFGetTagListCount(tif);\n            for(i = 0; i < count; i++) {\n                ttag_t  tag = TIFFGetTagListEntry(tif, i);\n                const TIFFFieldInfo *fip;\n                uint32 value_count;\n                int mem_alloc = 0;\n                void *raw_data;\n\n                fip = TIFFFieldWithTag(tif, tag);\n                if(fip == NULL)\n\t\t\tcontinue;\n\n\t\tif(fip->field_passcount) {\n\t\t\tif(TIFFGetField(tif, tag, &value_count, &raw_data) != 1)\n\t\t\t\tcontinue;\n\t\t} else {\n\t\t\tif (fip->field_readcount == TIFF_VARIABLE\n\t\t\t    || fip->field_readcount == TIFF_VARIABLE2)\n\t\t\t\tvalue_count = 1;\n\t\t\telse if (fip->field_readcount == TIFF_SPP)\n\t\t\t\tvalue_count = td->td_samplesperpixel;\n\t\t\telse\n\t\t\t\tvalue_count = fip->field_readcount;\n\t\t\tif ((fip->field_type == TIFF_ASCII\n\t\t\t     || fip->field_readcount == TIFF_VARIABLE\n\t\t\t     || fip->field_readcount == TIFF_VARIABLE2\n\t\t\t     || fip->field_readcount == TIFF_SPP\n\t\t\t     || value_count > 1)\n\t\t\t    && fip->field_tag != TIFFTAG_PAGENUMBER\n\t\t\t    && fip->field_tag != TIFFTAG_HALFTONEHINTS\n\t\t\t    && fip->field_tag != TIFFTAG_YCBCRSUBSAMPLING\n\t\t\t    && fip->field_tag != TIFFTAG_DOTRANGE) {\n\t\t\t\tif(TIFFGetField(tif, tag, &raw_data) != 1)\n\t\t\t\t\tcontinue;\n\t\t\t} else if (fip->field_tag != TIFFTAG_PAGENUMBER\n\t\t\t\t   && fip->field_tag != TIFFTAG_HALFTONEHINTS\n\t\t\t\t   && fip->field_tag != TIFFTAG_YCBCRSUBSAMPLING\n\t\t\t\t   && fip->field_tag != TIFFTAG_DOTRANGE) {\n\t\t\t\traw_data = _TIFFmalloc(\n\t\t\t\t\t_TIFFDataSize(fip->field_type)\n\t\t\t\t\t* value_count);\n\t\t\t\tmem_alloc = 1;\n\t\t\t\tif(TIFFGetField(tif, tag, raw_data) != 1) {\n\t\t\t\t\t_TIFFfree(raw_data);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * XXX: Should be fixed and removed, see the\n\t\t\t\t * notes related to TIFFTAG_PAGENUMBER,\n\t\t\t\t * TIFFTAG_HALFTONEHINTS,\n\t\t\t\t * TIFFTAG_YCBCRSUBSAMPLING and\n\t\t\t\t * TIFFTAG_DOTRANGE tags in tif_dir.c. */\n\t\t\t\tchar *tmp;\n\t\t\t\traw_data = _TIFFmalloc(\n\t\t\t\t\t_TIFFDataSize(fip->field_type)\n\t\t\t\t\t* value_count);\n\t\t\t\ttmp = raw_data;\n\t\t\t\tmem_alloc = 1;\n\t\t\t\tif(TIFFGetField(tif, tag, tmp,\n\t\t\t\ttmp + _TIFFDataSize(fip->field_type)) != 1) {\n\t\t\t\t\t_TIFFfree(raw_data);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Catch the tags which needs to be specially handled and\n\t\t * pretty print them. If tag not handled in\n\t\t * _TIFFPrettyPrintField() fall down and print it as any other\n\t\t * tag.\n\t\t */\n\t\tif (_TIFFPrettyPrintField(tif, fd, tag, value_count, raw_data)) {\n\t\t\tif(mem_alloc)\n\t\t\t\t_TIFFfree(raw_data);\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t\t_TIFFPrintField(fd, fip, value_count, raw_data);\n\n\t\tif(mem_alloc)\n\t\t\t_TIFFfree(raw_data);\n            }\n        }\n\n\tif (tif->tif_tagmethods.printdir)\n\t\t(*tif->tif_tagmethods.printdir)(tif, fd, flags);\n\tif ((flags & TIFFPRINT_STRIPS) &&\n\t    TIFFFieldSet(tif,FIELD_STRIPOFFSETS)) {\n\t\ttstrip_t s;\n\n\t\tfprintf(fd, \"  %lu %s:\\n\",\n\t\t    (long) td->td_nstrips,\n\t\t    isTiled(tif) ? \"Tiles\" : \"Strips\");\n\t\tfor (s = 0; s < td->td_nstrips; s++)\n\t\t\tfprintf(fd, \"    %3lu: [%8lu, %8lu]\\n\",\n\t\t\t    (unsigned long) s,\n\t\t\t    (unsigned long) td->td_stripoffset[s],\n\t\t\t    (unsigned long) td->td_stripbytecount[s]);\n\t}\n}"
}