{
    "project": "binutils",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "gas/app.c",
    "message": "The value read from fromlen was never initialized.",
    "warning_function_name": NaN,
    "warning_line": "ch = GET ();",
    "warning_context": "\t\t     must be the opcode, and we've just seen the\n\t\t     whitespace after it.  */\n\t\t  state = 3;\n\t\t}\n\t      UNGET (ch);\n\t      PUT (' ');\t/* Sp after label definition.  */\n\t      break;\n\t    default:\n\t      BAD_CASE (state);\n\t    }\n\t  break;\n\n\tcase LEX_IS_TWOCHAR_COMMENT_1ST:\n\t  ch2 = GET ();\n\t  if (ch2 == '*')\n\t    {\n\t      for (;;)\n\t\t{\n\t\t  do\n\t\t    {\n\t\t      ch2 = GET ();\n\t\t      if (ch2 != EOF && IS_NEWLINE (ch2))\n\t\t\tadd_newlines++;\n\t\t    }\n\t\t  while (ch2 != EOF && ch2 != '*');\n\n\t\t  while (ch2 == '*')\n\t\t    ch2 = GET ();\n\n\t\t  if (ch2 == EOF || ch2 == '/')\n\t\t    break;\n\n\t\t  /* This UNGET will ensure that we count newlines\n\t\t     correctly.  */\n\t\t  UNGET (ch2);\n\t\t}\n\n\t      if (ch2 == EOF)\n\t\tas_warn (_(\"end of file in multiline comment\"));\n\n\t      ch = ' ';\n\t      goto recycle;\n\t    }\n#ifdef DOUBLESLASH_LINE_COMMENTS\n\t  else if (ch2 == '/')\n\t    {\n\t      do\n\t\t{\n\t\t  ch = GET ();\n\t\t}\n\t      while (ch != EOF && !IS_NEWLINE (ch));\n\t      if (ch == EOF)\n\t\tas_warn (\"end of file in comment; newline inserted\");\n\t      state = 0;\n\t      PUT ('\\n');\n\t      break;\n\t    }\n#endif\n\t  else\n\t    {\n\t      if (ch2 != EOF)\n\t\tUNGET (ch2);\n\t      if (state == 9 || state == 10)\n\t\tstate = 3;\n\t      PUT (ch);\n\t    }\n\t  break;\n\n\tcase LEX_IS_STRINGQUOTE:\n\t  quotechar = ch;\n\t  if (state == 10)\n\t    {\n\t      /* Preserve the whitespace in foo \"bar\".  */\n\t      UNGET (ch);\n\t      state = 3;\n\t      PUT (' ');\n\n\t      /* PUT didn't jump out.  We could just break, but we\n\t\t know what will happen, so optimize a bit.  */\n\t      ch = GET ();\n\t      old_state = 3;\n\t    }\n\t  else if (state == 9)\n\t    old_state = 3;\n\t  else\n\t    old_state = state;\n\t  state = 5;\n\t  PUT (ch);\n\t  break;\n\n#ifndef IEEE_STYLE\n\tcase LEX_IS_ONECHAR_QUOTE:\n#ifdef H_TICK_HEX\n\t  if (state == 9 && enable_h_tick_hex)\n\t    {\n\t      char c;\n\n\t      c = GET ();\n\t      as_warn (\"'%c found after symbol\", c);\n\t      UNGET (c);\n\t    }\n"
}