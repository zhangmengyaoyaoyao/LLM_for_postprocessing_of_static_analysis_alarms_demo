{
    "project": "bash",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L1",
    "file": "print_cmd.c",
    "message": "Offset: [1, +oo] Size: 1 by call to `cprintf`.",
    "warning_function_name": "make_command_string_internal",
    "warning_line": "cprintf (\"\");",
    "warning_context": "static void\nmake_command_string_internal (command)\n     COMMAND *command;\n{\n  char s[3];\n\n  if (command == 0)\n    cprintf (\"\");\n  else\n    {\n      if (skip_this_indent)\n\tskip_this_indent--;\n      else\n\tindent (indentation);\n\n      if (command->flags & CMD_TIME_PIPELINE)\n\t{\n\t  cprintf (\"time \");\n\t  if (command->flags & CMD_TIME_POSIX)\n\t    cprintf (\"-p \");\n\t}\n\n      if (command->flags & CMD_INVERT_RETURN)\n\tcprintf (\"! \");\n\n      switch (command->type)\n\t{\n\tcase cm_for:\n\t  print_for_command (command->value.For);\n\t  break;\n\n#if defined (ARITH_FOR_COMMAND)\n\tcase cm_arith_for:\n\t  print_arith_for_command (command->value.ArithFor);\n\t  break;\n#endif\n\n#if defined (SELECT_COMMAND)\n\tcase cm_select:\n\t  print_select_command (command->value.Select);\n\t  break;\n#endif\n\n\tcase cm_case:\n\t  print_case_command (command->value.Case);\n\t  break;\n\n\tcase cm_while:\n\t  print_while_command (command->value.While);\n\t  break;\n\n\tcase cm_until:\n\t  print_until_command (command->value.While);\n\t  break;\n\n\tcase cm_if:\n\t  print_if_command (command->value.If);\n\t  break;\n\n#if defined (DPAREN_ARITHMETIC)\n\tcase cm_arith:\n\t  print_arith_command (command->value.Arith->exp);\n\t  break;\n#endif\n\n#if defined (COND_COMMAND)\n\tcase cm_cond:\n\t  print_cond_command (command->value.Cond);\n\t  break;\n#endif\n\n\tcase cm_simple:\n\t  print_simple_command (command->value.Simple);\n\t  break;\n\n\tcase cm_connection:\n\n\t  skip_this_indent++;\n\t  printing_connection++;\n\t  make_command_string_internal (command->value.Connection->first);\n\n\t  switch (command->value.Connection->connector)\n\t    {\n\t    case '&':\n\t    case '|':\n\t      {\n\t\tchar c = command->value.Connection->connector;\n\n\t\ts[0] = ' ';\n\t\ts[1] = c;\n\t\ts[2] = '\\0';\n\t\t\n\t\tprint_deferred_heredocs (s);\n\n\t\tif (c != '&' || command->value.Connection->second)\n\t\t  {\n\t\t    cprintf (\" \");\n\t\t    skip_this_indent++;\n\t\t  }\n\t      }\n\t      break;\n"
}