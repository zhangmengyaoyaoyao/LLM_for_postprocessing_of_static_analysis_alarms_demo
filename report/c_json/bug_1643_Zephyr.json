{
    "project": "Zephyr",
    "tool": "Cppcheck",
    "category": "Null Pointer Dereference",
    "file": "subsys/net/ip/tcp.c",
    "message": "Either the condition 'context' is redundant or there is possible null pointer dereference: context.",
    "warning_function_name": "NET_CONN_CB",
    "warning_line": "switch (net_tcp_get_state(context->tcp)) {",
    "warning_context": "NET_CONN_CB(tcp_synack_received)\n{\n\tstruct net_context *context = (struct net_context *)user_data;\n\tstruct net_tcp_hdr *tcp_hdr = proto_hdr->tcp;\n\tint ret;\n\n\tNET_ASSERT(context && context->tcp);\n\n\tswitch (net_tcp_get_state(context->tcp)) {\n\tcase NET_TCP_SYN_SENT:\n\t\tnet_context_set_iface(context, net_pkt_iface(pkt));\n\t\tbreak;\n\tdefault:\n\t\tNET_DBG(\"Context %p in wrong state %d\",\n\t\t\tcontext, net_tcp_get_state(context->tcp));\n\t\treturn NET_DROP;\n\t}\n\n\tnet_pkt_set_context(pkt, context);\n\n\tNET_ASSERT(net_pkt_iface(pkt));\n\n\tif (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {\n\t\t/* We only accept RST packet that has valid seq field. */\n\t\tif (!net_tcp_validate_seq(context->tcp, tcp_hdr)) {\n\t\t\tnet_stats_update_tcp_seg_rsterr(net_pkt_iface(pkt));\n\t\t\treturn NET_DROP;\n\t\t}\n\n\t\tnet_stats_update_tcp_seg_rst(net_pkt_iface(pkt));\n\n\t\tk_sem_give(&context->tcp->connect_wait);\n\n\t\tif (context->connect_cb) {\n\t\t\tcontext->connect_cb(context, -ECONNREFUSED,\n\t\t\t\t\t    context->user_data);\n\t\t}\n\n\t\treturn NET_DROP;\n\t}\n\n\tif (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {\n\t\tcontext->tcp->send_ack =\n\t\t\tsys_get_be32(tcp_hdr->seq) + 1;\n\t}\n\t/*\n\t * If we receive SYN, we send SYN-ACK and go to SYN_RCVD state.\n\t */\n\tif (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {\n\t\t/* Remove the temporary connection handler and register\n\t\t * a proper now as we have an established connection.\n\t\t */\n\t\tstruct sockaddr local_addr;\n\t\tstruct sockaddr remote_addr;\n\n\t\ttcp_copy_ip_addr_from_hdr(net_pkt_family(pkt), ip_hdr, tcp_hdr,\n\t\t\t\t\t  &remote_addr, true);\n\t\ttcp_copy_ip_addr_from_hdr(net_pkt_family(pkt), ip_hdr, tcp_hdr,\n\t\t\t\t\t  &local_addr, false);\n\n\t\tnet_tcp_unregister(context->conn_handler);\n\n\t\tret = net_tcp_register(net_pkt_family(pkt),\n\t\t\t\t       &remote_addr,\n\t\t\t\t       &local_addr,\n\t\t\t\t       ntohs(tcp_hdr->src_port),\n\t\t\t\t       ntohs(tcp_hdr->dst_port),\n\t\t\t\t       tcp_established,\n\t\t\t\t       context,\n\t\t\t\t       &context->conn_handler);\n\t\tif (ret < 0) {\n\t\t\tNET_DBG(\"Cannot register TCP handler (%d)\", ret);\n\t\t\tsend_reset(context, &local_addr, &remote_addr);\n\t\t\treturn NET_DROP;\n\t\t}\n\n\t\tnet_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);\n\t\tnet_context_set_state(context, NET_CONTEXT_CONNECTED);\n\n\t\tsend_ack(context, &remote_addr, false);\n\n\t\tk_sem_give(&context->tcp->connect_wait);\n\n\t\tif (context->connect_cb) {\n\t\t\tcontext->connect_cb(context, 0, context->user_data);\n\t\t}\n\t}\n\n\treturn NET_DROP;\n}\n"
}