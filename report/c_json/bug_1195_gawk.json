{
    "Project": "gawk",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "main.c",
    "message": "Offset: [1, +oo] Size: [0, +oo] by call to `variable`.",
    "warning_function_name": "arg_assign",
    "warning_line": "var = variable(0, cp2, Node_var);",
    "warning_context": "\tNODE **lhs;\n\tlong save_FNR;\n\n\tif (! initing && disallow_var_assigns)\n\t\treturn false;\t/* --exec */\n\n\tcp = strchr(arg, '=');\n\n\tif (cp == NULL) {\n\t\tif (! initing)\n\t\t\treturn false;\t/* This is file name, not assignment. */\n\n\t\tfprintf(stderr,\n\t\t\t_(\"%s: `%s' argument to `-v' not in `var=value' form\\n\\n\"),\n\t\t\tmyname, arg);\n\t\tusage(EXIT_FAILURE, stderr);\n\t}\n\n\t*cp++ = '\\0';\n\n\t/* avoid false source indications in a fatal message */\n\tsource = NULL;\n\tsourceline = 0;\n\tsave_FNR = FNR;\n\tFNR = 0;\n\n\t/* first check that the variable name has valid syntax */\n\tbadvar = false;\n\tif (! is_alpha((unsigned char) arg[0]) && arg[0] != '_')\n\t\tbadvar = true;\n\telse\n\t\tfor (cp2 = arg+1; *cp2; cp2++)\n\t\t\tif (! is_identchar((unsigned char) *cp2)) {\n\t\t\t\tbadvar = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\tif (badvar) {\n\t\tif (initing)\n\t\t\tfatal(_(\"`%s' is not a legal variable name\"), arg);\n\n\t\tif (do_lint)\n\t\t\tlintwarn(_(\"`%s' is not a variable name, looking for file `%s=%s'\"),\n\t\t\t\targ, arg, cp);\n\t} else {\n\t\tif (check_special(arg) >= 0)\n\t\t\tfatal(_(\"cannot use gawk builtin `%s' as variable name\"), arg);\n\n\t\tif (! initing) {\n\t\t\tvar = lookup(arg);\n\t\t\tif (var != NULL && var->type == Node_func)\n\t\t\t\tfatal(_(\"cannot use function `%s' as variable name\"), arg); \n\t\t}\n\n\t\t/*\n\t\t * BWK awk expands escapes inside assignments.\n\t\t * This makes sense, so we do it too.\n\t\t */\n\t\tit = make_str_node(cp, strlen(cp), SCAN);\n\t\tit->flags |= MAYBE_NUM;\n#ifdef LC_NUMERIC\n\t\t/*\n\t\t * See comment above about locale decimal point.\n\t\t */\n\t\tif (do_posix)\n\t\t\tsetlocale(LC_NUMERIC, \"C\");\n\t\t(void) force_number(it);\n\t\tif (do_posix)\n\t\t\tsetlocale(LC_NUMERIC, locale);\n#endif /* LC_NUMERIC */\n\n\t\t/*\n\t\t * since we are restoring the original text of ARGV later,\n\t\t * need to copy the variable name part if we don't want\n\t\t * name like v=abc instead of just v in var->vname\n\t\t */\n\n\t\tcp2 = estrdup(arg, cp - arg);\t/* var name */\n\n\t\tvar = variable(0, cp2, Node_var);\n\t\tif (var == NULL)\t/* error */\n\t\t\tfinal_exit(EXIT_FATAL);\n\t\tif (var->type == Node_var && var->var_update)\n\t\t\tvar->var_update();\n\t\tlhs = get_lhs(var, false);\n\t\tunref(*lhs);\n\t\t*lhs = it;\n\t\t/* check for set_FOO() routine */\n\t\tif (var->type == Node_var && var->var_assign)\n\t\t\tvar->var_assign();\n\t}\n\n\tif (! initing)\n\t\t*--cp = '=';\t/* restore original text of ARGV */\n\tFNR = save_FNR;\n\treturn ! badvar;\n}\n\n/* catchsig --- catch signals */\n\nstatic RETSIGTYPE\n"
}