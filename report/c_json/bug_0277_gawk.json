{
    "Project": "gawk",
    "Tool": "Infer",
    "Bug Type": "NULL_DEREFERENCE",
    "Message": "pointer `subs` last assigned on line 4587 could be null and is dereferenced at line 4591, column 5.",
    "Code_line": "\t\t\t\tsubs[i] = make_string(pstr[cnt + 1], sub_len);",
    "Code_function": "unserialize_list_item(struct list_item *list, char **pstr, int *pstr_len, int field_cnt)\n{\n\tint num, type, i;\n\tstruct list_item *l;\n\tNODE *symbol = NULL;\n\tint sub_cnt = 0, cnt;\n\tNODE **subs = NULL;\n\n\t/* subscript\t-- number type sname num_subs subs [commands [condition]]\n\t * variable\t\t-- number type sname [commands [condition]]\n\t * field\t\t-- number type symbol(numbr) commands [commands [condition]]\n\t */\n\n\tnum = strtol(pstr[0], NULL, 0);\n\ttype = strtol(pstr[1], NULL, 0);\n\n\tif (type == D_field) {\n\t\tint field_num;\n\t\tfield_num = strtol(pstr[2], NULL, 0);\n\t\tsymbol = make_number((AWKNUM) field_num);\n\t\tcnt = 3;\n\t} else {\n\t\tchar *name;\n\t\tname = estrdup(pstr[2], pstr_len[2]);\n\t\tsymbol = find_symbol(name, NULL);\n\t\tefree(name);\n\t\tif (symbol == NULL)\n\t\t\treturn NULL;\n\t\tcnt = 3;\n\t\tif (type == D_subscript) {\n\t\t\tint sub_len;\n\t\t\tsub_cnt = strtol(pstr[3], NULL, 0);\n\t\t\temalloc(subs, NODE **, sub_cnt * sizeof(NODE *), \"unserialize_list_item\");\n\t\t\tcnt++;\n\t\t\tfor (i = 0; i < sub_cnt; i++) {\n\t\t\t\tsub_len = strtol(pstr[cnt], NULL, 0);\n\t\t\t\tsubs[i] = make_string(pstr[cnt + 1], sub_len);\n\t\t\t\tcnt += 2;\n\t\t\t}\n\t\t}\n\t}\n\n\tl = add_item(list, type, symbol, NULL);\n\tif (type == D_subscript) {\n\t\tl->num_subs = sub_cnt;\n\t\tl->subs = subs;\n\t}\n\tl->number = num;\t/* keep same item number across executions */\n\n\tif (list == &watch_list) {\n\t\tinitialize_watch_item(l);\n\t\t/* unserialize watchpoint `commands' */\n\t\tunserialize_commands(pstr[cnt], pstr_len[cnt]);\n\t\tcnt++;\n\t\tif (field_cnt > cnt) {\n\t\t\tchar *expr;\n\t\t\texpr = estrdup(pstr[cnt], pstr_len[cnt]);\n\t\t\tif (parse_condition(D_watch, l->number, expr) != 0)\n\t\t\t\tefree(expr);\n\t\t}\n\t\tif (num > list->number)   /* update list number counter */\n\t\t\tlist->number = num;\n\t} else\n\t\tlist->number = num;\n\n\treturn l;\n}"
}