{
    "Project": "gawk",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Code_line": "\ttbreak = instruction(Op_no_op);",
    "Code_function": "mk_for_loop(INSTRUCTION *forp, INSTRUCTION *init, INSTRUCTION *cond,\n\t\t\t\tINSTRUCTION *incr, INSTRUCTION *body)\n{\n\t/*\n\t *   ------------------------\n\t *        init                 (may be NULL)\n\t *   ------------------------\n\t * x:\n\t *        cond                 (Op_no_op if NULL)\n\t *   ------------------------\n\t *    [ Op_jmp_false tb      ]\n\t *   ------------------------\n\t *        body                 (may be NULL)\n\t *   ------------------------\n\t * tc:\n\t *    incr                      (may be NULL)\n\t *    [ Op_jmp x             ]\n\t *   ------------------------\n\t * tb:[ Op_no_op             ]\n\t */\n\n\tINSTRUCTION *ip, *tbreak, *tcont;\n\tINSTRUCTION *jmp;\n\tINSTRUCTION *pp_cond;\n\tINSTRUCTION *ret;\n\n\ttbreak = instruction(Op_no_op);\n\n\tif (cond != NULL) {\n\t\tadd_lint(cond, LINT_assign_in_cond);\n\t\tpp_cond = cond->nexti;\n\t\tip = cond;\n\t\t(void) list_append(ip, instruction(Op_jmp_false));\n\t\tip->lasti->target_jmp = tbreak;\n\t} else {\n\t\tpp_cond = instruction(Op_no_op);\n\t\tip = list_create(pp_cond);\n\t}\n\n\tif (init != NULL)\n\t\tip = list_merge(init, ip);\n\n\tif (do_pretty_print) {\n\t\t(void) list_append(ip, instruction(Op_exec_count));\n\t\t(forp + 1)->forloop_cond = pp_cond;\n\t\t(forp + 1)->forloop_body = ip->lasti;\n\t}\n\n\tif (body != NULL)\n\t\t(void) list_merge(ip, body);\n\n\tjmp = instruction(Op_jmp);\n\tjmp->target_jmp = pp_cond;\n\tif (incr == NULL)\n\t\ttcont = jmp;\n\telse {\n\t\ttcont = incr->nexti;\n\t\t(void) list_merge(ip, incr);\n\t}\n\n\t(void) list_append(ip, jmp);\n\tret = list_append(ip, tbreak);\n\tfix_break_continue(ret, tbreak, tcont);\n\n\tif (do_pretty_print) {\n\t\tforp->target_break = tbreak;\n\t\tforp->target_continue = tcont;\n\t\tret = list_prepend(ret, forp);\n\t} /* else\n\t\t\tforp is NULL */\n\n\treturn ret;\n}"
}