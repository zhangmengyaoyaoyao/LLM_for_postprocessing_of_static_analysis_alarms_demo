{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "ld/ldbuildid.c",
    "message": "Offset added: [56, 120] Size: 64 by call to `sha1_finish_ctx`.",
    "warning_function_name": "generate_build_id",
    "warning_line": "sha1_finish_ctx (&ctx, id_bits);",
    "warning_context": "bfd_boolean\ngenerate_build_id (bfd *abfd,\n\t\t   const char *style,\n\t\t   checksum_fn checksum_contents,\n\t\t   unsigned char *id_bits,\n\t\t   int size ATTRIBUTE_UNUSED)\n{\n  if (streq (style, \"md5\"))\n    {\n      struct md5_ctx ctx;\n\n      md5_init_ctx (&ctx);\n      if (!(*checksum_contents) (abfd, (sum_fn) &md5_process_bytes, &ctx))\n\treturn FALSE;\n      md5_finish_ctx (&ctx, id_bits);\n    }\n  else if (streq (style, \"sha1\"))\n    {\n      struct sha1_ctx ctx;\n\n      sha1_init_ctx (&ctx);\n      if (!(*checksum_contents) (abfd, (sum_fn) &sha1_process_bytes, &ctx))\n\treturn FALSE;\n      sha1_finish_ctx (&ctx, id_bits);\n    }\n#ifndef __MINGW32__\n  else if (streq (style, \"uuid\"))\n    {\n      int n;\n      int fd = open (\"/dev/urandom\", O_RDONLY);\n\n      if (fd < 0)\n\treturn FALSE;\n      n = read (fd, id_bits, size);\n      close (fd);\n      if (n < size)\n\treturn FALSE;\n    }\n#endif\n  else if (strneq (style, \"0x\", 2))\n    {\n      /* ID is in string form (hex).  Convert to bits.  */\n      const char *id = style + 2;\n      size_t n = 0;\n\n      do\n\t{\n\t  if (ISXDIGIT (id[0]) && ISXDIGIT (id[1]))\n\t    {\n\t      id_bits[n] = read_hex (*id++) << 4;\n\t      id_bits[n++] |= read_hex (*id++);\n\t    }\n\t  else if (*id == '-' || *id == ':')\n\t    ++id;\n\t  else\n\t    abort ();\t\t/* Should have been validated earlier.  */\n\t} while (*id != '\\0');\n    }\n  else\n    abort ();\t\t\t/* Should have been validated earlier.  */\n\n  return TRUE;\n}\n"
}