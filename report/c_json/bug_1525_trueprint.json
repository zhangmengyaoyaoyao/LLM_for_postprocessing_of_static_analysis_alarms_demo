{
    "Project": "trueprint",
    "Tool": "Infer",
    "Bug Type": "UNINITIALIZED_VALUE",
    "Message": "The value read from blank_line was never initialized.",
    "Code_line": "\t      if (blank_line)",
    "Code_function": "printnextline()\n\n{\n  static char\tinput_line[MAXLINELENGTH];\n  static char_status\tinput_status[MAXLINELENGTH];\n  static int\tlast_char_printed;\n  static int\tinput_line_length=0;\n  int\t\toutput_line_end;\n  static stream_status\tretval=STREAM_OK;\n  int\t\toutput_char_idx;\n  boolean\t\tfirst_line_segment=FALSE;\n  short\t\tcount;\n  static diff_states\tdiff_state=NORMAL;\n  boolean blank_line;\n  char_status\tlast_char_status;\n\n  /*\n   * See if we need to read in a new line\n   */\n  if (input_line_length == 0)\n    {\n\n      /*\n       * we do - check to see if there might be a deleted\n       * line that needs to be printed before the current\n       * line.  if diff_state is delete then there is already\n       * a line waiting in input_line...\n       *\n       * diff_state:\n       * NORMAL\tneed another line, retval set to return of previous\n       *\t\tgetnextline() or LINE\n       * DELETE\tline waiting in input_line, retval set to return of\n       *\t\tprevious getnextline() or LINE\n       * INSERT\tshould never happen\n       */\n\n      dm('O',4,\"output.c:printnextline() Need new line\\n\");\n\n      switch (diff_state)\n\t{\n\tcase NORMAL:\n\t  dm('O',4,\"output.c:printnextline() diff_state is NORMAL\\n\");\n\t  if (getdelline(line_number+1,input_line,input_status)){\n\t    dm('O',4,\"output.c:printnextline() Found deleted line - diff_state is now DELETE\\n\");\n\t    diff_state = DELETE;\n\t  }\n\t  else\n\t    {\n\t      /*\n\t       * there isn't a deleted line - get\n\t       * the next line and check if this is\n\t       * an inserted line.\n\t       */\n\t      line_number += 1;\n\t      retval = getnextline(get_char,&blank_line,input_line,input_status);\n\t      if (line_inserted(line_number))\n\t\t{\n\t\t  dm('O',4,\"output.c:printnextline() This line is inserted - diff_state is now INSERT\\n\");\n\t\t  diff_state = INSERT;\n\t\t}\n\t      else\n\t\t{\n\t\t  dm('O',4,\"output.c:printnextline() Nothing unusual - diff_state is still NORMAL\\n\");\n\t\t  diff_state = NORMAL;\n\t\t}\n\t    }\n\t  break;\n\n\tcase DELETE:\n\t  dm('O',4,\"output.c:printnextline() diff_state is DELETE\\n\");\n\t  /*\n\t   * There is already a line in input_line, put there at the end\n\t   * of the previous call to print_page()\n\t   */\n\t  break;\n\n\tcase INSERT:\n\tdefault:\n\t  abort();\n\t}\n      input_line_length = (int)strlen(input_line);\n      last_char_printed = -1;\n      first_line_segment = TRUE;\n\n      /*\n       * At this point\n       * diff_state\n       * NORMAL\t\tprint the line, retval set to return of getnextline()\n       * DELETE\t\tprint the deleted line, retval is set to return of\n       *\t\t\tprevious getnextline() or LINE\n       * INSERT\t\tprint the line as an inserted line, retval is set to\n       *\t\t\treturn of getnextline()\n       */\n\n      /*\n       * page_has_changed() flags this page and function as having changed\n       */\n      if (diff_state != NORMAL) page_has_changed(page_number);\n\n      if (pass == 1)\n\t{\n\t  /*\n\t   * a new line of source file is about to be printed - so\n\t   * the appropriate line start, including line number and\n\t   * a mark to show insertions or deletions, needs to be\n\t   * printed.\n\t   */\n\t  if (diff_state == DELETE)\n\t    {\n\t      dm('O',4,\"output.c:printnextline() Printing line with diff state DELETE\\n\");\n\t      if ((no_show_line_number == FALSE) || (no_show_indent_level == FALSE))\n\t\tPUTS(\"Lpt (-          ) CFs setfont show (\");\n\t      else\n\t\tPUTS(\"Lpt (-) CFs setfont show (\");\n\t    }\n\t  else\n\t    {\n\t      if (diff_state == INSERT)\n\t\t{\n\t\t  dm('O',4,\"output.c:printnextline() Printing line with diff state INSERT\\n\");\n\t\t  PUTS(\"Lpt BFs setfont (+\");\n\t\t}\n\t      else\n\t\t{\n\t\t  dm('O',4,\"output.c:printnextline() Printing line with diff state NORMAL\\n\");\n\t\t  PUTS(\"Lpt CFs setfont ( \");\n\t\t}\n\n\t      if (blank_line)\n\t\tPUTS(\"          \");\n\t      else if ((no_show_line_number == FALSE) || (no_show_indent_level == FALSE))\n\t\t{\n\t\t  if (no_show_line_number == FALSE)\n\t\t    printf(\"%5ld \",line_number);\n\t\t  else\n\t\t    PUTS(\"      \");\n\t\t  if ((no_show_indent_level == FALSE) && (braces_depth != 0))\n\t\t    printf(\"%2d  \",braces_depth);\n\t\t  else\n\t\t    PUTS(\"    \");\n\t\t}\n\t      PUTS(\") show (\");\n\t    }\n\t}\n    }\n  else\n    {\n      if (pass == 1)\n\t{\n\t  if (diff_state == DELETE)\n\t    {\n\t      dm('O',4,\"output.c:printnextline() Printing line with diff state DELETE\\n\");\n\t      PUTS(\"Lpt CFs setfont ( \");\n\t    }\n\t  else if (diff_state == INSERT)\n\t    {\n\t      dm('O',4,\"output.c:printnextline() Printing line with diff state INSERT\\n\");\n\t      PUTS(\"Lpt BFs setfont ( \");\n\t    }\n\t  else\n\t    {\n\t      dm('O',4,\"output.c:printnextline() Printing line with diff state NORMAL\\n\");\n\t      PUTS(\"Lpt CFs setfont ( \");\n\t    }\n\t  if ((no_show_line_number == FALSE) || (no_show_indent_level == FALSE))\n\t    PUTS(\"          \");\n\t  PUTS(\") show (\");\n\t}\n    }\n\n  /*\n   * now work out where (and if) the line needs to be split...\n   */\n  output_line_end = line_end(input_line,last_char_printed);\n\n  if (pass == 1)\n    {\n      output_char_idx = last_char_printed;\n\n      if ((no_clever_wrap == FALSE) && !first_line_segment)\n\t{\n\t  /* want to pad the outgoing line with leading spaces */\n\t  int leading_spaces =\n\t    page_width - (output_line_end - last_char_printed);\n\n\t  for (count=1; count < leading_spaces; count++)\n\t    putchar(' ');\n\t}\n\n      /*\n       * now print the line a character at a time...  with some clever\n       * coding this could probably be speeded up by printing sections\n       * of the line instead of single characters.\n       */\n\n      last_char_status = input_status[output_char_idx+1];\n\n      while (output_char_idx < output_line_end)\n\t{\n\n\t  output_char_idx += 1;\n\n\t  /*\n\t   * Check to see if anything should be printed\n\t   * out before printing the character\n\t   */\n\t  if (last_char_status != input_status[output_char_idx])\n\t    {\n\t      PUTS(segment_ends[last_char_status][diff_state]);\n\t      PUTS(\"(\");\n\t    }\n\n\t  /*\n\t   * Print the character....\n\t   */\n\t  switch(input_line[output_char_idx])\n\t    {\n\t    case '(':\n\t    case ')':\n\t    case '\\\\': putchar('\\\\'); break;\n\t    default:\n\t      ;\n\t    }\n\t  putchar(input_line[output_char_idx]);\n\n\t  last_char_status = input_status[output_char_idx];\n\t}\n\n      PUTS(segment_ends[last_char_status][diff_state]);\n      PUTS(\" Nl\\n\");\n      output_char_idx++;\n    }\n  last_char_printed = output_line_end;\n\n  /*\n   * Have we reached the end of the line to be printed?\n   */\n  if (last_char_printed == input_line_length-1)\n    {\n      /*\n       * At this point:\n       * diff_state\n       * NORMAL\tline printed, retval set to return of getnextline()\n       * INSERT\tline printed, retval is set to return of getnextline()\n       * DELETE\tdeleted line printed, retval is set to return of\n       *\t\tprevious getnextline() or STREAM_OK\n       *\n       * We should now check to see if there are\n       * any deleted lines to be printed.  If there are then set diff_state\n       * and start printing them next time round.  Otherwise return retval.\n       */\n\n      input_line_length = 0;\n\n      if (getdelline(line_number+1,input_line,input_status))\n\t{\n\t  diff_state = DELETE;\n\t  dm('O',3,\"output.c:printnextline() Return value is STREAM_OK\\n\");\n\t  return(STREAM_OK);\n\t}\n\n      diff_state = NORMAL;\n\n      if (retval & STREAM_FILE_END)\n\t{\n\t  /*\n\t   * Set everything up for the next file\n\t   */\n\t  line_number = 0;\n\t  retval = STREAM_OK;\n\t  dm('O',3,\"output.c:printnextline() Return value is STREAM_FILE_END\\n\");\n\t  return (STREAM_FILE_END);\n\t}\n\n      dm('O',3,\"output.c:printnextline() Return value is %x\\n\", retval);\n\n      return(retval);\n\n    }\n  else\n    {\n      dm('O',3,\"output.c:printnextline() Not fully printed this line - return value is LINE\\n\");\n      return(STREAM_OK);\n    }\n}"
}