{
    "project": "combine",
    "tool": "Cppcheck",
    "category": "memleakOnRealloc",
    "file": "src/field.c",
    "message": "Common realloc mistake: 'return_array' nulled but not freed upon failure",
    "warning_function_name": "parse_field_order_string",
    "warning_line": "return_array",
    "warning_context": "\n  return_array = malloc (field_list_length * sizeof (field_id));\n  if (return_array == NULL)\n    return NULL;\n\n  for (i = 0; i < field_list_length; i++) {\n    curr_pos = field_list[i - field_list_extra]->string;\n    switch (*curr_pos) {\n    case 'r':\n    case 'd':\n    case 'o':\n    case 's':\n      return_array[i].source = *curr_pos;\n      break;\n    default:\n      FATAL_ERROR2 (_\n\t\t    (\"field order specification starts with %c:  only %s are supported\"),\n\t\t    *curr_pos, \"r, d, o, s\");\n      }\n\n    curr_pos++;\n    return_array[i].source_num = strtol (curr_pos, &curr_pos, 0);\n    if (errno == ERANGE\n\t&& (return_array[i].source_num == LONG_MIN\n\t    || return_array[i].source_num == LONG_MAX))\n      FATAL_ERROR (_(\"number out of range in field order specification\"));\n\n    if (*curr_pos == '.')\n      curr_pos++;\n    else\n      FATAL_ERROR2 (_(\"badly formed field order specification: %.*s\"),\n\t\t    field_list[i - field_list_extra]->length,\n\t\t    field_list[i - field_list_extra]->string);\n\n    switch (*curr_pos) {\n    case 'o':\n    case 'k':\n    case 'f':\n    case 'n':\n    case 's':\n    case 'e':\n      return_array[i].type = *curr_pos;\n      break;\n    default:\n      FATAL_ERROR3 (_\n\t\t    (\"badly formed field order specification: type %c unknown: %.*s\"),\n\t\t    *curr_pos, field_list[i - field_list_extra]->length,\n\t\t    field_list[i - field_list_extra]->string);\n      }\n\n    curr_pos++;\n    if (*curr_pos == '-')\n      FATAL_ERROR (_\n\t\t   (\"field number started with -; use a positive number or range 1-n\"));\n    return_array[i].type_num = strtol (curr_pos, &curr_pos, 0);\n    if (errno == ERANGE\n\t&& (return_array[i].type_num == LONG_MIN\n\t    || return_array[i].type_num == LONG_MAX))\n      FATAL_ERROR (_(\"number out of range in field order specification\"));\n\n    if (*curr_pos == '-') {\t/* Using a range of fields */\n      int upper_bound;\n      int lower_bound;\n      int j;\n\n      curr_pos++;\n      if (*curr_pos == ',' || *curr_pos == '\\0') {\n\t/* No range.  Go from whatever there was to the end. */\n\treturn_array[i].type_num *= -1;\n\t/* A negative number will indicate that field and all after it. */\n\t}\n      else {\n\tlower_bound = return_array[i].type_num + 1;\n\tupper_bound = strtol (curr_pos, &curr_pos, 0);\n\tif (errno == ERANGE && (upper_bound == LONG_MIN || upper_bound == LONG_MAX))\n\t  FATAL_ERROR (_(\"number out of range in field order specification\"));\n\n\tfield_list_length += upper_bound - lower_bound + 1;\n\n\treturn_array\n\t  = realloc (return_array, field_list_length * sizeof (field_id));\n\tif (return_array == NULL)\n\t  return NULL;\n\n\tfor (j = lower_bound; j <= upper_bound; j++) {\n\t  i++;\n\t  field_list_extra++;\n\t  return_array[i].source = return_array[i - 1].source;\n\t  return_array[i].source_num = return_array[i - 1].source_num;\n\t  return_array[i].type = return_array[i - 1].type;\n\t  return_array[i].type_num = j;\n\t  }\n\t}\n      }\n    }\n  *field_count = field_list_length;\n  return return_array;\n  }\n\n\n/********\n"
}