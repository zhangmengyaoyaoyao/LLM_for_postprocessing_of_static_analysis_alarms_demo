{
    "Project": "gawk",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Message": "Offset added: 33 (⇐ 1 + 32) Size: [0, +oo] by call to `bcalloc`.",
    "Code_line": "\t\t(void) list_append(ip, instruction(Op_field_assign));",
    "Code_function": "mk_assignment(INSTRUCTION *lhs, INSTRUCTION *rhs, INSTRUCTION *op)\n{\n\tINSTRUCTION *tp;\n\tINSTRUCTION *ip;\n\n\ttp = lhs->lasti;\n\tswitch (tp->opcode) {\n\tcase Op_field_spec:\n\t\ttp->opcode = Op_field_spec_lhs;\n\t\tbreak;\n\tcase Op_subscript:\n\t\ttp->opcode = Op_subscript_lhs;\n\t\tbreak;\n\tcase Op_push:\n\tcase Op_push_array:\n\t\ttp->opcode = Op_push_lhs;\n\t\tbreak;\n\tcase Op_field_assign:\n\t\tyyerror(_(\"cannot assign a value to the result of a field post-increment expression\"));\n\t\tbreak;\n\tdefault:\n\t\tyyerror(_(\"invalid target of assignment (opcode %s)\"),\n\t\t\t\topcode2str(tp->opcode));\n\t\tbreak;\n\t}\n\n\ttp->do_reference = (op->opcode != Op_assign);\t/* check for uninitialized reference */\n\n\tif (rhs != NULL)\n\t\tip = list_merge(rhs, lhs);\n\telse\n\t\tip = lhs;\n\n\t(void) list_append(ip, op);\n\n\tif (tp->opcode == Op_push_lhs\n\t\t\t&& tp->memory->type == Node_var\n\t\t\t&& tp->memory->var_assign\n\t) {\n\t\ttp->do_reference = false; /* no uninitialized reference checking\n\t\t                           * for a special variable.\n\t\t                           */\n\t\t(void) list_append(ip, instruction(Op_var_assign));\n\t\tip->lasti->assign_var = tp->memory->var_assign;\n\t} else if (tp->opcode == Op_field_spec_lhs) {\n\t\t(void) list_append(ip, instruction(Op_field_assign));\n\t\tip->lasti->field_assign = (Func_ptr) 0;\n\t\ttp->target_assign = ip->lasti;\n\t} else if (tp->opcode == Op_subscript_lhs) {\n\t\t(void) list_append(ip, instruction(Op_subscript_assign));\n\t}\n\n\treturn ip;\n}"
}