{
    "project": "diffutils",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/diff3.c",
    "message": "The value read from bptr was never initialized.",
    "warning_function_name": "process_diff",
    "warning_line": "*last_block = bptr;",
    "warning_context": "      bptr->lengths[0] = bptr->lengths[1] = 0;\n\n      dt = process_diff_control (&scan_diff, bptr);\n      if (dt == ERROR || *scan_diff != '\\n')\n\t{\n\t  fprintf (stderr, _(\"%s: diff failed: \"), program_name);\n\t  do\n\t    {\n\t      putc (*scan_diff, stderr);\n\t    }\n\t  while (*scan_diff++ != '\\n');\n\t  exit (EXIT_TROUBLE);\n\t}\n      scan_diff++;\n\n      /* Force appropriate ranges to be null, if necessary */\n      switch (dt)\n\t{\n\tcase ADD:\n\t  bptr->ranges[0][0]++;\n\t  break;\n\tcase DELETE:\n\t  bptr->ranges[1][0]++;\n\t  break;\n\tcase CHANGE:\n\t  break;\n\tdefault:\n\t  fatal (\"internal error: invalid diff type in process_diff\");\n\t  break;\n\t}\n\n      /* Allocate space for the pointers for the lines from filea, and\n\t parcel them out among these pointers */\n      if (dt != ADD)\n\t{\n\t  lin numlines = D_NUMLINES (bptr, 0);\n\t  if (too_many_lines <= numlines)\n\t    xalloc_die ();\n\t  bptr->lines[0] = xmalloc (numlines * sizeof *bptr->lines[0]);\n\t  bptr->lengths[0] = xmalloc (numlines * sizeof *bptr->lengths[0]);\n\t  for (i = 0; i < numlines; i++)\n\t    scan_diff = scan_diff_line (scan_diff,\n\t\t\t\t\t&(bptr->lines[0][i]),\n\t\t\t\t\t&(bptr->lengths[0][i]),\n\t\t\t\t\tdiff_limit,\n\t\t\t\t\t'<');\n\t}\n\n      /* Get past the separator for changes */\n      if (dt == CHANGE)\n\t{\n\t  if (strncmp (scan_diff, \"---\\n\", 4))\n\t    fatal (\"invalid diff format; invalid change separator\");\n\t  scan_diff += 4;\n\t}\n\n      /* Allocate space for the pointers for the lines from fileb, and\n\t parcel them out among these pointers */\n      if (dt != DELETE)\n\t{\n\t  lin numlines = D_NUMLINES (bptr, 1);\n\t  if (too_many_lines <= numlines)\n\t    xalloc_die ();\n\t  bptr->lines[1] = xmalloc (numlines * sizeof *bptr->lines[1]);\n\t  bptr->lengths[1] = xmalloc (numlines * sizeof *bptr->lengths[1]);\n\t  for (i = 0; i < numlines; i++)\n\t    scan_diff = scan_diff_line (scan_diff,\n\t\t\t\t\t&(bptr->lines[1][i]),\n\t\t\t\t\t&(bptr->lengths[1][i]),\n\t\t\t\t\tdiff_limit,\n\t\t\t\t\t'>');\n\t}\n\n      /* Place this block on the blocklist.  */\n      *block_list_end = bptr;\n      block_list_end = &bptr->next;\n    }\n\n  *block_list_end = NULL;\n  *last_block = bptr;\n  return block_list;\n}\n\n/* Skip tabs and spaces, and return the first character after them.  */\n\nstatic char * _GL_ATTRIBUTE_PURE\nskipwhite (char *s)\n{\n  while (*s == ' ' || *s == '\\t')\n    s++;\n  return s;\n}\n\n/* Read a nonnegative line number from S, returning the address of the\n   first character after the line number, and storing the number into\n   *PNUM.  Return 0 if S does not point to a valid line number.  */\n\nstatic char *\nreadnum (char *s, lin *pnum)\n{\n  unsigned char c = *s;\n"
}