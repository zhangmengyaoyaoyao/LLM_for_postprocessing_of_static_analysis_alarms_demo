{
    "Project": "tiff",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "contrib/addtiffo/tif_ovrcache.c",
    "message": "Offset: [0, max(65, `psCache->hTIFF->tif_fieldinfo->field_bit`)] Size: 4 by call to `TIFFFlush`.",
    "warning_function_name": "TIFFWriteOvrRow",
    "warning_line": "TIFFFlush( psCache->hTIFF );",
    "warning_context": "\t\tint nTileID;\n\n\t\tif (psCache->nPlanarConfig == PLANARCONFIG_SEPARATE)\n\t\t{\n\t\t\tint iSample;\n\n\t\t\tfor( iSample = 0; iSample < psCache->nSamples; iSample++ )\n\t\t\t{\n\t\t\t\tpabyData = TIFFGetOvrBlock( psCache, iTileX, iTileY, iSample );\n\n\t\t\t\tif( psCache->bTiled )\n\t\t\t\t{\n\t\t\t\t\tnTileID = TIFFComputeTile( psCache->hTIFF,\n\t\t\t\t\t    iTileX * psCache->nBlockXSize,\n\t\t\t\t\t    iTileY * psCache->nBlockYSize,\n\t\t\t\t\t    0, (tsample_t) iSample );\n\t\t\t\t\tTIFFWriteEncodedTile( psCache->hTIFF, nTileID,\n\t\t\t\t\t    pabyData,\n\t\t\t\t\t    TIFFTileSize(psCache->hTIFF) );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnTileID = TIFFComputeStrip( psCache->hTIFF,\n\t\t\t\t\t    iTileY * psCache->nBlockYSize,\n\t\t\t\t\t    (tsample_t) iSample );\n\t\t\t\t\tRowsInStrip=psCache->nBlockYSize;\n\t\t\t\t\tif ((iTileY+1)*psCache->nBlockYSize>psCache->nYSize)\n\t\t\t\t\t\tRowsInStrip=psCache->nYSize-iTileY*psCache->nBlockYSize;\n\t\t\t\t\tTIFFWriteEncodedStrip( psCache->hTIFF, nTileID,\n\t\t\t\t\t    pabyData,\n\t\t\t\t\t    TIFFVStripSize(psCache->hTIFF,RowsInStrip) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpabyData = TIFFGetOvrBlock( psCache, iTileX, iTileY, 0 );\n\n\t\t\tif( psCache->bTiled )\n\t\t\t{\n\t\t\t\tnTileID = TIFFComputeTile( psCache->hTIFF,\n\t\t\t\t    iTileX * psCache->nBlockXSize,\n\t\t\t\t    iTileY * psCache->nBlockYSize,\n\t\t\t\t    0, 0 );\n\t\t\t\tTIFFWriteEncodedTile( psCache->hTIFF, nTileID,\n\t\t\t\t    pabyData,\n\t\t\t\t    TIFFTileSize(psCache->hTIFF) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnTileID = TIFFComputeStrip( psCache->hTIFF,\n\t\t\t\t    iTileY * psCache->nBlockYSize,\n\t\t\t\t    0 );\n\t\t\t\tRowsInStrip=psCache->nBlockYSize;\n\t\t\t\tif ((iTileY+1)*psCache->nBlockYSize>psCache->nYSize)\n\t\t\t\t\tRowsInStrip=psCache->nYSize-iTileY*psCache->nBlockYSize;\n\t\t\t\tTIFFWriteEncodedStrip( psCache->hTIFF, nTileID,\n\t\t\t\t    pabyData,\n\t\t\t\t    TIFFVStripSize(psCache->hTIFF,RowsInStrip) );\n\t\t\t}\n\t\t}\n\t}\n\t/* TODO: add checks on error status return of TIFFWriteEncodedTile and TIFFWriteEncodedStrip */\n\n/* -------------------------------------------------------------------- */\n/*      Rotate buffers.                                                 */\n/* -------------------------------------------------------------------- */\n    pabyData = psCache->pabyRow1Blocks;\n    psCache->pabyRow1Blocks = psCache->pabyRow2Blocks;\n    psCache->pabyRow2Blocks = pabyData;\n\n    _TIFFmemset( pabyData, 0, psCache->nBytesPerRow );\n\n    psCache->nBlockOffset++;\n\n/* -------------------------------------------------------------------- */\n/*      Restore access to original directory.                           */\n/* -------------------------------------------------------------------- */\n    TIFFFlush( psCache->hTIFF );\n    /* TODO: add checks on error status return of TIFFFlush */\n    TIFFSetSubDirectory( psCache->hTIFF, nBaseDirOffset );\n    /* TODO: add checks on error status return of TIFFSetSubDirectory */\n}\n\n/************************************************************************/\n/*                          TIFFGetOvrBlock()                           */\n/************************************************************************/\n\n/* TODO: make TIFF_Downsample handle iSample offset, so that we can\n * do with a single TIFFGetOvrBlock and no longer need TIFFGetOvrBlock_Subsampled */\nunsigned char *TIFFGetOvrBlock( TIFFOvrCache *psCache, int iTileX, int iTileY,\n                                int iSample )\n\n{\n    int\t\tnRowOffset;\n\n    if( iTileY > psCache->nBlockOffset + 1 )\n        TIFFWriteOvrRow( psCache );\n\n    assert( iTileX >= 0 && iTileX < psCache->nBlocksPerRow );\n"
}