{
    "Project": "combine",
    "Tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/read_files.c",
    "message": "The value read from next_record_pos was never initialized.",
    "warning_function_name": "df_get_next_record",
    "warning_line": "if (next_record_pos == 0)",
    "warning_context": "  int return_code;\n  STRINGTYPE *return_string;\n\n  buffer_desc.string = *buffer + *bufferpos;\n  buffer_desc.length = *buffersiz - *bufferpos;\n\n  need_more_data = 0;\n\n  if (*buffersiz == 0)\n    need_more_data = 1;\n  else if (record_length != 0) {\n    if (*buffersiz - *bufferpos < record_length)\n      need_more_data = 1;\n    }\n  else {\n    next_record_pos = dstrstr (&buffer_desc, record_delimiter);\n    if (next_record_pos == 0)\n      need_more_data = 1;\n    }\n\n  while (need_more_data && !feof (stream)) {\n    if (*bufferpos == 0) {\n      /* The buffer is already full without a record end.  We need to\n       * expand the buffer. (This is normal on the first read.)\n       */\n      if (*buffer == NULL)\n\t*buffer = malloc (DF_BUFFER_INCREMENT);\n      else\n\t*buffer = realloc (*buffer, *buffersiz + DF_BUFFER_INCREMENT);\n      if (*buffer == NULL)\n\tFATAL_ERROR (_(\"unable to allocate memory\"));\n\n      return_code\n\t= fread (*buffer + *buffersiz, 1, DF_BUFFER_INCREMENT, stream);\n      if (return_code < DF_BUFFER_INCREMENT && ferror (stream))\n\tFATAL_PERROR (_(\"File\"));\n\n      *buffersiz += return_code;\n      }\n    else {\n      /* We need to get more data, but the current buffer size may be OK. */\n      memmove (*buffer, *buffer + *bufferpos, *buffersiz - *bufferpos);\n\n      *bufferpos = *buffersiz - *bufferpos;\n\n      return_code\n\t= fread (*buffer + *bufferpos, 1, *buffersiz - *bufferpos, stream);\n      if (return_code < *buffersiz - *bufferpos && ferror (stream))\n\tFATAL_PERROR (_(\"File\"));\n      if (return_code < *buffersiz - *bufferpos)\n\t*buffersiz = *bufferpos + return_code;\n\n      *bufferpos = 0;\n      }\n\n    buffer_desc.string = *buffer + *bufferpos;\n    buffer_desc.length = *buffersiz - *bufferpos;\n\n    need_more_data = 0;\n\n    if (record_length != 0) {\n      if (*buffersiz - *bufferpos < record_length)\n\tneed_more_data = 1;\n      }\n    else {\n      next_record_pos = dstrstr (&buffer_desc, record_delimiter);\n      if (next_record_pos == 0)\n\tneed_more_data = 1;\n      }\n    }\n\n  if (*bufferpos < *buffersiz) {\n    if (record_length != 0) {\n      return_string\n\t= dstrsubstr (&buffer_desc, 1, 0,\n\t\t      MIN (record_length, buffer_desc.length), DStr_not_own);\n      *bufferpos += return_string->length;\n      }\n    else {\n      if (next_record_pos == 0)\n\tnext_record_pos = buffer_desc.length + 1;\n      return_string\n\t= dstrsubstr (&buffer_desc, 1, next_record_pos - 1, 0, DStr_not_own);\n      *bufferpos = *bufferpos + next_record_pos - 1 + record_delimiter->length;\n      }\n    if (return_string == NULL) {\n      FATAL_ERROR (_(\"unable to allocate memory\"));\n      }\n    return return_string;\n    }\n\n  return NULL;\n  }\n"
}