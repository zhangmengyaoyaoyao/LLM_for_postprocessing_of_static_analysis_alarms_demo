{
    "Project": "RIOT",
    "Tool": "Infer",
    "Bug Type": "Null Dereference",
    "Message": "pointer `netif` last assigned on line 277 could be null and is dereferenced at line 283, column 31.",
    "Code_line": "        case GNRC_IPV6_NIB_NC_INFO_NUD_STATE_UNMANAGED:",
    "Code_function": "void _probe_nbr(_nib_onl_entry_t *nbr, bool reset)\n{\n    const uint16_t state = _get_nud_state(nbr);\n\n    DEBUG(\"nib: Probing \");\n    switch (state) {\n        case GNRC_IPV6_NIB_NC_INFO_NUD_STATE_UNMANAGED:\n            DEBUG(\"UNMANAGED entry %s => skipping\\n\",\n                  ipv6_addr_to_str(addr_str, &nbr->ipv6, sizeof(addr_str)));\n            break;\n        case GNRC_IPV6_NIB_NC_INFO_NUD_STATE_INCOMPLETE:\n        case GNRC_IPV6_NIB_NC_INFO_NUD_STATE_UNREACHABLE: {\n                gnrc_netif_t *netif = gnrc_netif_get_by_pid(_nib_onl_get_if(nbr));\n                uint32_t next_ns = _evtimer_lookup(nbr,\n                                                   GNRC_IPV6_NIB_SND_MC_NS);\n\n                assert(netif != NULL);\n                gnrc_netif_acquire(netif);\n                if (next_ns > netif->ipv6.retrans_time) {\n                    ipv6_addr_t sol_nodes;\n                    uint32_t retrans_time = netif->ipv6.retrans_time;\n\n                    DEBUG(\"multicast to %s's solicited nodes \",\n                          ipv6_addr_to_str(addr_str, &nbr->ipv6,\n                                           sizeof(addr_str)));\n                    if (reset) {\n                        nbr->ns_sent = 0;\n                    }\n                    if (state == GNRC_IPV6_NIB_NC_INFO_NUD_STATE_UNREACHABLE) {\n                        /* first 3 retransmissions in PROBE, assume 1 higher to\n                         * not send after netif->ipv6.retrans_timer sec again,\n                         * but the next backoff after that => subtract 2 */\n                        retrans_time = _exp_backoff_retrans_timer(nbr->ns_sent - 2,\n                                                                  retrans_time);\n                    }\n                    DEBUG(\"(retrans. timer = %ums)\\n\", (unsigned)retrans_time);\n                    ipv6_addr_set_solicited_nodes(&sol_nodes, &nbr->ipv6);\n                    _snd_ns(&nbr->ipv6, netif, NULL, &sol_nodes);\n                    _evtimer_add(nbr, GNRC_IPV6_NIB_SND_MC_NS, &nbr->nud_timeout,\n                                 retrans_time);\n                    if (nbr->ns_sent < (NDP_MAX_NS_NUMOF + 2)) {\n                        /* cap ns_sent at NDP_MAX_NS_NUMOF to prevent backoff\n                         * overflow */\n                        nbr->ns_sent++;\n                    }\n                }\n#if ENABLE_DEBUG\n                else {\n                    DEBUG(\"multicast to %s's solicited nodes (skipping since there is already \"\n                          \"a multicast NS within %ums)\\n\",\n                          ipv6_addr_to_str(addr_str, &nbr->ipv6,\n                                           sizeof(addr_str)),\n                          (unsigned)netif->ipv6.retrans_time);\n                }\n#endif  /* ENABLE_DEBUG */\n                gnrc_netif_release(netif);\n            }\n            break;\n        case GNRC_IPV6_NIB_NC_INFO_NUD_STATE_PROBE:\n        default:\n            _snd_uc_ns(nbr, reset);\n            break;\n    }\n}"
}