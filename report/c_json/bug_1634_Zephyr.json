{
    "project": "Zephyr",
    "tool": "Cppcheck",
    "category": "Null Pointer Dereference",
    "file": "subsys/bluetooth/controller/ll_sw/ull_conn.c",
    "message": "Either the condition 'rx' is redundant or there is possible null pointer dereference: rx.",
    "warning_function_name": "event_phy_upd_ind_prep",
    "warning_line": "conn->llcp_rx = rx->hdr.link->mem;",
    "warning_context": "\t\t\trx = ll_pdu_rx_alloc();\n\t\t\trx->hdr.link->mem = conn->llcp_rx;\n\t\t\tconn->llcp_rx = rx;\n#endif /* CONFIG_BT_CTLR_DATA_LENGTH */\n\t\t}\n\n\t\t/* place the phy update ind packet as next in\n\t\t * tx queue\n\t\t */\n\t\tpdu_ctrl_tx = (void *)tx->pdu;\n\t\tpdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;\n\t\tpdu_ctrl_tx->len =\n\t\t\toffsetof(struct pdu_data_llctrl, phy_upd_ind) +\n\t\t\tsizeof(struct pdu_data_llctrl_phy_upd_ind);\n\t\tpdu_ctrl_tx->llctrl.opcode =\n\t\t\tPDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;\n\t\tind = &pdu_ctrl_tx->llctrl.phy_upd_ind;\n\t\tind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;\n\t\tind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;\n\t\tind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);\n\n\t\tctrl_tx_enqueue(conn, tx);\n\t} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &\n\t\t    0xFFFF) <= 0x7FFF) {\n\t\tstruct lll_conn *lll = &conn->lll;\n\t\tstruct node_rx_pdu *rx;\n\t\tu8_t old_tx, old_rx;\n\n\t\t/* procedure request acked */\n\t\tconn->llcp_ack = conn->llcp_req;\n\n\t\t/* apply new phy */\n\t\told_tx = lll->phy_tx;\n\t\told_rx = lll->phy_rx;\n\n#if defined(CONFIG_BT_CTLR_DATA_LENGTH)\n\t\tu16_t eff_tx_time = lll->max_tx_time;\n\t\tu16_t eff_rx_time = lll->max_rx_time;\n#endif /* CONFIG_BT_CTLR_DATA_LENGTH */\n\n\t\tif (conn->llcp.phy_upd_ind.tx) {\n\t\t\tlll->phy_tx = conn->llcp.phy_upd_ind.tx;\n\n#if defined(CONFIG_BT_CTLR_DATA_LENGTH)\n\t\t\teff_tx_time = calc_eff_time(lll->max_tx_octets,\n\t\t\t\t\t\t    lll->phy_tx,\n\t\t\t\t\t\t    conn->default_tx_time);\n#endif /* CONFIG_BT_CTLR_DATA_LENGTH */\n\t\t}\n\t\tif (conn->llcp.phy_upd_ind.rx) {\n\t\t\tlll->phy_rx = conn->llcp.phy_upd_ind.rx;\n\n#if defined(CONFIG_BT_CTLR_DATA_LENGTH)\n\t\t\teff_rx_time =\n\t\t\t\tcalc_eff_time(lll->max_rx_octets, lll->phy_rx,\n\t\t\t\t\t      PKT_US(LL_LENGTH_OCTETS_RX_MAX,\n\t\t\t\t\t\t     BIT(2)));\n#endif /* CONFIG_BT_CTLR_DATA_LENGTH */\n\t\t}\n\t\tlll->phy_flags = conn->phy_pref_flags;\n\n\t\t/* Acquire Rx node */\n\t\trx = conn->llcp_rx;\n\t\tLL_ASSERT(rx && rx->hdr.link);\n\t\tconn->llcp_rx = rx->hdr.link->mem;\n\n\t\t/* generate event if phy changed or initiated by cmd */\n\t\tif (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&\n\t\t    (lll->phy_rx == old_rx)) {\n\t\t\t/* Mark for buffer for release */\n\t\t\trx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;\n\n\t\t\t/* enqueue rx node towards Thread */\n\t\t\tll_rx_put(rx->hdr.link, rx);\n\n\t\t\tif (IS_ENABLED(CONFIG_BT_CTLR_DATA_LENGTH)) {\n\t\t\t\t/* get the DLE rx node reserved for ULL->LL */\n\t\t\t\trx = conn->llcp_rx;\n\t\t\t\tLL_ASSERT(rx && rx->hdr.link);\n\t\t\t\tconn->llcp_rx = rx->hdr.link->mem;\n\n\t\t\t\t/* Mark for buffer for release */\n\t\t\t\trx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;\n\n\t\t\t\t/* enqueue rx node towards Thread */\n\t\t\t\tll_rx_put(rx->hdr.link, rx);\n\t\t\t}\n\n\t\t\tll_rx_sched();\n\n\t\t\treturn;\n\t\t}\n\n\t\trx->hdr.handle = lll->handle;\n\t\trx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;\n\n\t\tupd = (void *)rx->pdu;\n\t\tupd->status = 0U;\n\t\tupd->tx = lll->phy_tx;\n\t\tupd->rx = lll->phy_rx;\n\n"
}