{
    "Project": "gawk",
    "Tool": "CSA",
    "category": "unix.Malloc",
    "file": "getopt.c",
    "message": "Potential leak of memory pointed to by 'ambig_list'",
    "warning_function_name": "_getopt_internal_r",
    "warning_line": "d->__nextchar += strlen (d->__nextchar);",
    "warning_context": "\t      }\n\t    else if (long_only\n\t\t     || pfound->has_arg != p->has_arg\n\t\t     || pfound->flag != p->flag\n\t\t     || pfound->val != p->val)\n\t      {\n\t\t/* Second or later nonexact match found.  */\n\t\tstruct option_list *newp = malloc (sizeof (*newp));\n\t\tnewp->p = p;\n\t\tnewp->needs_free = 1;\n\t\tnewp->next = ambig_list;\n\t\tambig_list = newp;\n\t      }\n\t  }\n\n      if (ambig_list != NULL && !exact)\n\t{\n\t  if (print_errors)\n\t    {\n\t      struct option_list first;\n\t      first.p = pfound;\n\t      first.next = ambig_list;\n\t      first.needs_free = 0;\n\t      ambig_list = &first;\n\n#if defined _LIBC\n\t      char *buf = NULL;\n\t      size_t buflen = 0;\n\n\t      FILE *fp = open_memstream (&buf, &buflen);\n\t      if (fp != NULL)\n\t\t{\n\t\t  fprintf (fp,\n\t\t\t   _(\"%s: option '%s' is ambiguous; possibilities:\"),\n\t\t\t   argv[0], argv[d->optind]);\n\n\t\t  do\n\t\t    {\n\t\t      fprintf (fp, \" '--%s'\", ambig_list->p->name);\n\t\t      ambig_list = ambig_list->next;\n\t\t    }\n\t\t  while (ambig_list != NULL);\n\n\t\t  fputc_unlocked ('\\n', fp);\n\n\t\t  if (__glibc_likely (fclose (fp) != EOF))\n\t\t    {\n\t\t      _IO_flockfile (stderr);\n\n\t\t      int old_flags2 = ((_IO_FILE *) stderr)->_flags2;\n\t\t      ((_IO_FILE *) stderr)->_flags2 |= _IO_FLAGS2_NOTCANCEL;\n\n\t\t      __fxprintf (NULL, \"%s\", buf);\n\n\t\t      ((_IO_FILE *) stderr)->_flags2 = old_flags2;\n\t\t      _IO_funlockfile (stderr);\n\n\t\t      free (buf);\n\t\t    }\n\t\t}\n#else\n\t      fprintf (stderr,\n\t\t       _(\"%s: option '%s' is ambiguous; possibilities:\"),\n\t\t       argv[0], argv[d->optind]);\n\t      do\n\t\t{\n\t\t  struct option_list *tmp_next;\n\n\t\t  fprintf (stderr, \" '--%s'\", ambig_list->p->name);\n\t\t  tmp_next = ambig_list->next;\n\t\t  if (ambig_list->needs_free)\n\t\t    free(ambig_list);\n\t\t  ambig_list = tmp_next;\n\t\t}\n\t      while (ambig_list != NULL);\n\n\t      fputc ('\\n', stderr);\n#endif\n\t    }\n\t  d->__nextchar += strlen (d->__nextchar);\n\t  d->optind++;\n\t  d->optopt = 0;\n\t  return '?';\n\t}\n\n      if (pfound != NULL)\n\t{\n\t  option_index = indfound;\n\t  d->optind++;\n\t  if (*nameend)\n\t    {\n\t      /* Don't test has_arg with >, because some C compilers don't\n\t\t allow it to be used on enums.  */\n\t      if (pfound->has_arg)\n\t\td->optarg = nameend + 1;\n\t      else\n\t\t{\n\t\t  if (print_errors)\n\t\t    {\n#if defined _LIBC\n\t\t      char *buf;\n"
}