{
    "Project": "bash",
    "Tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "expr.c",
    "message": "The value read from op was never initialized.",
    "warning_function_name": "expassign",
    "warning_line": "case DIV:",
    "warning_context": "static intmax_t\nexpassign ()\n{\n  register intmax_t value;\n  char *lhs, *rhs;\n  arrayind_t lind;\n#if defined (HAVE_IMAXDIV)\n  imaxdiv_t idiv;\n#endif\n\n  value = expcond ();\n  if (curtok == EQ || curtok == OP_ASSIGN)\n    {\n      int special, op;\n      intmax_t lvalue;\n\n      special = curtok == OP_ASSIGN;\n\n      if (lasttok != STR)\n\tevalerror (_(\"attempted assignment to non-variable\"));\n\n      if (special)\n\t{\n\t  op = assigntok;\t\t/* a OP= b */\n\t  lvalue = value;\n\t}\n\n      /* XXX - watch out for pointer aliasing issues here */\n      lhs = savestring (tokstr);\n      /* save ind in case rhs is string var and evaluation overwrites it */\n      lind = curlval.ind;\n      readtok ();\n      value = expassign ();\n\n      if (special)\n\t{\n\t  if ((op == DIV || op == MOD) && value == 0)\n\t    {\n\t      if (noeval == 0)\n\t\tevalerror (_(\"division by 0\"));\n\t      else\n\t        value = 1;\n\t    }\n\n\t  switch (op)\n\t    {\n\t    case MUL:\n\t      lvalue *= value;\n\t      break;\n\t    case DIV:\n\t    case MOD:\n\t      if (lvalue == INTMAX_MIN && value == -1)\n\t\tlvalue = (op == DIV) ? INTMAX_MIN : 0;\n\t      else\n#if HAVE_IMAXDIV\n\t\t{\n\t\t  idiv = imaxdiv (lvalue, value);\n\t\t  lvalue = (op == DIV) ? idiv.quot : idiv.rem;\n\t\t}\n#else\n\t        lvalue = (op == DIV) ? lvalue / value : lvalue % value;\n#endif\n\t      break;\n\t    case PLUS:\n\t      lvalue += value;\n\t      break;\n\t    case MINUS:\n\t      lvalue -= value;\n\t      break;\n\t    case LSH:\n\t      lvalue <<= value;\n\t      break;\n\t    case RSH:\n\t      lvalue >>= value;\n\t      break;\n\t    case BAND:\n\t      lvalue &= value;\n\t      break;\n\t    case BOR:\n\t      lvalue |= value;\n\t      break;\n\t    case BXOR:\n\t      lvalue ^= value;\n\t      break;\n\t    default:\n\t      free (lhs);\n\t      evalerror (_(\"bug: bad expassign token\"));\n\t      break;\n\t    }\n\t  value = lvalue;\n\t}\n\n      rhs = itos (value);\n      if (noeval == 0)\n\t{\n#if defined (ARRAY_VARS)\n\t  if (lind != -1)\n\t    expr_bind_array_element (lhs, lind, rhs);\n\t  else\n#endif\n\t    expr_bind_variable (lhs, rhs);\n"
}