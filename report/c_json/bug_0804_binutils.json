{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "binutils/readelf.c",
    "message": "The value read from abi[_] was never initialized.",
    "warning_function_name": "get_machine_flags",
    "warning_line": "abi[6] += e_flags & EF_PPC64_ABI;",
    "warning_context": "\t    strcat (buf, \", fido_a\");\n\t  else\n\t    {\n\t      char const * isa = _(\"unknown\");\n\t      char const * mac = _(\"unknown mac\");\n\t      char const * additional = NULL;\n\n\t      switch (e_flags & EF_M68K_CF_ISA_MASK)\n\t\t{\n\t\tcase EF_M68K_CF_ISA_A_NODIV:\n\t\t  isa = \"A\";\n\t\t  additional = \", nodiv\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_A:\n\t\t  isa = \"A\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_A_PLUS:\n\t\t  isa = \"A+\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_B_NOUSP:\n\t\t  isa = \"B\";\n\t\t  additional = \", nousp\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_B:\n\t\t  isa = \"B\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_C:\n\t\t  isa = \"C\";\n\t\t  break;\n\t\tcase EF_M68K_CF_ISA_C_NODIV:\n\t\t  isa = \"C\";\n\t\t  additional = \", nodiv\";\n\t\t  break;\n\t\t}\n\t      strcat (buf, \", cf, isa \");\n\t      strcat (buf, isa);\n\t      if (additional)\n\t\tstrcat (buf, additional);\n\t      if (e_flags & EF_M68K_CF_FLOAT)\n\t\tstrcat (buf, \", float\");\n\t      switch (e_flags & EF_M68K_CF_MAC_MASK)\n\t\t{\n\t\tcase 0:\n\t\t  mac = NULL;\n\t\t  break;\n\t\tcase EF_M68K_CF_MAC:\n\t\t  mac = \"mac\";\n\t\t  break;\n\t\tcase EF_M68K_CF_EMAC:\n\t\t  mac = \"emac\";\n\t\t  break;\n\t\tcase EF_M68K_CF_EMAC_B:\n\t\t  mac = \"emac_b\";\n\t\t  break;\n\t\t}\n\t      if (mac)\n\t\t{\n\t\t  strcat (buf, \", \");\n\t\t  strcat (buf, mac);\n\t\t}\n\t    }\n\t  break;\n\n\tcase EM_PPC:\n\t  if (e_flags & EF_PPC_EMB)\n\t    strcat (buf, \", emb\");\n\n\t  if (e_flags & EF_PPC_RELOCATABLE)\n\t    strcat (buf, _(\", relocatable\"));\n\n\t  if (e_flags & EF_PPC_RELOCATABLE_LIB)\n\t    strcat (buf, _(\", relocatable-lib\"));\n\t  break;\n\n\tcase EM_PPC64:\n\t  if (e_flags & EF_PPC64_ABI)\n\t    {\n\t      char abi[] = \", abiv0\";\n\n\t      abi[6] += e_flags & EF_PPC64_ABI;\n\t      strcat (buf, abi);\n\t    }\n\t  break;\n\n\tcase EM_V800:\n\t  if ((e_flags & EF_RH850_ABI) == EF_RH850_ABI)\n\t    strcat (buf, \", RH850 ABI\");\n\n\t  if (e_flags & EF_V800_850E3)\n\t    strcat (buf, \", V3 architecture\");\n\n\t  if ((e_flags & (EF_RH850_FPU_DOUBLE | EF_RH850_FPU_SINGLE)) == 0)\n\t    strcat (buf, \", FPU not used\");\n\n\t  if ((e_flags & (EF_RH850_REGMODE22 | EF_RH850_REGMODE32)) == 0)\n\t    strcat (buf, \", regmode: COMMON\");\n\n\t  if ((e_flags & (EF_RH850_GP_FIX | EF_RH850_GP_NOFIX)) == 0)\n\t    strcat (buf, \", r4 not used\");\n\n\t  if ((e_flags & (EF_RH850_EP_FIX | EF_RH850_EP_NOFIX)) == 0)\n"
}