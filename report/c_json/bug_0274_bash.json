{
    "project": "bash",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "subst.c",
    "message": "The value read from state_bak.__count was never initialized.",
    "warning_function_name": "extract_delimited_string",
    "warning_line": "ADVANCE_CHAR (string, slen, i);",
    "warning_context": "static char *\nextract_delimited_string (string, sindex, opener, alt_opener, closer, flags)\n     char *string;\n     int *sindex;\n     char *opener, *alt_opener, *closer;\n     int flags;\n{\n  int i, c, si;\n  size_t slen;\n  char *t, *result;\n  int pass_character, nesting_level, in_comment;\n  int len_closer, len_opener, len_alt_opener;\n  DECLARE_MBSTATE;\n\n  slen = strlen (string + *sindex) + *sindex;\n  len_opener = STRLEN (opener);\n  len_alt_opener = STRLEN (alt_opener);\n  len_closer = STRLEN (closer);\n\n  pass_character = in_comment = 0;\n\n  nesting_level = 1;\n  i = *sindex;\n\n  while (nesting_level)\n    {\n      c = string[i];\n\n      if (c == 0)\n\tbreak;\n\n      if (in_comment)\n\t{\n\t  if (c == '\\n')\n\t    in_comment = 0;\n\t  ADVANCE_CHAR (string, slen, i);\n\t  continue;\n\t}\n\n      if (pass_character)\t/* previous char was backslash */\n\t{\n\t  pass_character = 0;\n\t  ADVANCE_CHAR (string, slen, i);\n\t  continue;\n\t}\n\n      /* Not exactly right yet; should handle shell metacharacters and\n\t multibyte characters, too.  See COMMENT_BEGIN define in parse.y */\n      if ((flags & SX_COMMAND) && c == '#' && (i == 0 || string[i - 1] == '\\n' || shellblank (string[i - 1])))\n\t{\n          in_comment = 1;\n          ADVANCE_CHAR (string, slen, i);\n          continue;\n\t}\n        \n      if (c == CTLESC || c == '\\\\')\n\t{\n\t  pass_character++;\n\t  i++;\n\t  continue;\n\t}\n\n      /* Process a nested command substitution, but only if we're parsing an\n\t arithmetic substitution. */\n      if ((flags & SX_COMMAND) && string[i] == '$' && string[i+1] == LPAREN)\n        {\n          si = i + 2;\n          t = extract_command_subst (string, &si, flags|SX_NOALLOC);\n          i = si + 1;\n          continue;\n        }\n\n      /* Process a nested OPENER. */\n      if (STREQN (string + i, opener, len_opener))\n\t{\n\t  si = i + len_opener;\n\t  t = extract_delimited_string (string, &si, opener, alt_opener, closer, flags|SX_NOALLOC);\n\t  i = si + 1;\n\t  continue;\n\t}\n\n      /* Process a nested ALT_OPENER */\n      if (len_alt_opener && STREQN (string + i, alt_opener, len_alt_opener))\n\t{\n\t  si = i + len_alt_opener;\n\t  t = extract_delimited_string (string, &si, alt_opener, alt_opener, closer, flags|SX_NOALLOC);\n\t  i = si + 1;\n\t  continue;\n\t}\n\n      /* If the current substring terminates the delimited string, decrement\n\t the nesting level. */\n      if (STREQN (string + i, closer, len_closer))\n\t{\n\t  i += len_closer - 1;\t/* move to last byte of the closer */\n\t  nesting_level--;\n\t  if (nesting_level == 0)\n\t    break;\n\t}\n\n      /* Pass old-style command substitution through verbatim. */\n"
}