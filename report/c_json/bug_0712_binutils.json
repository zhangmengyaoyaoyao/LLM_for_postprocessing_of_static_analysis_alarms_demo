{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "gas/macro.c",
    "message": "Offset added: [2, +oo] (‚áê [2, +oo] + [0, +oo]) Size: [1, +oo] by call to `macro_expand`.",
    "warning_function_name": "check_macro",
    "warning_line": "*error = macro_expand (0, &line_sb, macro, expand);",
    "warning_context": "int\ncheck_macro (const char *line, sb *expand,\n\t     const char **error, macro_entry **info)\n{\n  const char *s;\n  char *copy, *cls;\n  macro_entry *macro;\n  sb line_sb;\n\n  if (! is_name_beginner (*line)\n      && (! macro_mri || *line != '.'))\n    return 0;\n\n  s = line + 1;\n  while (is_part_of_name (*s))\n    ++s;\n  if (is_name_ender (*s))\n    ++s;\n\n  copy = (char *) alloca (s - line + 1);\n  memcpy (copy, line, s - line);\n  copy[s - line] = '\\0';\n  for (cls = copy; *cls != '\\0'; cls ++)\n    *cls = TOLOWER (*cls);\n\n  macro = (macro_entry *) hash_find (macro_hash, copy);\n\n  if (macro == NULL)\n    return 0;\n\n  /* Wrap the line up in an sb.  */\n  sb_new (&line_sb);\n  while (*s != '\\0' && *s != '\\n' && *s != '\\r')\n    sb_add_char (&line_sb, *s++);\n\n  sb_new (expand);\n  *error = macro_expand (0, &line_sb, macro, expand);\n\n  sb_kill (&line_sb);\n\n  /* Export the macro information if requested.  */\n  if (info)\n    *info = macro;\n\n  return 1;\n}\n"
}