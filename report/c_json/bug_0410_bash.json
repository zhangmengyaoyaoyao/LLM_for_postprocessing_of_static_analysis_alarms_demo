{
    "project": "bash",
    "tool": "CSA",
    "category": "unix.Malloc",
    "file": "subst.c",
    "message": "Potential leak of memory pointed to by 'oret'",
    "warning_function_name": "remove_pattern",
    "warning_line": "free (wparam);",
    "warning_context": "static char *\nremove_pattern (param, pattern, op)\n     char *param, *pattern;\n     int op;\n{\n  char *xret;\n\n  if (param == NULL)\n    return (param);\n  if (*param == '\\0' || pattern == NULL || *pattern == '\\0')\t/* minor optimization */\n    return (savestring (param));\n\n#if defined (HANDLE_MULTIBYTE)\n  if (MB_CUR_MAX > 1)\n    {\n      wchar_t *ret, *oret;\n      size_t n;\n      wchar_t *wparam, *wpattern;\n      mbstate_t ps;\n\n      n = xdupmbstowcs (&wpattern, NULL, pattern);\n      if (n == (size_t)-1)\n\t{\n\t  xret = remove_upattern (param, pattern, op);\n\t  return ((xret == param) ? savestring (param) : xret);\n\t}\n      n = xdupmbstowcs (&wparam, NULL, param);\n\n      if (n == (size_t)-1)\n\t{\n\t  free (wpattern);\n\t  xret = remove_upattern (param, pattern, op);\n\t  return ((xret == param) ? savestring (param) : xret);\n\t}\n      oret = ret = remove_wpattern (wparam, n, wpattern, op);\n      /* Don't bother to convert wparam back to multibyte string if nothing\n\t matched; just return copy of original string */\n      if (ret == wparam)\n        {\n          free (wparam);\n          free (wpattern);\n          return (savestring (param));\n        }\n\n      free (wparam);\n      free (wpattern);\n\n      n = strlen (param);\n      xret = (char *)xmalloc (n + 1);\n      memset (&ps, '\\0', sizeof (mbstate_t));\n      n = wcsrtombs (xret, (const wchar_t **)&ret, n, &ps);\n      xret[n] = '\\0';\t\t/* just to make sure */\n      free (oret);\n      return xret;      \n    }\n  else\n#endif\n    {\n      xret = remove_upattern (param, pattern, op);\n      return ((xret == param) ? savestring (param) : xret);\n    }\n}\n"
}