{
    "Project": "bash",
    "Tool": "Infer",
    "Bug Type": "UNINITIALIZED_VALUE",
    "Code_line": "\tfree (oldnames[--oidx]);",
    "Code_function": "_ignore_completion_names (names, name_func)\n     char **names;\n     sh_ignore_func_t *name_func;\n{\n  char **newnames;\n  int idx, nidx;\n  char **oldnames;\n  int oidx;\n\n  /* If there is only one completion, see if it is acceptable.  If it is\n     not, free it up.  In any case, short-circuit and return.  This is a\n     special case because names[0] is not the prefix of the list of names\n     if there is only one completion; it is the completion itself. */\n  if (names[1] == (char *)0)\n    {\n      if (force_fignore)\n\tif ((*name_func) (names[0]) == 0)\n\t  {\n\t    free (names[0]);\n\t    names[0] = (char *)NULL;\n\t  }\n\n      return;\n    }\n\n  /* Allocate space for array to hold list of pointers to matching\n     filenames.  The pointers are copied back to NAMES when done. */\n  for (nidx = 1; names[nidx]; nidx++)\n    ;\n  newnames = strvec_create (nidx + 1);\n\n  if (force_fignore == 0)\n    {\n      oldnames = strvec_create (nidx - 1);\n      oidx = 0;\n    }\n\n  newnames[0] = names[0];\n  for (idx = nidx = 1; names[idx]; idx++)\n    {\n      if ((*name_func) (names[idx]))\n\tnewnames[nidx++] = names[idx];\n      else if (force_fignore == 0)\n\toldnames[oidx++] = names[idx];\n      else\n\tfree (names[idx]);\n    }\n\n  newnames[nidx] = (char *)NULL;\n\n  /* If none are acceptable then let the completer handle it. */\n  if (nidx == 1)\n    {\n      if (force_fignore)\n\t{\n\t  free (names[0]);\n\t  names[0] = (char *)NULL;\n\t}\n      else\n\tfree (oldnames);\n\n      free (newnames);\n      return;\n    }\n\n  if (force_fignore == 0)\n    {\n      while (oidx)\n\tfree (oldnames[--oidx]);\n      free (oldnames);\n    }\n\n  /* If only one is acceptable, copy it to names[0] and return. */\n  if (nidx == 2)\n    {\n      free (names[0]);\n      names[0] = newnames[1];\n      names[1] = (char *)NULL;\n      free (newnames);\n      return;\n    }\n\n  /* Copy the acceptable names back to NAMES, set the new array end,\n     and return. */\n  for (nidx = 1; newnames[nidx]; nidx++)\n    names[nidx] = newnames[nidx];\n  names[nidx] = (char *)NULL;\n  free (newnames);\n}"
}