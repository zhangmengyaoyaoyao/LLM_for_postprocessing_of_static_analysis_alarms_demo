{
    "project": "grep",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L1",
    "file": "lib/fts.c",
    "message": "Offset: 2 Size: 1.",
    "warning_function_name": "fts_stat",
    "warning_line": "if (ISDOT(p->fts_name)) {",
    "warning_context": "static unsigned short int\ninternal_function\nfts_stat(FTS *sp, register FTSENT *p, bool follow)\n{\n        struct stat *sbp = p->fts_statp;\n        int saved_errno;\n\n        if (p->fts_level == FTS_ROOTLEVEL && ISSET(FTS_COMFOLLOW))\n                follow = true;\n\n        /*\n         * If doing a logical walk, or application requested FTS_FOLLOW, do\n         * a stat(2).  If that fails, check for a non-existent symlink.  If\n         * fail, set the errno from the stat call.\n         */\n        if (ISSET(FTS_LOGICAL) || follow) {\n                if (stat(p->fts_accpath, sbp)) {\n                        saved_errno = errno;\n                        if (errno == ENOENT\n                            && lstat(p->fts_accpath, sbp) == 0) {\n                                __set_errno (0);\n                                return (FTS_SLNONE);\n                        }\n                        p->fts_errno = saved_errno;\n                        goto err;\n                }\n        } else if (fstatat(sp->fts_cwd_fd, p->fts_accpath, sbp,\n                           AT_SYMLINK_NOFOLLOW)) {\n                p->fts_errno = errno;\nerr:            memset(sbp, 0, sizeof(struct stat));\n                return (FTS_NS);\n        }\n\n        if (S_ISDIR(sbp->st_mode)) {\n                p->fts_n_dirs_remaining = (sbp->st_nlink\n                                           - (ISSET(FTS_SEEDOT) ? 0 : 2));\n                if (ISDOT(p->fts_name)) {\n                        /* Command-line \".\" and \"..\" are real directories. */\n                        return (p->fts_level == FTS_ROOTLEVEL ? FTS_D : FTS_DOT);\n                }\n\n                return (FTS_D);\n        }\n        if (S_ISLNK(sbp->st_mode))\n                return (FTS_SL);\n        if (S_ISREG(sbp->st_mode))\n                return (FTS_F);\n        return (FTS_DEFAULT);\n}\n"
}