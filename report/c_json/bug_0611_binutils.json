{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/hash.c",
    "message": "Offset added: [0, 34359738351] (⇐ [0, 23] + [0, 34359738328]) Size: [528, 34359738358].",
    "warning_function_name": "bfd_hash_insert",
    "warning_line": "memset (newtable, 0, alloc);",
    "warning_context": "struct bfd_hash_entry *\nbfd_hash_insert (struct bfd_hash_table *table,\n\t\t const char *string,\n\t\t unsigned long hash)\n{\n  struct bfd_hash_entry *hashp;\n  unsigned int _index;\n\n  hashp = (*table->newfunc) (NULL, table, string);\n  if (hashp == NULL)\n    return NULL;\n  hashp->string = string;\n  hashp->hash = hash;\n  _index = hash % table->size;\n  hashp->next = table->table[_index];\n  table->table[_index] = hashp;\n  table->count++;\n\n  if (!table->frozen && table->count > table->size * 3 / 4)\n    {\n      unsigned long newsize = higher_prime_number (table->size);\n      struct bfd_hash_entry **newtable;\n      unsigned int hi;\n      unsigned long alloc = newsize * sizeof (struct bfd_hash_entry *);\n\n      /* If we can't find a higher prime, or we can't possibly alloc\n\t that much memory, don't try to grow the table.  */\n      if (newsize == 0 || alloc / sizeof (struct bfd_hash_entry *) != newsize)\n\t{\n\t  table->frozen = 1;\n\t  return hashp;\n\t}\n\n      newtable = ((struct bfd_hash_entry **)\n\t\t  objalloc_alloc ((struct objalloc *) table->memory, alloc));\n      if (newtable == NULL)\n\t{\n\t  table->frozen = 1;\n\t  return hashp;\n\t}\n      memset (newtable, 0, alloc);\n\n      for (hi = 0; hi < table->size; hi ++)\n\twhile (table->table[hi])\n\t  {\n\t    struct bfd_hash_entry *chain = table->table[hi];\n\t    struct bfd_hash_entry *chain_end = chain;\n\n\t    while (chain_end->next && chain_end->next->hash == chain->hash)\n\t      chain_end = chain_end->next;\n\n\t    table->table[hi] = chain_end->next;\n\t    _index = chain->hash % newsize;\n\t    chain_end->next = newtable[_index];\n\t    newtable[_index] = chain;\n\t  }\n      table->table = newtable;\n      table->size = newsize;\n    }\n\n  return hashp;\n}\n"
}