{
    "Project": "Zephyr",
    "Tool": "Cppcheck",
    "category": "Uninitialized Variable",
    "file": "subsys/net/lib/lwm2m/lwm2m_engine.c",
    "message": "Uninitialized variable: obj->obj_id",
    "warning_function_name": "lwm2m_get_rd_data",
    "warning_line": "if (obj->obj_id == LWM2M_OBJECT_SECURITY_ID) {",
    "warning_context": "u16_t lwm2m_get_rd_data(u8_t *client_data, u16_t size)\n{\n\tstruct lwm2m_engine_obj *obj;\n\tstruct lwm2m_engine_obj_inst *obj_inst;\n\tu8_t temp[32];\n\tu16_t pos = 0U;\n\tint len;\n\n\t/* Add resource-type/content-type to the registration message */\n\tmemcpy(client_data, REG_PREFACE, sizeof(REG_PREFACE) - 1);\n\tpos += sizeof(REG_PREFACE) - 1;\n\n\tSYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_list, obj, node) {\n\t\t/* Security obj MUST NOT be part of registration message */\n\t\tif (obj->obj_id == LWM2M_OBJECT_SECURITY_ID) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Only report <OBJ_ID> when no instance available */\n\t\tif (obj->instance_count == 0U) {\n\t\t\tlen = snprintk(temp, sizeof(temp), \"%s</%u>\",\n\t\t\t\t       (pos > 0) ? \",\" : \"\", obj->obj_id);\n\t\t\tif (pos + len >= size) {\n\t\t\t\t/* full buffer -- exit loop */\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tmemcpy(&client_data[pos], temp, len);\n\t\t\tpos += len;\n\t\t\tcontinue;\n\t\t}\n\n\t\tSYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list,\n\t\t\t\t\t     obj_inst, node) {\n\t\t\tif (obj_inst->obj->obj_id == obj->obj_id) {\n\t\t\t\tlen = snprintk(temp, sizeof(temp),\n\t\t\t\t\t       \"%s</%u/%u>\",\n\t\t\t\t\t       (pos > 0) ? \",\" : \"\",\n\t\t\t\t\t       obj_inst->obj->obj_id,\n\t\t\t\t\t       obj_inst->obj_inst_id);\n\t\t\t\t/*\n\t\t\t\t * TODO: iterate through resources once block\n\t\t\t\t * transfer is handled correctly\n\t\t\t\t */\n\t\t\t\tif (pos + len >= size) {\n\t\t\t\t\t/* full buffer -- exit loop */\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tmemcpy(&client_data[pos], temp, len);\n\t\t\t\tpos += len;\n\t\t\t}\n\t\t}\n\t}\n\n\tclient_data[pos] = '\\0';\n\treturn pos;\n}\n"
}