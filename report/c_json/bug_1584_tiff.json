{
    "Project": "tiff",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "tools/tiffcrop.c",
    "message": "Offset: [0, max(65, `out->tif_fieldinfo->field_bit`)] Size: 4 by call to `TIFFClose`.",
    "warning_function_name": "writeCroppedImage",
    "warning_line": "TIFFClose(out);",
    "warning_context": "\t    CopyField(TIFFTAG_GROUP3OPTIONS, g3opts);\n\t} else\n\t    CopyTag(TIFFTAG_GROUP4OPTIONS, 1, TIFF_LONG);\n\t    CopyTag(TIFFTAG_BADFAXLINES, 1, TIFF_LONG);\n\t    CopyTag(TIFFTAG_CLEANFAXDATA, 1, TIFF_LONG);\n\t    CopyTag(TIFFTAG_CONSECUTIVEBADFAXLINES, 1, TIFF_LONG);\n\t    CopyTag(TIFFTAG_FAXRECVPARAMS, 1, TIFF_LONG);\n\t    CopyTag(TIFFTAG_FAXRECVTIME, 1, TIFF_LONG);\n\t    CopyTag(TIFFTAG_FAXSUBADDRESS, 1, TIFF_ASCII);\n\t break;\n    case COMPRESSION_NONE:\n         break;\n    default: break;\n   }\n   { uint32 len32;\n     void** data;\n     if (TIFFGetField(in, TIFFTAG_ICCPROFILE, &len32, &data))\n       TIFFSetField(out, TIFFTAG_ICCPROFILE, len32, data);\n   }\n   { uint16 ninks;\n     const char* inknames;\n     if (TIFFGetField(in, TIFFTAG_NUMBEROFINKS, &ninks)) {\n       TIFFSetField(out, TIFFTAG_NUMBEROFINKS, ninks);\n       if (TIFFGetField(in, TIFFTAG_INKNAMES, &inknames)) {\n\t int inknameslen = strlen(inknames) + 1;\n\t const char* cp = inknames;\n\t while (ninks > 1) {\n\t   cp = strchr(cp, '\\0');\n\t   if (cp) {\n\t     cp++;\n\t     inknameslen += (strlen(cp) + 1);\n\t   }\n\t   ninks--;\n         }\n\t TIFFSetField(out, TIFFTAG_INKNAMES, inknameslen, inknames);\n       }\n     }\n   }\n   {\n   unsigned short pg0, pg1;\n   if (TIFFGetField(in, TIFFTAG_PAGENUMBER, &pg0, &pg1)) {\n     TIFFSetField(out, TIFFTAG_PAGENUMBER, pagenum, total_pages);\n     }\n   }\n\n  for (p = tags; p < &tags[NTAGS]; p++)\n\t\tCopyTag(p->tag, p->count, p->type);\n\n  /* Compute the tile or strip dimensions and write to disk */\n  if (outtiled)\n    {\n    if (config == PLANARCONFIG_CONTIG)\n      {\n      if (writeBufferToContigTiles (out, crop_buff, length, width, spp, dump))\n        TIFFError(\"\",\"Unable to write contiguous tile data for page %d\", pagenum);\n      }\n    else\n      {\n      if (writeBufferToSeparateTiles (out, crop_buff, length, width, spp, dump))\n        TIFFError(\"\",\"Unable to write separate tile data for page %d\", pagenum);\n      }\n    }\n  else\n    {\n    if (config == PLANARCONFIG_CONTIG)\n      {\n      if (writeBufferToContigStrips (out, crop_buff, length))\n        TIFFError(\"\",\"Unable to write contiguous strip data for page %d\", pagenum);\n      }\n    else\n      {\n      if (writeBufferToSeparateStrips(out, crop_buff, length, width, spp, dump))\n        TIFFError(\"\",\"Unable to write separate strip data for page %d\", pagenum);\n      }\n    }\n\n  if (!TIFFWriteDirectory(out))\n    {\n    TIFFError(\"\",\"Failed to write IFD for page number %d\", pagenum);\n    TIFFClose(out);\n    return (-1);\n    }\n\n  return (0);\n  } /* end writeCroppedImage */\n\nstatic int\nrotateContigSamples8bits(uint16 rotation, uint16 spp, uint16 bps, uint32 width, \n                         uint32 length,   uint32 col, uint8 *src, uint8 *dst)\n  {\n  int      ready_bits = 0;\n  uint32   src_byte = 0, src_bit = 0;\n  uint32   row, rowsize = 0, bit_offset = 0;\n  uint8    matchbits = 0, maskbits = 0;\n  uint8    buff1 = 0, buff2 = 0;\n  uint8   *next;\n  tsample_t sample;\n\n  if ((src == NULL) || (dst == NULL))\n    {\n    TIFFError(\"rotateContigSamples8bits\",\"Invalid src or destination buffer\");\n"
}