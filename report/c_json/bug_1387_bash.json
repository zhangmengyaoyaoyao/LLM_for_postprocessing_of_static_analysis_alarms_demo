{
    "Project": "bash",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L2",
    "Message": "Offset: [-oo, 9999] Size: 200.",
    "Code_line": "  *yyssp = yystate;",
    "Code_function": "yyparse ()\n\n#endif\n#endif\n{\n\n  int yystate;\n  int yyn;\n  int yyresult;\n  /* Number of tokens to shift before error messages enabled.  */\n  int yyerrstatus;\n  /* Look-ahead token as an internal (translated) token number.  */\n  int yytoken = 0;\n#if YYERROR_VERBOSE\n  /* Buffer for error messages, and its allocated size.  */\n  char yymsgbuf[128];\n  char *yymsg = yymsgbuf;\n  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;\n#endif\n\n  /* Three stacks and their tools:\n     `yyss': related to states,\n     `yyvs': related to semantic values,\n     `yyls': related to locations.\n\n     Refer to the stacks thru separate pointers, to allow yyoverflow\n     to reallocate them elsewhere.  */\n\n  /* The state stack.  */\n  yytype_int16 yyssa[YYINITDEPTH];\n  yytype_int16 *yyss = yyssa;\n  yytype_int16 *yyssp;\n\n  /* The semantic value stack.  */\n  YYSTYPE yyvsa[YYINITDEPTH];\n  YYSTYPE *yyvs = yyvsa;\n  YYSTYPE *yyvsp;\n\n\n\n#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))\n\n  YYSIZE_T yystacksize = YYINITDEPTH;\n\n  /* The variables used to return semantic value and location from the\n     action routines.  */\n  YYSTYPE yyval;\n\n\n  /* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */\n  int yylen = 0;\n\n  YYDPRINTF ((stderr, \"Starting parse\\n\"));\n\n  yystate = 0;\n  yyerrstatus = 0;\n  yynerrs = 0;\n  yychar = YYEMPTY;\t\t/* Cause a token to be read.  */\n\n  /* Initialize stack pointers.\n     Waste one element of value and location stack\n     so that they stay on the same level as the state stack.\n     The wasted elements are never initialized.  */\n\n  yyssp = yyss;\n  yyvsp = yyvs;\n\n  goto yysetstate;\n\n/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/\n yynewstate:\n  /* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */\n  yyssp++;\n\n yysetstate:\n  *yyssp = yystate;\n\n  if (yyss + yystacksize - 1 <= yyssp)\n    {\n      /* Get the current used size of the three stacks, in elements.  */\n      YYSIZE_T yysize = yyssp - yyss + 1;\n\n#ifdef yyoverflow\n      {\n\t/* Give user a chance to reallocate the stack.  Use copies of\n\t   these so that the &'s don't force the real ones into\n\t   memory.  */\n\tYYSTYPE *yyvs1 = yyvs;\n\tyytype_int16 *yyss1 = yyss;\n\n\n\t/* Each stack pointer address is followed by the size of the\n\t   data in use in that stack, in bytes.  This used to be a\n\t   conditional around just the two extra args, but that might\n\t   be undefined if yyoverflow is a macro.  */\n\tyyoverflow (YY_(\"memory exhausted\"),\n\t\t    &yyss1, yysize * sizeof (*yyssp),\n\t\t    &yyvs1, yysize * sizeof (*yyvsp),\n\n\t\t    &yystacksize);\n\n\tyyss = yyss1;\n\tyyvs = yyvs1;\n      }\n#else /* no yyoverflow */\n# ifndef YYSTACK_RELOCATE\n      goto yyexhaustedlab;\n# else\n      /* Extend the stack our own way.  */\n      if (YYMAXDEPTH <= yystacksize)\n\tgoto yyexhaustedlab;\n      yystacksize *= 2;\n      if (YYMAXDEPTH < yystacksize)\n\tyystacksize = YYMAXDEPTH;\n\n      {\n\tyytype_int16 *yyss1 = yyss;\n\tunion yyalloc *yyptr =\n\t  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));\n\tif (! yyptr)\n\t  goto yyexhaustedlab;\n\tYYSTACK_RELOCATE (yyss);\n\tYYSTACK_RELOCATE (yyvs);\n\n#  undef YYSTACK_RELOCATE\n\tif (yyss1 != yyssa)\n\t  YYSTACK_FREE (yyss1);\n      }\n# endif\n#endif /* no yyoverflow */\n\n      yyssp = yyss + yysize - 1;\n      yyvsp = yyvs + yysize - 1;\n\n\n      YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",\n\t\t  (unsigned long int) yystacksize));\n\n      if (yyss + yystacksize - 1 <= yyssp)\n\tYYABORT;\n    }\n\n  YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));\n\n  goto yybackup;\n\n/*-----------.\n| yybackup.  |\n`-----------*/\nyybackup:\n\n  /* Do appropriate processing given the current state.  Read a\n     look-ahead token if we need one and don't already have one.  */\n\n  /* First try to decide what to do without reference to look-ahead token.  */\n  yyn = yypact[yystate];\n  if (yyn == YYPACT_NINF)\n    goto yydefault;\n\n  /* Not known => get a look-ahead token if don't already have one.  */\n\n  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */\n  if (yychar == YYEMPTY)\n    {\n      YYDPRINTF ((stderr, \"Reading a token: \"));\n      yychar = YYLEX;\n    }\n\n  if (yychar <= YYEOF)\n    {\n      yychar = yytoken = YYEOF;\n      YYDPRINTF ((stderr, \"Now at end of input.\\n\"));\n    }\n  else\n    {\n      yytoken = YYTRANSLATE (yychar);\n      YY_SYMBOL_PRINT (\"Next token is\", yytoken, &yylval, &yylloc);\n    }\n\n  /* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */\n  yyn += yytoken;\n  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)\n    goto yydefault;\n  yyn = yytable[yyn];\n  if (yyn <= 0)\n    {\n      if (yyn == 0 || yyn == YYTABLE_NINF)\n\tgoto yyerrlab;\n      yyn = -yyn;\n      goto yyreduce;\n    }\n\n  if (yyn == YYFINAL)\n    YYACCEPT;\n\n  /* Count tokens shifted since error; after three, turn off error\n     status.  */\n  if (yyerrstatus)\n    yyerrstatus--;\n\n  /* Shift the look-ahead token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);\n\n  /* Discard the shifted token unless it is eof.  */\n  if (yychar != YYEOF)\n    yychar = YYEMPTY;\n\n  yystate = yyn;\n  *++yyvsp = yylval;\n\n  goto yynewstate;\n\n\n/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/\nyydefault:\n  yyn = yydefact[yystate];\n  if (yyn == 0)\n    goto yyerrlab;\n  goto yyreduce;\n\n\n/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/\nyyreduce:\n  /* yyn is the number of a rule to reduce with.  */\n  yylen = yyr2[yyn];\n\n  /* If YYLEN is nonzero, implement the default value of the action:\n     `$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */\n  yyval = yyvsp[1-yylen];\n\n\n  YY_REDUCE_PRINT (yyn);\n  switch (yyn)\n    {\n        case 2:\n#line 378 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  /* Case of regular command.  Discard the error\n\t\t\t     safety net,and return the command just parsed. */\n\t\t\t  global_command = (yyvsp[(1) - (2)].command);\n\t\t\t  eof_encountered = 0;\n\t\t\t  /* discard_parser_constructs (0); */\n\t\t\t  if (parser_state & PST_CMDSUBST)\n\t\t\t    parser_state |= PST_EOFTOKEN;\n\t\t\t  YYACCEPT;\n\t\t\t}\n    break;\n\n  case 3:\n#line 389 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  /* Case of regular command, but not a very\n\t\t\t     interesting one.  Return a NULL command. */\n\t\t\t  global_command = (COMMAND *)NULL;\n\t\t\t  if (parser_state & PST_CMDSUBST)\n\t\t\t    parser_state |= PST_EOFTOKEN;\n\t\t\t  YYACCEPT;\n\t\t\t}\n    break;\n\n  case 4:\n#line 398 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  /* Error during parsing.  Return NULL command. */\n\t\t\t  global_command = (COMMAND *)NULL;\n\t\t\t  eof_encountered = 0;\n\t\t\t  /* discard_parser_constructs (1); */\n\t\t\t  if (interactive && parse_and_execute_level == 0)\n\t\t\t    {\n\t\t\t      YYACCEPT;\n\t\t\t    }\n\t\t\t  else\n\t\t\t    {\n\t\t\t      YYABORT;\n\t\t\t    }\n\t\t\t}\n    break;\n\n  case 5:\n#line 413 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  /* Case of EOF seen by itself.  Do ignoreeof or\n\t\t\t     not. */\n\t\t\t  global_command = (COMMAND *)NULL;\n\t\t\t  handle_eof_input_unit ();\n\t\t\t  YYACCEPT;\n\t\t\t}\n    break;\n\n  case 6:\n#line 423 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.word_list) = make_word_list ((yyvsp[(1) - (1)].word), (WORD_LIST *)NULL); }\n    break;\n\n  case 7:\n#line 425 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.word_list) = make_word_list ((yyvsp[(2) - (2)].word), (yyvsp[(1) - (2)].word_list)); }\n    break;\n\n  case 8:\n#line 429 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_output_direction, redir, 0);\n\t\t\t}\n    break;\n\n  case 9:\n#line 435 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_input_direction, redir, 0);\n\t\t\t}\n    break;\n\n  case 10:\n#line 441 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_output_direction, redir, 0);\n\t\t\t}\n    break;\n\n  case 11:\n#line 447 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_input_direction, redir, 0);\n\t\t\t}\n    break;\n\n  case 12:\n#line 453 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_output_direction, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 13:\n#line 459 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_input_direction, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 14:\n#line 465 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_appending_to, redir, 0);\n\t\t\t}\n    break;\n\n  case 15:\n#line 471 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_appending_to, redir, 0);\n\t\t\t}\n    break;\n\n  case 16:\n#line 477 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_appending_to, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 17:\n#line 483 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_output_force, redir, 0);\n\t\t\t}\n    break;\n\n  case 18:\n#line 489 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_output_force, redir, 0);\n\t\t\t}\n    break;\n\n  case 19:\n#line 495 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_output_force, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 20:\n#line 501 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_input_output, redir, 0);\n\t\t\t}\n    break;\n\n  case 21:\n#line 507 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_input_output, redir, 0);\n\t\t\t}\n    break;\n\n  case 22:\n#line 513 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_input_output, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 23:\n#line 519 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_reading_until, redir, 0);\n\t\t\t  redir_stack[need_here_doc++] = (yyval.redirect);\n\t\t\t}\n    break;\n\n  case 24:\n#line 526 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_reading_until, redir, 0);\n\t\t\t  redir_stack[need_here_doc++] = (yyval.redirect);\n\t\t\t}\n    break;\n\n  case 25:\n#line 533 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_reading_until, redir, REDIR_VARASSIGN);\n\t\t\t  redir_stack[need_here_doc++] = (yyval.redirect);\n\t\t\t}\n    break;\n\n  case 26:\n#line 540 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_deblank_reading_until, redir, 0);\n\t\t\t  redir_stack[need_here_doc++] = (yyval.redirect);\n\t\t\t}\n    break;\n\n  case 27:\n#line 547 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_deblank_reading_until, redir, 0);\n\t\t\t  redir_stack[need_here_doc++] = (yyval.redirect);\n\t\t\t}\n    break;\n\n  case 28:\n#line 554 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_deblank_reading_until, redir, REDIR_VARASSIGN);\n\t\t\t  redir_stack[need_here_doc++] = (yyval.redirect);\n\t\t\t}\n    break;\n\n  case 29:\n#line 561 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_reading_string, redir, 0);\n\t\t\t}\n    break;\n\n  case 30:\n#line 567 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_reading_string, redir, 0);\n\t\t\t}\n    break;\n\n  case 31:\n#line 573 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_reading_string, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 32:\n#line 579 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 0;\n\t\t\t  redir.dest = (yyvsp[(2) - (2)].number);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_input, redir, 0);\n\t\t\t}\n    break;\n\n  case 33:\n#line 585 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.dest = (yyvsp[(3) - (3)].number);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_input, redir, 0);\n\t\t\t}\n    break;\n\n  case 34:\n#line 591 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.dest = (yyvsp[(3) - (3)].number);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_input, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 35:\n#line 597 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 1;\n\t\t\t  redir.dest = (yyvsp[(2) - (2)].number);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_output, redir, 0);\n\t\t\t}\n    break;\n\n  case 36:\n#line 603 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.dest = (yyvsp[(3) - (3)].number);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_output, redir, 0);\n\t\t\t}\n    break;\n\n  case 37:\n#line 609 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.dest = (yyvsp[(3) - (3)].number);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_output, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 38:\n#line 615 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_input_word, redir, 0);\n\t\t\t}\n    break;\n\n  case 39:\n#line 621 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_input_word, redir, 0);\n\t\t\t}\n    break;\n\n  case 40:\n#line 627 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_input_word, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 41:\n#line 633 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_output_word, redir, 0);\n\t\t\t}\n    break;\n\n  case 42:\n#line 639 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_output_word, redir, 0);\n\t\t\t}\n    break;\n\n  case 43:\n#line 645 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.filename = (yyvsp[(3) - (3)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_duplicating_output_word, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 44:\n#line 651 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 1;\n\t\t\t  redir.dest = 0;\n\t\t\t  (yyval.redirect) = make_redirection (source, r_close_this, redir, 0);\n\t\t\t}\n    break;\n\n  case 45:\n#line 657 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.dest = 0;\n\t\t\t  (yyval.redirect) = make_redirection (source, r_close_this, redir, 0);\n\t\t\t}\n    break;\n\n  case 46:\n#line 663 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.dest = 0;\n\t\t\t  (yyval.redirect) = make_redirection (source, r_close_this, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 47:\n#line 669 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 0;\n\t\t\t  redir.dest = 0;\n\t\t\t  (yyval.redirect) = make_redirection (source, r_close_this, redir, 0);\n\t\t\t}\n    break;\n\n  case 48:\n#line 675 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = (yyvsp[(1) - (3)].number);\n\t\t\t  redir.dest = 0;\n\t\t\t  (yyval.redirect) = make_redirection (source, r_close_this, redir, 0);\n\t\t\t}\n    break;\n\n  case 49:\n#line 681 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.filename = (yyvsp[(1) - (3)].word);\n\t\t\t  redir.dest = 0;\n\t\t\t  (yyval.redirect) = make_redirection (source, r_close_this, redir, REDIR_VARASSIGN);\n\t\t\t}\n    break;\n\n  case 50:\n#line 687 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_err_and_out, redir, 0);\n\t\t\t}\n    break;\n\n  case 51:\n#line 693 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = (yyvsp[(2) - (2)].word);\n\t\t\t  (yyval.redirect) = make_redirection (source, r_append_err_and_out, redir, 0);\n\t\t\t}\n    break;\n\n  case 52:\n#line 701 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.element).word = (yyvsp[(1) - (1)].word); (yyval.element).redirect = 0; }\n    break;\n\n  case 53:\n#line 703 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.element).word = (yyvsp[(1) - (1)].word); (yyval.element).redirect = 0; }\n    break;\n\n  case 54:\n#line 705 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.element).redirect = (yyvsp[(1) - (1)].redirect); (yyval.element).word = 0; }\n    break;\n\n  case 55:\n#line 709 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.redirect) = (yyvsp[(1) - (1)].redirect);\n\t\t\t}\n    break;\n\n  case 56:\n#line 713 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  register REDIRECT *t;\n\n\t\t\t  for (t = (yyvsp[(1) - (2)].redirect); t->next; t = t->next)\n\t\t\t    ;\n\t\t\t  t->next = (yyvsp[(2) - (2)].redirect);\n\t\t\t  (yyval.redirect) = (yyvsp[(1) - (2)].redirect);\n\t\t\t}\n    break;\n\n  case 57:\n#line 724 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = make_simple_command ((yyvsp[(1) - (1)].element), (COMMAND *)NULL); }\n    break;\n\n  case 58:\n#line 726 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = make_simple_command ((yyvsp[(2) - (2)].element), (yyvsp[(1) - (2)].command)); }\n    break;\n\n  case 59:\n#line 730 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = clean_simple_command ((yyvsp[(1) - (1)].command)); }\n    break;\n\n  case 60:\n#line 732 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 61:\n#line 734 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  COMMAND *tc;\n\n\t\t\t  tc = (yyvsp[(1) - (2)].command);\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = (yyvsp[(2) - (2)].redirect);\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = (yyvsp[(2) - (2)].redirect);\n\t\t\t  (yyval.command) = (yyvsp[(1) - (2)].command);\n\t\t\t}\n    break;\n\n  case 62:\n#line 750 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 63:\n#line 752 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 64:\n#line 756 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 65:\n#line 758 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 66:\n#line 760 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = make_while_command ((yyvsp[(2) - (5)].command), (yyvsp[(4) - (5)].command)); }\n    break;\n\n  case 67:\n#line 762 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = make_until_command ((yyvsp[(2) - (5)].command), (yyvsp[(4) - (5)].command)); }\n    break;\n\n  case 68:\n#line 764 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 69:\n#line 766 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 70:\n#line 768 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 71:\n#line 770 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 72:\n#line 772 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 73:\n#line 774 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 74:\n#line 776 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 75:\n#line 780 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_for_command ((yyvsp[(2) - (6)].word), add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), (yyvsp[(5) - (6)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 76:\n#line 785 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_for_command ((yyvsp[(2) - (6)].word), add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), (yyvsp[(5) - (6)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 77:\n#line 790 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_for_command ((yyvsp[(2) - (7)].word), add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), (yyvsp[(6) - (7)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 78:\n#line 795 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_for_command ((yyvsp[(2) - (7)].word), add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), (yyvsp[(6) - (7)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 79:\n#line 800 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_for_command ((yyvsp[(2) - (10)].word), REVERSE_LIST ((yyvsp[(5) - (10)].word_list), WORD_LIST *), (yyvsp[(9) - (10)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 80:\n#line 805 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_for_command ((yyvsp[(2) - (10)].word), REVERSE_LIST ((yyvsp[(5) - (10)].word_list), WORD_LIST *), (yyvsp[(9) - (10)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 81:\n#line 810 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_for_command ((yyvsp[(2) - (9)].word), (WORD_LIST *)NULL, (yyvsp[(8) - (9)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 82:\n#line 815 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_for_command ((yyvsp[(2) - (9)].word), (WORD_LIST *)NULL, (yyvsp[(8) - (9)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 83:\n#line 822 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t\t  (yyval.command) = make_arith_for_command ((yyvsp[(2) - (7)].word_list), (yyvsp[(6) - (7)].command), arith_for_lineno);\n\t\t\t\t  if (word_top > 0) word_top--;\n\t\t\t\t}\n    break;\n\n  case 84:\n#line 827 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t\t  (yyval.command) = make_arith_for_command ((yyvsp[(2) - (7)].word_list), (yyvsp[(6) - (7)].command), arith_for_lineno);\n\t\t\t\t  if (word_top > 0) word_top--;\n\t\t\t\t}\n    break;\n\n  case 85:\n#line 832 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t\t  (yyval.command) = make_arith_for_command ((yyvsp[(2) - (5)].word_list), (yyvsp[(4) - (5)].command), arith_for_lineno);\n\t\t\t\t  if (word_top > 0) word_top--;\n\t\t\t\t}\n    break;\n\n  case 86:\n#line 837 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t\t  (yyval.command) = make_arith_for_command ((yyvsp[(2) - (5)].word_list), (yyvsp[(4) - (5)].command), arith_for_lineno);\n\t\t\t\t  if (word_top > 0) word_top--;\n\t\t\t\t}\n    break;\n\n  case 87:\n#line 844 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_select_command ((yyvsp[(2) - (6)].word), add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), (yyvsp[(5) - (6)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 88:\n#line 849 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_select_command ((yyvsp[(2) - (6)].word), add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), (yyvsp[(5) - (6)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 89:\n#line 854 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_select_command ((yyvsp[(2) - (7)].word), add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), (yyvsp[(6) - (7)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 90:\n#line 859 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_select_command ((yyvsp[(2) - (7)].word), add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), (yyvsp[(6) - (7)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 91:\n#line 864 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_select_command ((yyvsp[(2) - (10)].word), REVERSE_LIST ((yyvsp[(5) - (10)].word_list), WORD_LIST *), (yyvsp[(9) - (10)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 92:\n#line 869 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_select_command ((yyvsp[(2) - (10)].word), REVERSE_LIST ((yyvsp[(5) - (10)].word_list), WORD_LIST *), (yyvsp[(9) - (10)].command), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 93:\n#line 876 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_case_command ((yyvsp[(2) - (6)].word), (PATTERN_LIST *)NULL, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 94:\n#line 881 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_case_command ((yyvsp[(2) - (7)].word), (yyvsp[(5) - (7)].pattern), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 95:\n#line 886 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_case_command ((yyvsp[(2) - (6)].word), (yyvsp[(5) - (6)].pattern), word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n    break;\n\n  case 96:\n#line 893 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = make_function_def ((yyvsp[(1) - (5)].word), (yyvsp[(5) - (5)].command), function_dstart, function_bstart); }\n    break;\n\n  case 97:\n#line 896 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = make_function_def ((yyvsp[(2) - (6)].word), (yyvsp[(6) - (6)].command), function_dstart, function_bstart); }\n    break;\n\n  case 98:\n#line 899 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = make_function_def ((yyvsp[(2) - (4)].word), (yyvsp[(4) - (4)].command), function_dstart, function_bstart); }\n    break;\n\n  case 99:\n#line 903 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = (yyvsp[(1) - (1)].command); }\n    break;\n\n  case 100:\n#line 905 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  COMMAND *tc;\n\n\t\t\t  tc = (yyvsp[(1) - (2)].command);\n\t\t\t  /* According to Posix.2 3.9.5, redirections\n\t\t\t     specified after the body of a function should\n\t\t\t     be attached to the function and performed when\n\t\t\t     the function is executed, not as part of the\n\t\t\t     function definition command. */\n\t\t\t  /* XXX - I don't think it matters, but we might\n\t\t\t     want to change this in the future to avoid\n\t\t\t     problems differentiating between a function\n\t\t\t     definition with a redirection and a function\n\t\t\t     definition containing a single command with a\n\t\t\t     redirection.  The two are semantically equivalent,\n\t\t\t     though -- the only difference is in how the\n\t\t\t     command printing code displays the redirections. */\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = (yyvsp[(2) - (2)].redirect);\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = (yyvsp[(2) - (2)].redirect);\n\t\t\t  (yyval.command) = (yyvsp[(1) - (2)].command);\n\t\t\t}\n    break;\n\n  case 101:\n#line 936 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_subshell_command ((yyvsp[(2) - (3)].command));\n\t\t\t  (yyval.command)->flags |= CMD_WANT_SUBSHELL;\n\t\t\t}\n    break;\n\n  case 102:\n#line 943 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_coproc_command (\"COPROC\", (yyvsp[(2) - (2)].command));\n\t\t\t  (yyval.command)->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n    break;\n\n  case 103:\n#line 948 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  COMMAND *tc;\n\n\t\t\t  tc = (yyvsp[(2) - (3)].command);\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = (yyvsp[(3) - (3)].redirect);\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = (yyvsp[(3) - (3)].redirect);\n\t\t\t  (yyval.command) = make_coproc_command (\"COPROC\", (yyvsp[(2) - (3)].command));\n\t\t\t  (yyval.command)->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n    break;\n\n  case 104:\n#line 965 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_coproc_command ((yyvsp[(2) - (3)].word)->word, (yyvsp[(3) - (3)].command));\n\t\t\t  (yyval.command)->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n    break;\n\n  case 105:\n#line 970 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  COMMAND *tc;\n\n\t\t\t  tc = (yyvsp[(3) - (4)].command);\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = (yyvsp[(4) - (4)].redirect);\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = (yyvsp[(4) - (4)].redirect);\n\t\t\t  (yyval.command) = make_coproc_command ((yyvsp[(2) - (4)].word)->word, (yyvsp[(3) - (4)].command));\n\t\t\t  (yyval.command)->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n    break;\n\n  case 106:\n#line 987 \"/usr/homes/chet/src/bash/src/parse.y\"\n    {\n\t\t\t  (yyval.command) = make_coproc_command (\"COPROC\", clean_simple_command ((yyvsp[(2) - (2)].command)));\n\t\t\t  (yyval.command)->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n    break;\n\n  case 107:\n#line 994 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command) = make_if_command ((yyvsp[(2) - (5)].command), (yyvsp[(4) - (5)].command), (COMMAND *)NULL); }\n    break;\n\n  case 108:\n#line 996 \"/usr/homes/chet/src/bash/src/parse.y\"\n    { (yyval.command"
}