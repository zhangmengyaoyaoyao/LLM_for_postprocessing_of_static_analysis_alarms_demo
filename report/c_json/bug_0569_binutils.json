{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "UNINITIALIZED_VALUE",
    "Code_line": "      OP (C, D, A, B,  7, 14, (md5_uint32) 0x676f02d9);",
    "Code_function": "md5_process_block (const void *buffer, size_t len, struct md5_ctx *ctx)\n{\n  md5_uint32 correct_words[16];\n  const md5_uint32 *words = (const md5_uint32 *) buffer;\n  size_t nwords = len / sizeof (md5_uint32);\n  const md5_uint32 *endp = words + nwords;\n  md5_uint32 A = ctx->A;\n  md5_uint32 B = ctx->B;\n  md5_uint32 C = ctx->C;\n  md5_uint32 D = ctx->D;\n\n  /* First increment the byte count.  RFC 1321 specifies the possible\n     length of the file up to 2^64 bits.  Here we only compute the\n     number of bytes.  Do a double word increment.  */\n  ctx->total[0] += len;\n  ctx->total[1] += ((len >> 31) >> 1) + (ctx->total[0] < len);\n\n  /* Process all bytes in the buffer with 64 bytes in each round of\n     the loop.  */\n  while (words < endp)\n    {\n      md5_uint32 *cwp = correct_words;\n      md5_uint32 A_save = A;\n      md5_uint32 B_save = B;\n      md5_uint32 C_save = C;\n      md5_uint32 D_save = D;\n\n      /* First round: using the given function, the context and a constant\n\t the next context is computed.  Because the algorithms processing\n\t unit is a 32-bit word and it is determined to work on words in\n\t little endian byte order we perhaps have to change the byte order\n\t before the computation.  To reduce the work for the next steps\n\t we store the swapped words in the array CORRECT_WORDS.  */\n\n#define OP(a, b, c, d, s, T)\t\t\t\t\t\t\\\n      do\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n\t  a += FF (b, c, d) + (*cwp++ = SWAP (*words)) + T;\t\t\\\n\t  ++words;\t\t\t\t\t\t\t\\\n\t  CYCLIC (a, s);\t\t\t\t\t\t\\\n\t  a += b;\t\t\t\t\t\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      while (0)\n\n      /* It is unfortunate that C does not provide an operator for\n\t cyclic rotation.  Hope the C compiler is smart enough.  */\n#define CYCLIC(w, s) (w = (w << s) | (w >> (32 - s)))\n\n      /* Before we start, one word to the strange constants.\n\t They are defined in RFC 1321 as\n\n\t T[i] = (int) (4294967296.0 * fabs (sin (i))), i=1..64\n       */\n\n      /* Round 1.  */\n      OP (A, B, C, D,  7, (md5_uint32) 0xd76aa478);\n      OP (D, A, B, C, 12, (md5_uint32) 0xe8c7b756);\n      OP (C, D, A, B, 17, (md5_uint32) 0x242070db);\n      OP (B, C, D, A, 22, (md5_uint32) 0xc1bdceee);\n      OP (A, B, C, D,  7, (md5_uint32) 0xf57c0faf);\n      OP (D, A, B, C, 12, (md5_uint32) 0x4787c62a);\n      OP (C, D, A, B, 17, (md5_uint32) 0xa8304613);\n      OP (B, C, D, A, 22, (md5_uint32) 0xfd469501);\n      OP (A, B, C, D,  7, (md5_uint32) 0x698098d8);\n      OP (D, A, B, C, 12, (md5_uint32) 0x8b44f7af);\n      OP (C, D, A, B, 17, (md5_uint32) 0xffff5bb1);\n      OP (B, C, D, A, 22, (md5_uint32) 0x895cd7be);\n      OP (A, B, C, D,  7, (md5_uint32) 0x6b901122);\n      OP (D, A, B, C, 12, (md5_uint32) 0xfd987193);\n      OP (C, D, A, B, 17, (md5_uint32) 0xa679438e);\n      OP (B, C, D, A, 22, (md5_uint32) 0x49b40821);\n\n      /* For the second to fourth round we have the possibly swapped words\n\t in CORRECT_WORDS.  Redefine the macro to take an additional first\n\t argument specifying the function to use.  */\n#undef OP\n#define OP(a, b, c, d, k, s, T)\t\t\t\t\t\t\\\n      do \t\t\t\t\t\t\t\t\\\n\t{\t\t\t\t\t\t\t\t\\\n\t  a += FX (b, c, d) + correct_words[k] + T;\t\t\t\\\n\t  CYCLIC (a, s);\t\t\t\t\t\t\\\n\t  a += b;\t\t\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n      while (0)\n\n#define FX(b, c, d) FG (b, c, d)\n\n      /* Round 2.  */\n      OP (A, B, C, D,  1,  5, (md5_uint32) 0xf61e2562);\n      OP (D, A, B, C,  6,  9, (md5_uint32) 0xc040b340);\n      OP (C, D, A, B, 11, 14, (md5_uint32) 0x265e5a51);\n      OP (B, C, D, A,  0, 20, (md5_uint32) 0xe9b6c7aa);\n      OP (A, B, C, D,  5,  5, (md5_uint32) 0xd62f105d);\n      OP (D, A, B, C, 10,  9, (md5_uint32) 0x02441453);\n      OP (C, D, A, B, 15, 14, (md5_uint32) 0xd8a1e681);\n      OP (B, C, D, A,  4, 20, (md5_uint32) 0xe7d3fbc8);\n      OP (A, B, C, D,  9,  5, (md5_uint32) 0x21e1cde6);\n      OP (D, A, B, C, 14,  9, (md5_uint32) 0xc33707d6);\n      OP (C, D, A, B,  3, 14, (md5_uint32) 0xf4d50d87);\n      OP (B, C, D, A,  8, 20, (md5_uint32) 0x455a14ed);\n      OP (A, B, C, D, 13,  5, (md5_uint32) 0xa9e3e905);\n      OP (D, A, B, C,  2,  9, (md5_uint32) 0xfcefa3f8);\n      OP (C, D, A, B,  7, 14, (md5_uint32) 0x676f02d9);\n      OP (B, C, D, A, 12, 20, (md5_uint32) 0x8d2a4c8a);\n\n#undef FX\n#define FX(b, c, d) FH (b, c, d)\n\n      /* Round 3.  */\n      OP (A, B, C, D,  5,  4, (md5_uint32) 0xfffa3942);\n      OP (D, A, B, C,  8, 11, (md5_uint32) 0x8771f681);\n      OP (C, D, A, B, 11, 16, (md5_uint32) 0x6d9d6122);\n      OP (B, C, D, A, 14, 23, (md5_uint32) 0xfde5380c);\n      OP (A, B, C, D,  1,  4, (md5_uint32) 0xa4beea44);\n      OP (D, A, B, C,  4, 11, (md5_uint32) 0x4bdecfa9);\n      OP (C, D, A, B,  7, 16, (md5_uint32) 0xf6bb4b60);\n      OP (B, C, D, A, 10, 23, (md5_uint32) 0xbebfbc70);\n      OP (A, B, C, D, 13,  4, (md5_uint32) 0x289b7ec6);\n      OP (D, A, B, C,  0, 11, (md5_uint32) 0xeaa127fa);\n      OP (C, D, A, B,  3, 16, (md5_uint32) 0xd4ef3085);\n      OP (B, C, D, A,  6, 23, (md5_uint32) 0x04881d05);\n      OP (A, B, C, D,  9,  4, (md5_uint32) 0xd9d4d039);\n      OP (D, A, B, C, 12, 11, (md5_uint32) 0xe6db99e5);\n      OP (C, D, A, B, 15, 16, (md5_uint32) 0x1fa27cf8);\n      OP (B, C, D, A,  2, 23, (md5_uint32) 0xc4ac5665);\n\n#undef FX\n#define FX(b, c, d) FI (b, c, d)\n\n      /* Round 4.  */\n      OP (A, B, C, D,  0,  6, (md5_uint32) 0xf4292244);\n      OP (D, A, B, C,  7, 10, (md5_uint32) 0x432aff97);\n      OP (C, D, A, B, 14, 15, (md5_uint32) 0xab9423a7);\n      OP (B, C, D, A,  5, 21, (md5_uint32) 0xfc93a039);\n      OP (A, B, C, D, 12,  6, (md5_uint32) 0x655b59c3);\n      OP (D, A, B, C,  3, 10, (md5_uint32) 0x8f0ccc92);\n      OP (C, D, A, B, 10, 15, (md5_uint32) 0xffeff47d);\n      OP (B, C, D, A,  1, 21, (md5_uint32) 0x85845dd1);\n      OP (A, B, C, D,  8,  6, (md5_uint32) 0x6fa87e4f);\n      OP (D, A, B, C, 15, 10, (md5_uint32) 0xfe2ce6e0);\n      OP (C, D, A, B,  6, 15, (md5_uint32) 0xa3014314);\n      OP (B, C, D, A, 13, 21, (md5_uint32) 0x4e0811a1);\n      OP (A, B, C, D,  4,  6, (md5_uint32) 0xf7537e82);\n      OP (D, A, B, C, 11, 10, (md5_uint32) 0xbd3af235);\n      OP (C, D, A, B,  2, 15, (md5_uint32) 0x2ad7d2bb);\n      OP (B, C, D, A,  9, 21, (md5_uint32) 0xeb86d391);\n\n      /* Add the starting values of the context.  */\n      A += A_save;\n      B += B_save;\n      C += C_save;\n      D += D_save;\n    }\n\n  /* Put checksum in context given as argument.  */\n  ctx->A = A;\n  ctx->B = B;\n  ctx->C = C;\n  ctx->D = D;\n}"
}