{
    "project": "diffutils",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/sdiff.c",
    "message": "The value read from cmd0 was never initialized.",
    "warning_function_name": "edit",
    "warning_line": "case '1': case 'l':",
    "warning_context": "static bool\nedit (struct line_filter *left, char const *lname, lin lline, lin llen,\n      struct line_filter *right, char const *rname, lin rline, lin rlen,\n      FILE *outfile)\n{\n  for (;;)\n    {\n      int cmd0 IF_LINT (= 0);\n      int cmd1 IF_LINT (= 0);\n      bool gotcmd = false;\n\n      while (! gotcmd)\n\t{\n\t  if (putchar ('%') != '%')\n\t    perror_fatal (_(\"write failed\"));\n\t  ck_fflush (stdout);\n\n\t  cmd0 = skip_white ();\n\t  switch (cmd0)\n\t    {\n\t    case '1': case '2': case 'l': case 'r':\n\t    case 's': case 'v': case 'q':\n\t      if (skip_white () != '\\n')\n\t\t{\n\t\t  give_help ();\n\t\t  flush_line ();\n\t\t  continue;\n\t\t}\n\t      gotcmd = true;\n\t      break;\n\n\t    case 'e':\n\t      cmd1 = skip_white ();\n\t      switch (cmd1)\n\t\t{\n\t\tcase '1': case '2': case 'b': case 'd': case 'l': case 'r':\n\t\t  if (skip_white () != '\\n')\n\t\t    {\n\t\t      give_help ();\n\t\t      flush_line ();\n\t\t      continue;\n\t\t    }\n\t\t  gotcmd = true;\n\t\t  break;\n\t\tcase '\\n':\n\t\t  gotcmd = true;\n\t\t  break;\n\t\tdefault:\n\t\t  give_help ();\n\t\t  flush_line ();\n\t\t  continue;\n\t\t}\n\t      break;\n\n\t    case EOF:\n\t      if (feof (stdin))\n\t\t{\n\t\t  gotcmd = true;\n\t\t  cmd0 = 'q';\n\t\t  break;\n\t\t}\n\t      /* Fall through.  */\n\t    default:\n\t      flush_line ();\n\t      /* Fall through.  */\n\t    case '\\n':\n\t      give_help ();\n\t      continue;\n\t    }\n\t}\n\n      switch (cmd0)\n\t{\n\tcase '1': case 'l':\n\t  lf_copy (left, llen, outfile);\n\t  lf_skip (right, rlen);\n\t  return true;\n\tcase '2': case 'r':\n\t  lf_copy (right, rlen, outfile);\n\t  lf_skip (left, llen);\n\t  return true;\n\tcase 's':\n\t  suppress_common_lines = true;\n\t  break;\n\tcase 'v':\n\t  suppress_common_lines = false;\n\t  break;\n\tcase 'q':\n\t  return false;\n\tcase 'e':\n\t  {\n\t    int fd;\n\n\t    if (tmpname)\n\t      tmp = fopen (tmpname, \"w\");\n\t    else\n\t      {\n\t\tif ((fd = temporary_file ()) < 0)\n\t\t  perror_fatal (\"mkstemp\");\n\t\ttmp = fdopen (fd, \"w\");\n\t      }\n"
}