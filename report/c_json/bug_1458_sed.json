{
    "project": "sed",
    "tool": "Cppcheck",
    "category": "memleakOnRealloc",
    "file": "testsuite/tst-pcre.c",
    "message": "Common realloc mistake: 'string' nulled but not freed upon failure",
    "warning_function_name": "main",
    "warning_line": "string = realloc (string, len - 3);",
    "warning_context": "\n  linenum = 1;\n\n  while ((len = getline (&line, &line_len, f)) > 0)\n    {\n      char *p;\n      unsigned long num;\n\n      ++linenum;\n\n      if (line[len - 1] == '\\n')\n\tline[--len] = '\\0';\n\n      if (line[0] == '#')\n\tcontinue;\n\n      if (line[0] == '\\0')\n\t{\n\t  /* End of test.  */\n\t  ignorecase = 0;\n\t  pattern_valid = 0;\n\t  rm_valid = 0;\n\t  continue;\n\t}\n\n      if (line[0] == '/')\n\t{\n\t  /* Pattern.  */\n\t  p = strrchr (line + 1, '/');\n\n\t  pattern_valid = 0;\n\t  rm_valid = 0;\n\t  if (p == NULL)\n\t    {\n\t      printf (\"%lu: Invalid pattern line: %s\\n\", linenum, line);\n\t      ret = 1;\n\t      continue;\n\t    }\n\n\t  if (p[1] == 'i' && p[2] == '\\0')\n\t    ignorecase = 1;\n\t  else if (p[1] != '\\0')\n\t    {\n\t      printf (\"%lu: Invalid pattern line: %s\\n\", linenum, line);\n\t      ret = 1;\n\t      continue;\n\t    }\n\n\t  if (pattern_alloced < (size_t) (p - line))\n\t    {\n\t      pattern = realloc (pattern, p - line);\n\t      if (pattern == NULL)\n\t\t{\n\t\t  printf (\"%lu: Cannot record pattern: %m\\n\", linenum);\n\t\t  ret = 1;\n\t\t  break;\n\t\t}\n\t      pattern_alloced = p - line;\n\t    }\n\n\t  memcpy (pattern, line + 1, p - line - 1);\n\t  pattern[p - line - 1] = '\\0';\n\t  pattern_valid = 1;\n\t  continue;\n\t}\n\n      if (strncmp (line, \"    \", 4) == 0)\n\t{\n\t  regex_t re;\n\t  int n;\n    \n\t  if (!pattern_valid)\n\t    {\n\t      printf (\"%lu: No previous valid pattern %s\\n\", linenum, line);\n\t      continue;\n\t    }\n\n\t  if (string_alloced < (size_t) (len - 3))\n\t    {\n\t      string = realloc (string, len - 3);\n\t      if (string == NULL)\n\t\t{\n\t\t  printf (\"%lu: Cannot record search string: %m\\n\", linenum);\n\t\t  ret = 1;\n\t\t  break;\n\t\t}\n\t      string_alloced = len - 3;\n\t    }\n\n\t  memcpy (string, line + 4, len - 3);\n\n\t  n = regcomp (&re, pattern,\n\t\t       REG_EXTENDED | (ignorecase ? REG_ICASE : 0));\n\t  if (n != 0)\n\t    {\n\t      char buf[500];\n\t      regerror (n, &re, buf, sizeof (buf));\n\t      printf (\"%lu: regcomp failed for %s: %s\\n\",\n\t\t      linenum, pattern, buf);\n\t      ret = 1;\n\t      continue;\n"
}