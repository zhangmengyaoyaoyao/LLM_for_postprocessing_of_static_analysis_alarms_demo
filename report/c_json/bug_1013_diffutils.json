{
    "project": "diffutils",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/diff3.c",
    "message": "The value read from low[_] was never initialized.",
    "warning_function_name": "using_to_diff3_block",
    "warning_line": "lin lo = low[d], hi = high[d];",
    "warning_context": "static struct diff3_block *\nusing_to_diff3_block (struct diff_block *using[2],\n\t\t      struct diff_block *last_using[2],\n\t\t      int low_thread, int high_thread,\n\t\t      struct diff3_block const *last_diff3)\n{\n  lin low[2], high[2];\n  struct diff3_block *result;\n  struct diff_block *ptr;\n  int d;\n  lin i;\n\n  /* Find the range in the common file.  */\n  lin lowc = D_LOWLINE (using[low_thread], FC);\n  lin highc = D_HIGHLINE (last_using[high_thread], FC);\n\n  /* Find the ranges in the other files.\n     If using[d] is null, that means that the file to which that diff\n     refers is equivalent to the common file over this range.  */\n\n  for (d = 0; d < 2; d++)\n    if (using[d])\n      {\n\tlow[d] = D_LOW_MAPLINE (using[d], FC, FO, lowc);\n\thigh[d] = D_HIGH_MAPLINE (last_using[d], FC, FO, highc);\n      }\n    else\n      {\n\tlow[d] = D_HIGH_MAPLINE (last_diff3, FILEC, FILE0 + d, lowc);\n\thigh[d] = D_HIGH_MAPLINE (last_diff3, FILEC, FILE0 + d, highc);\n      }\n\n  /* Create a block with the appropriate sizes */\n  result = create_diff3_block (low[0], high[0], low[1], high[1], lowc, highc);\n\n  /* Copy information for the common file.\n     Return with a zero if any of the compares failed.  */\n\n  for (d = 0; d < 2; d++)\n    for (ptr = using[d]; ptr; ptr = D_NEXT (ptr))\n      {\n\tlin result_offset = D_LOWLINE (ptr, FC) - lowc;\n\n\tif (!copy_stringlist (D_LINEARRAY (ptr, FC),\n\t\t\t      D_LENARRAY (ptr, FC),\n\t\t\t      D_LINEARRAY (result, FILEC) + result_offset,\n\t\t\t      D_LENARRAY (result, FILEC) + result_offset,\n\t\t\t      D_NUMLINES (ptr, FC)))\n\t  return 0;\n      }\n\n  /* Copy information for file d.  First deal with anything that might be\n     before the first diff.  */\n\n  for (d = 0; d < 2; d++)\n    {\n      struct diff_block *u = using[d];\n      lin lo = low[d], hi = high[d];\n\n      for (i = 0;\n\t   i + lo < (u ? D_LOWLINE (u, FO) : hi + 1);\n\t   i++)\n\t{\n\t  D_RELNUM (result, FILE0 + d, i) = D_RELNUM (result, FILEC, i);\n\t  D_RELLEN (result, FILE0 + d, i) = D_RELLEN (result, FILEC, i);\n\t}\n\n      for (ptr = u; ptr; ptr = D_NEXT (ptr))\n\t{\n\t  lin result_offset = D_LOWLINE (ptr, FO) - lo;\n\t  lin linec;\n\n\t  if (!copy_stringlist (D_LINEARRAY (ptr, FO),\n\t\t\t\tD_LENARRAY (ptr, FO),\n\t\t\t\tD_LINEARRAY (result, FILE0 + d) + result_offset,\n\t\t\t\tD_LENARRAY (result, FILE0 + d) + result_offset,\n\t\t\t\tD_NUMLINES (ptr, FO)))\n\t    return 0;\n\n\t  /* Catch the lines between here and the next diff */\n\t  linec = D_HIGHLINE (ptr, FC) + 1 - lowc;\n\t  for (i = D_HIGHLINE (ptr, FO) + 1 - lo;\n\t       i < (D_NEXT (ptr) ? D_LOWLINE (D_NEXT (ptr), FO) : hi + 1) - lo;\n\t       i++)\n\t    {\n\t      D_RELNUM (result, FILE0 + d, i) = D_RELNUM (result, FILEC, linec);\n\t      D_RELLEN (result, FILE0 + d, i) = D_RELLEN (result, FILEC, linec);\n\t      linec++;\n\t    }\n\t}\n    }\n\n  /* Set correspond */\n  if (!using[0])\n    D3_TYPE (result) = DIFF_2ND;\n  else if (!using[1])\n    D3_TYPE (result) = DIFF_1ST;\n  else\n    {\n      lin nl0 = D_NUMLINES (result, FILE0);\n      lin nl1 = D_NUMLINES (result, FILE1);\n"
}