{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/elflink.c",
    "message": "Offset: [1, +oo] Size: [0, +oo] by call to `_bfd_elf_strtab_add`.",
    "warning_function_name": "bfd_elf_size_dynamic_sections",
    "warning_line": "indx = _bfd_elf_strtab_add (elf_hash_table (info)->dynstr,",
    "warning_context": "      else if (info->flags & DF_BIND_NOW)\n\t{\n\t  if (!_bfd_elf_add_dynamic_entry (info, DT_BIND_NOW, 0))\n\t    return FALSE;\n\t}\n\n      if (info->flags_1)\n\t{\n\t  if (info->executable)\n\t    info->flags_1 &= ~ (DF_1_INITFIRST\n\t\t\t\t| DF_1_NODELETE\n\t\t\t\t| DF_1_NOOPEN);\n\t  if (!_bfd_elf_add_dynamic_entry (info, DT_FLAGS_1, info->flags_1))\n\t    return FALSE;\n\t}\n\n      /* Work out the size of the version reference section.  */\n\n      s = bfd_get_linker_section (dynobj, \".gnu.version_r\");\n      BFD_ASSERT (s != NULL);\n      {\n\tstruct elf_find_verdep_info sinfo;\n\n\tsinfo.info = info;\n\tsinfo.vers = elf_tdata (output_bfd)->cverdefs;\n\tif (sinfo.vers == 0)\n\t  sinfo.vers = 1;\n\tsinfo.failed = FALSE;\n\n\telf_link_hash_traverse (elf_hash_table (info),\n\t\t\t\t_bfd_elf_link_find_version_dependencies,\n\t\t\t\t&sinfo);\n\tif (sinfo.failed)\n\t  return FALSE;\n\n\tif (elf_tdata (output_bfd)->verref == NULL)\n\t  s->flags |= SEC_EXCLUDE;\n\telse\n\t  {\n\t    Elf_Internal_Verneed *t;\n\t    unsigned int size;\n\t    unsigned int crefs;\n\t    bfd_byte *p;\n\n\t    /* Build the version dependency section.  */\n\t    size = 0;\n\t    crefs = 0;\n\t    for (t = elf_tdata (output_bfd)->verref;\n\t\t t != NULL;\n\t\t t = t->vn_nextref)\n\t      {\n\t\tElf_Internal_Vernaux *a;\n\n\t\tsize += sizeof (Elf_External_Verneed);\n\t\t++crefs;\n\t\tfor (a = t->vn_auxptr; a != NULL; a = a->vna_nextptr)\n\t\t  size += sizeof (Elf_External_Vernaux);\n\t      }\n\n\t    s->size = size;\n\t    s->contents = (unsigned char *) bfd_alloc (output_bfd, s->size);\n\t    if (s->contents == NULL)\n\t      return FALSE;\n\n\t    p = s->contents;\n\t    for (t = elf_tdata (output_bfd)->verref;\n\t\t t != NULL;\n\t\t t = t->vn_nextref)\n\t      {\n\t\tunsigned int caux;\n\t\tElf_Internal_Vernaux *a;\n\t\tbfd_size_type indx;\n\n\t\tcaux = 0;\n\t\tfor (a = t->vn_auxptr; a != NULL; a = a->vna_nextptr)\n\t\t  ++caux;\n\n\t\tt->vn_version = VER_NEED_CURRENT;\n\t\tt->vn_cnt = caux;\n\t\tindx = _bfd_elf_strtab_add (elf_hash_table (info)->dynstr,\n\t\t\t\t\t    elf_dt_name (t->vn_bfd) != NULL\n\t\t\t\t\t    ? elf_dt_name (t->vn_bfd)\n\t\t\t\t\t    : lbasename (t->vn_bfd->filename),\n\t\t\t\t\t    FALSE);\n\t\tif (indx == (bfd_size_type) -1)\n\t\t  return FALSE;\n\t\tt->vn_file = indx;\n\t\tt->vn_aux = sizeof (Elf_External_Verneed);\n\t\tif (t->vn_nextref == NULL)\n\t\t  t->vn_next = 0;\n\t\telse\n\t\t  t->vn_next = (sizeof (Elf_External_Verneed)\n\t\t\t\t+ caux * sizeof (Elf_External_Vernaux));\n\n\t\t_bfd_elf_swap_verneed_out (output_bfd, t,\n\t\t\t\t\t   (Elf_External_Verneed *) p);\n\t\tp += sizeof (Elf_External_Verneed);\n\n\t\tfor (a = t->vn_auxptr; a != NULL; a = a->vna_nextptr)\n\t\t  {\n\t\t    a->vna_hash = bfd_elf_hash (a->vna_nodename);\n"
}