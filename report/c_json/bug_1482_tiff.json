{
    "project": "tiff",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "tools/tiffdither.c",
    "message": "Offset: [7, +oo] (‚áê [0, +oo] + 7) Size: [0, +oo] by call to `TIFFWriteScanline`.",
    "warning_function_name": "fsdither",
    "warning_line": "if (TIFFWriteScanline(out, outline, i-1, 0) < 0)",
    "warning_context": "static void\nfsdither(TIFF* in, TIFF* out)\n{\n\tunsigned char *outline, *inputline, *inptr;\n\tshort *thisline, *nextline, *tmpptr;\n\tregister unsigned char\t*outptr;\n\tregister short *thisptr, *nextptr;\n\tregister uint32 i, j;\n\tuint32 imax, jmax;\n\tint lastline, lastpixel;\n\tint bit;\n\ttsize_t outlinesize;\n\n\timax = imagelength - 1;\n\tjmax = imagewidth - 1;\n\tinputline = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(in));\n\tthisline = (short *)_TIFFmalloc(imagewidth * sizeof (short));\n\tnextline = (short *)_TIFFmalloc(imagewidth * sizeof (short));\n\toutlinesize = TIFFScanlineSize(out);\n\toutline = (unsigned char *) _TIFFmalloc(outlinesize);\n\n\t/*\n\t * Get first line\n\t */\n\tif (TIFFReadScanline(in, inputline, 0, 0) <= 0)\n\t\treturn;\n\tinptr = inputline;\n\tnextptr = nextline;\n\tfor (j = 0; j < imagewidth; ++j)\n\t\t*nextptr++ = *inptr++;\n\tfor (i = 1; i < imagelength; ++i) {\n\t\ttmpptr = thisline;\n\t\tthisline = nextline;\n\t\tnextline = tmpptr;\n\t\tlastline = (i == imax);\n\t\tif (TIFFReadScanline(in, inputline, i, 0) <= 0)\n\t\t\tbreak;\n\t\tinptr = inputline;\n\t\tnextptr = nextline;\n\t\tfor (j = 0; j < imagewidth; ++j)\n\t\t\t*nextptr++ = *inptr++;\n\t\tthisptr = thisline;\n\t\tnextptr = nextline;\n\t\t_TIFFmemset(outptr = outline, 0, outlinesize);\n\t\tbit = 0x80;\n\t\tfor (j = 0; j < imagewidth; ++j) {\n\t\t\tregister int v;\n\n\t\t\tlastpixel = (j == jmax);\n\t\t\tv = *thisptr++;\n\t\t\tif (v < 0)\n\t\t\t\tv = 0;\n\t\t\telse if (v > 255)\n\t\t\t\tv = 255;\n\t\t\tif (v > threshold) {\n\t\t\t\t*outptr |= bit;\n\t\t\t\tv -= 255;\n\t\t\t}\n\t\t\tbit >>= 1;\n\t\t\tif (bit == 0) {\n\t\t\t\toutptr++;\n\t\t\t\tbit = 0x80;\n\t\t\t}\n\t\t\tif (!lastpixel)\n\t\t\t\tthisptr[0] += v * 7 / 16;\n\t\t\tif (!lastline) {\n\t\t\t\tif (j != 0)\n\t\t\t\t\tnextptr[-1] += v * 3 / 16;\n\t\t\t\t*nextptr++ += v * 5 / 16;\n\t\t\t\tif (!lastpixel)\n\t\t\t\t\tnextptr[0] += v / 16;\n\t\t\t}\n\t\t}\n\t\tif (TIFFWriteScanline(out, outline, i-1, 0) < 0)\n\t\t\tbreak;\n\t}\n\t_TIFFfree(inputline);\n\t_TIFFfree(thisline);\n\t_TIFFfree(nextline);\n\t_TIFFfree(outline);\n}\n"
}