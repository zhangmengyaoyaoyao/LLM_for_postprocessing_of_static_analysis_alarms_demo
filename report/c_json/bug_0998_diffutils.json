{
    "project": "diffutils",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "src/ifdef.c",
    "message": "The value read from value[_] was never initialized.",
    "warning_function_name": "format_group",
    "warning_line": "if (value[0] == value[1])",
    "warning_context": "static char const *\nformat_group (register FILE *out, char const *format, char endchar,\n\t      struct group const *groups)\n{\n  register char c;\n  register char const *f = format;\n\n  while ((c = *f) != endchar && c != 0)\n    {\n      char const *f1 = ++f;\n      if (c == '%')\n\tswitch ((c = *f++))\n\t  {\n\t  case '%':\n\t    break;\n\n\t  case '(':\n\t    /* Print if-then-else format e.g. '%(n=1?thenpart:elsepart)'.  */\n\t    {\n\t      int i;\n\t      uintmax_t value[2];\n\t      FILE *thenout, *elseout;\n\n\t      for (i = 0; i < 2; i++)\n\t\t{\n\t\t  if (ISDIGIT (*f))\n\t\t    {\n\t\t      char *fend;\n\t\t      errno = 0;\n\t\t      value[i] = strtoumax (f, &fend, 10);\n\t\t      if (errno)\n\t\t\tgoto bad_format;\n\t\t      f = fend;\n\t\t    }\n\t\t  else\n\t\t    {\n\t\t      value[i] = groups_letter_value (groups, *f);\n\t\t      if (value[i] == -1)\n\t\t\tgoto bad_format;\n\t\t      f++;\n\t\t    }\n\t\t  if (*f++ != \"=?\"[i])\n\t\t    goto bad_format;\n\t\t}\n\t      if (value[0] == value[1])\n\t\tthenout = out, elseout = 0;\n\t      else\n\t\tthenout = 0, elseout = out;\n\t      f = format_group (thenout, f, ':', groups);\n\t      if (*f)\n\t\t{\n\t\t  f = format_group (elseout, f + 1, ')', groups);\n\t\t  if (*f)\n\t\t    f++;\n\t\t}\n\t    }\n\t    continue;\n\n\t  case '<':\n\t    /* Print lines deleted from first file.  */\n\t    print_ifdef_lines (out, line_format[OLD], &groups[0]);\n\t    continue;\n\n\t  case '=':\n\t    /* Print common lines.  */\n\t    print_ifdef_lines (out, line_format[UNCHANGED], &groups[0]);\n\t    continue;\n\n\t  case '>':\n\t    /* Print lines inserted from second file.  */\n\t    print_ifdef_lines (out, line_format[NEW], &groups[1]);\n\t    continue;\n\n\t  default:\n\t    f = do_printf_spec (out, f - 2, 0, 0, groups);\n\t    if (f)\n\t      continue;\n\t    /* Fall through. */\n\t  bad_format:\n\t    c = '%';\n\t    f = f1;\n\t    break;\n\t  }\n\n      if (out)\n\tputc (c, out);\n    }\n\n  return f;\n}\n"
}