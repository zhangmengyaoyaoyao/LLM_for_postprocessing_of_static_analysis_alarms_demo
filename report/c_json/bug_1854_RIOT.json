{
    "project": "RIOT",
    "tool": "Cppcheck",
    "category": "Null Pointer Dereference",
    "file": "sys/net/gnrc/network_layer/sixlowpan/frag/vrb/gnrc_sixlowpan_frag_vrb.c",
    "message": "Either the condition 'tmp!=NULL' is redundant or there is possible null pointer dereference: tmp.",
    "warning_function_name": "nrc_sixlowpan_frag_vrb_add(",
    "warning_line": "while (tmp->next != NULL) {",
    "warning_context": "gnrc_sixlowpan_frag_vrb_t *gnrc_sixlowpan_frag_vrb_add(\n        const gnrc_sixlowpan_frag_rb_base_t *base,\n        gnrc_netif_t *out_netif, const uint8_t *out_dst, size_t out_dst_len)\n{\n    gnrc_sixlowpan_frag_vrb_t *vrbe = NULL;\n\n    assert(base != NULL);\n    assert(out_netif != NULL);\n    assert(out_dst != NULL);\n    assert(out_dst_len > 0);\n    for (unsigned i = 0; i < CONFIG_GNRC_SIXLOWPAN_FRAG_VRB_SIZE; i++) {\n        gnrc_sixlowpan_frag_vrb_t *ptr = &_vrb[i];\n\n        if (gnrc_sixlowpan_frag_vrb_entry_empty(ptr) ||\n            _equal_index(ptr, base->src, base->src_len, base->tag)) {\n            vrbe = ptr;\n            if (gnrc_sixlowpan_frag_vrb_entry_empty(vrbe)) {\n                vrbe->super = *base;\n                vrbe->out_netif = out_netif;\n                memcpy(vrbe->super.dst, out_dst, out_dst_len);\n                vrbe->out_tag = gnrc_sixlowpan_frag_fb_next_tag();\n                vrbe->super.dst_len = out_dst_len;\n                DEBUG(\"6lo vrb: creating entry (%s, \",\n                      gnrc_netif_addr_to_str(vrbe->super.src,\n                                             vrbe->super.src_len,\n                                             addr_str));\n                DEBUG(\"%s, %u, %u) => \",\n                      gnrc_netif_addr_to_str(vrbe->super.dst,\n                                             vrbe->super.dst_len,\n                                             addr_str),\n                      (unsigned)vrbe->super.datagram_size, vrbe->super.tag);\n                DEBUG(\"(%s, %u)\\n\",\n                      gnrc_netif_addr_to_str(vrbe->super.dst,\n                                             vrbe->super.dst_len,\n                                             addr_str), vrbe->out_tag);\n            }\n            /* _equal_index() => append intervals of `base`, so they don't get\n             * lost. We use append, so we don't need to change base! */\n            else if (base->ints != NULL) {\n                gnrc_sixlowpan_frag_rb_int_t *tmp = vrbe->super.ints;\n\n                if (tmp != base->ints) {\n                    /* base->ints is not already vrbe->super.ints */\n                    if (tmp != NULL) {\n                        /* iterate before appending and check if `base->ints` is\n                         * not already part of list */\n                        while (tmp->next != NULL) {\n                            if (tmp == base->ints) {\n                                tmp = NULL;\n                            }\n                            /* cppcheck-suppress nullPointer\n                             * (reason: possible bug in cppcheck, tmp can't\n                             * clearly be a NULL pointer here) */\n                            tmp = tmp->next;\n                        }\n                        if (tmp != NULL) {\n                            tmp->next = base->ints;\n                        }\n                    }\n                    else {\n                        vrbe->super.ints = base->ints;\n                    }\n                }\n            }\n            break;\n        }\n    }\n#ifdef MODULE_GNRC_SIXLOWPAN_FRAG_STATS\n    if (vrbe == NULL) {\n        gnrc_sixlowpan_frag_stats_get()->vrb_full++;\n    }\n#endif\n    return vrbe;\n}\n"
}