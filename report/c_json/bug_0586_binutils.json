{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "gas/app.c",
    "message": "The value read from fromlen was never initialized.",
    "warning_function_name": NaN,
    "warning_line": "ch = GET ();",
    "warning_context": "\n\t      ch = ' ';\n\t      goto recycle;\n\t    }\n#ifdef DOUBLESLASH_LINE_COMMENTS\n\t  else if (ch2 == '/')\n\t    {\n\t      do\n\t\t{\n\t\t  ch = GET ();\n\t\t}\n\t      while (ch != EOF && !IS_NEWLINE (ch));\n\t      if (ch == EOF)\n\t\tas_warn (\"end of file in comment; newline inserted\");\n\t      state = 0;\n\t      PUT ('\\n');\n\t      break;\n\t    }\n#endif\n\t  else\n\t    {\n\t      if (ch2 != EOF)\n\t\tUNGET (ch2);\n\t      if (state == 9 || state == 10)\n\t\tstate = 3;\n\t      PUT (ch);\n\t    }\n\t  break;\n\n\tcase LEX_IS_STRINGQUOTE:\n\t  quotechar = ch;\n\t  if (state == 10)\n\t    {\n\t      /* Preserve the whitespace in foo \"bar\".  */\n\t      UNGET (ch);\n\t      state = 3;\n\t      PUT (' ');\n\n\t      /* PUT didn't jump out.  We could just break, but we\n\t\t know what will happen, so optimize a bit.  */\n\t      ch = GET ();\n\t      old_state = 3;\n\t    }\n\t  else if (state == 9)\n\t    old_state = 3;\n\t  else\n\t    old_state = state;\n\t  state = 5;\n\t  PUT (ch);\n\t  break;\n\n#ifndef IEEE_STYLE\n\tcase LEX_IS_ONECHAR_QUOTE:\n#ifdef H_TICK_HEX\n\t  if (state == 9 && enable_h_tick_hex)\n\t    {\n\t      char c;\n\n\t      c = GET ();\n\t      as_warn (\"'%c found after symbol\", c);\n\t      UNGET (c);\n\t    }\n#endif\n\t  if (state == 10)\n\t    {\n\t      /* Preserve the whitespace in foo 'b'.  */\n\t      UNGET (ch);\n\t      state = 3;\n\t      PUT (' ');\n\t      break;\n\t    }\n\t  ch = GET ();\n\t  if (ch == EOF)\n\t    {\n\t      as_warn (_(\"end of file after a one-character quote; \\\\0 inserted\"));\n\t      ch = 0;\n\t    }\n\t  if (ch == '\\\\')\n\t    {\n\t      ch = GET ();\n\t      if (ch == EOF)\n\t\t{\n\t\t  as_warn (_(\"end of file in escape character\"));\n\t\t  ch = '\\\\';\n\t\t}\n\t      else\n\t\tch = process_escape (ch);\n\t    }\n\t  sprintf (out_buf, \"%d\", (int) (unsigned char) ch);\n\n\t  /* None of these 'x constants for us.  We want 'x'.  */\n\t  if ((ch = GET ()) != '\\'')\n\t    {\n#ifdef REQUIRE_CHAR_CLOSE_QUOTE\n\t      as_warn (_(\"missing close quote; (assumed)\"));\n#else\n\t      if (ch != EOF)\n\t\tUNGET (ch);\n#endif\n\t    }\n\t  if (strlen (out_buf) == 1)\n"
}