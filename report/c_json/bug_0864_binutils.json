{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L1",
    "file": "binutils/ieee.c",
    "message": "Offset: [1+max(489, `info->types.tail->c`), `info->types.tail->c` + 1] Size: 490 by call to `ieee_real_write_byte`.",
    "warning_function_name": "ieee_pop_type_used",
    "warning_line": "|| ! ieee_write_byte (info, 1)",
    "warning_context": "static unsigned int\nieee_pop_type_used (struct ieee_handle *info, bfd_boolean used)\n{\n  struct ieee_type_stack *ts;\n  unsigned int ret;\n\n  ts = info->type_stack;\n  assert (ts != NULL);\n\n  /* If this is a function type, and we need it, we need to append the\n     actual definition to the typedef block now.  */\n  if (used && ! ieee_buffer_emptyp (&ts->type.fndef))\n    {\n      struct ieee_buflist *buflist;\n\n      if (ts->type.localp)\n\t{\n\t  /* Make sure we have started the types block.  */\n\t  if (ieee_buffer_emptyp (&info->types))\n\t    {\n\t      if (! ieee_change_buffer (info, &info->types)\n\t\t  || ! ieee_write_byte (info, (int) ieee_bb_record_enum)\n\t\t  || ! ieee_write_byte (info, 1)\n\t\t  || ! ieee_write_number (info, 0)\n\t\t  || ! ieee_write_id (info, info->modname))\n\t\treturn FALSE;\n\t    }\n\t  buflist = &info->types;\n\t}\n      else\n\t{\n\t  /* Make sure we started the global type block.  */\n\t  if (ieee_buffer_emptyp (&info->global_types))\n\t    {\n\t      if (! ieee_change_buffer (info, &info->global_types)\n\t\t  || ! ieee_write_byte (info, (int) ieee_bb_record_enum)\n\t\t  || ! ieee_write_byte (info, 2)\n\t\t  || ! ieee_write_number (info, 0)\n\t\t  || ! ieee_write_id (info, \"\"))\n\t\treturn FALSE;\n\t    }\n\t  buflist = &info->global_types;\n\t}\n\n      if (! ieee_append_buffer (info, buflist, &ts->type.fndef))\n\treturn FALSE;\n    }\n\n  ret = ts->type.indx;\n  info->type_stack = ts->next;\n  free (ts);\n  return ret;\n}\n"
}