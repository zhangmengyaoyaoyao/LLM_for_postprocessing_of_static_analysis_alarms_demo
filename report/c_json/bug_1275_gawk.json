{
    "project": "gawk",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "debug.c",
    "message": "Offset added: 6 Size: [0, 7] by call to `estrdup`.",
    "warning_function_name": "debug_prog",
    "warning_line": "dgawk_prompt = estrdup(DEFAULT_PROMPT, strlen(DEFAULT_PROMPT));",
    "warning_context": "int\ndebug_prog(INSTRUCTION *pc)\n{\n\tchar *run;\n\n\tinput_fd = fileno(stdin);\n\tout_fp = stdout;\n\tif (os_isatty(input_fd))\n\t\tinput_from_tty = true;\n\tif (input_fd == 0 && input_from_tty)\n\t\tinitialize_readline();\n\n\tif (! read_a_line)\n\t\tread_a_line = g_readline;\n\n\tpush_cmd_src(input_fd, input_from_tty, read_a_line, 0, 0, EXIT_FATAL); \n\n\tsetbuf(out_fp, (char *) NULL);                                                           \n\tfor (cur_srcfile = srcfiles->prev; cur_srcfile != srcfiles;\n\t\t\tcur_srcfile = cur_srcfile->prev) {\n\t\tif (cur_srcfile->stype == SRC_FILE\n\t\t\t|| cur_srcfile->stype == SRC_INC)\n\t\t\tbreak;\n\t}\n\n\tif (cur_srcfile == srcfiles) {\n\t\tfprintf(out_fp, _(\"Can only debug programs provided with the `-f' option.\\n\"));\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tdgawk_prompt = estrdup(DEFAULT_PROMPT, strlen(DEFAULT_PROMPT));\n\tdbg_prompt = dgawk_prompt;\n\n\tmemset(&stop, 0, sizeof(stop));\n\tstop.command = D_illegal;\n\n\tif ((run = getenv(\"DGAWK_RESTART\")) != NULL) {\n\t\t/* We are restarting; restore state (breakpoints, history etc.)\n\t\t * passed as environment variables and optionally execute the run command.\n\t\t */\n\t\tunserialize(BREAK);\n\t\tunserialize(WATCH);\n\t\tunserialize(DISPLAY);\n\t\tunserialize(HISTORY);\n\t\tunserialize(OPTION);\n\t\tunsetenv(\"DGAWK_RESTART\");\n\t\tfprintf(out_fp, \"Restarting ...\\n\");\t\n\t\tif (strcasecmp(run, \"true\") == 0)\n\t\t\t(void) do_run(NULL, 0);\n\n\t} else if (command_file != NULL) {\n\t\t/* run commands from a file (--debug=file  or -D file) */\n\t\tint fd;\n\t\tfd = open_readfd(command_file);\n\t\tif (fd == INVALID_HANDLE) {\n\t\t\tfprintf(stderr, _(\"can't open source file `%s' for reading (%s)\"),\n\t\t\t\t\t\tcommand_file, strerror(errno));\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\tpush_cmd_src(fd, false, g_readline, close, 0, EXIT_FAILURE);\n\t\tcmd_src->str = estrdup(command_file, strlen(command_file));\n\n\t} else {\n\t\tint fd;\n\n#ifdef HAVE_LIBREADLINE\n\t\t(void) read_history(history_file);\n\t\tsess_history_base = history_length;\n#endif\n\n\t\t/* read saved options */\n\t\tfd = open_readfd(options_file);\n\t\tif (fd > INVALID_HANDLE)\n\t\t\tpush_cmd_src(fd, false, g_readline, close, 0, EXIT_SUCCESS);\n\t}\n\n\t/* start the command interpreter */\n\tread_command();\t/* yyparse */\n\treturn EXIT_SUCCESS;\n}\n"
}