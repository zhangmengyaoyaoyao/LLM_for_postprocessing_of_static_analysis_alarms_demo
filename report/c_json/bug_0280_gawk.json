{
    "Project": "gawk",
    "Tool": "Infer",
    "Bug Type": "BUFFER_OVERRUN_L3",
    "Code_line": "\t\tfalse_branch = list_create(instruction(Op_no_op));",
    "Code_function": "mk_condition(INSTRUCTION *cond, INSTRUCTION *ifp, INSTRUCTION *true_branch,\n\t\tINSTRUCTION *elsep, INSTRUCTION *false_branch)\n{\n\t/*\n\t *    ----------------\n\t *       cond\n\t *    ----------------\n\t * t: [Op_jmp_false f ]\n\t *    ----------------\n\t *       true_branch\n\t *\n\t *    ----------------\n\t *    [Op_jmp y]\n\t *    ----------------\n\t * f:\n\t *      false_branch\n\t *    ----------------\n\t * y: [Op_no_op]\n\t *    ----------------\n\t */\n\n\tINSTRUCTION *ip;\n\n\tif (false_branch == NULL) {\n\t\tfalse_branch = list_create(instruction(Op_no_op));\n\t\tif (elsep != NULL) {\t\t/* else { } */\n\t\t\tif (do_pretty_print)\n\t\t\t\t(void) list_prepend(false_branch, elsep);\n\t\t\telse\n\t\t\t\tbcfree(elsep);\n\t\t}\n\t} else {\n\t\t/* assert(elsep != NULL); */\n\n\t\t/* avoid a series of no_op's: if .. else if .. else if .. */\n\t\tif (false_branch->lasti->opcode != Op_no_op)\n\t\t\t(void) list_append(false_branch, instruction(Op_no_op));\n\t\tif (do_pretty_print) {\n\t\t\t(void) list_prepend(false_branch, elsep);\n\t\t\tfalse_branch->nexti->branch_end = false_branch->lasti;\n\t\t\t(void) list_prepend(false_branch, instruction(Op_exec_count));\n\t\t} else\n\t\t\tbcfree(elsep);\n\t}\n\n\t(void) list_prepend(false_branch, instruction(Op_jmp));\n\tfalse_branch->nexti->target_jmp = false_branch->lasti;\n\n\tadd_lint(cond, LINT_assign_in_cond);\n\tip = list_append(cond, instruction(Op_jmp_false));\n\tip->lasti->target_jmp = false_branch->nexti->nexti;\n\n\tif (do_pretty_print) {\n\t\t(void) list_prepend(ip, ifp);\n\t\t(void) list_append(ip, instruction(Op_exec_count));\n\t\tip->nexti->branch_if = ip->lasti;\n\t\tip->nexti->branch_else = false_branch->nexti;\n\t} else\n\t\tbcfree(ifp);\n\n\tif (true_branch != NULL)\n\t\tlist_merge(ip, true_branch);\n\treturn list_merge(ip, false_branch);\n}"
}