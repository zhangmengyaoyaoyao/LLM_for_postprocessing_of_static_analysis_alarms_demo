{
    "project": "apr",
    "tool": "CSA",
    "category": "unix.Malloc",
    "file": "memory/unix/apr_pools.c",
    "message": "Potential leak of memory pointed to by 'pool_allocator'",
    "warning_function_name": "apr_pool_create_unmanaged_ex",
    "warning_line": "if (abort_fn)",
    "warning_context": "APR_DECLARE(apr_status_t) apr_pool_create_unmanaged_ex(apr_pool_t **newpool,\n                                                  apr_abortfunc_t abort_fn,\n                                                  apr_allocator_t *allocator)\n{\n    apr_pool_t *pool;\n    apr_memnode_t *node;\n    apr_allocator_t *pool_allocator;\n\n    *newpool = NULL;\n\n    if (!apr_pools_initialized)\n        return APR_ENOPOOL;\n    if ((pool_allocator = allocator) == NULL) {\n        if ((pool_allocator = malloc(SIZEOF_ALLOCATOR_T)) == NULL) {\n            if (abort_fn)\n                abort_fn(APR_ENOMEM);\n\n            return APR_ENOMEM;\n        }\n        memset(pool_allocator, 0, SIZEOF_ALLOCATOR_T);\n        pool_allocator->max_free_index = APR_ALLOCATOR_MAX_FREE_UNLIMITED;\n    }\n    if ((node = allocator_alloc(pool_allocator,\n                                MIN_ALLOC - APR_MEMNODE_T_SIZE)) == NULL) {\n        if (abort_fn)\n            abort_fn(APR_ENOMEM);\n\n        return APR_ENOMEM;\n    }\n\n    node->next = node;\n    node->ref = &node->next;\n\n    pool = (apr_pool_t *)node->first_avail;\n    node->first_avail = pool->self_first_avail = (char *)pool + SIZEOF_POOL_T;\n\n    pool->allocator = pool_allocator;\n    pool->active = pool->self = node;\n    pool->abort_fn = abort_fn;\n    pool->child = NULL;\n    pool->cleanups = NULL;\n    pool->free_cleanups = NULL;\n    pool->pre_cleanups = NULL;\n    pool->subprocesses = NULL;\n    pool->user_data = NULL;\n    pool->tag = NULL;\n    pool->parent = NULL;\n    pool->sibling = NULL;\n    pool->ref = NULL;\n\n#ifdef NETWARE\n    pool->owner_proc = (apr_os_proc_t)getnlmhandle();\n#endif /* defined(NETWARE) */\n    if (!allocator)\n        pool_allocator->owner = pool;\n    *newpool = pool;\n\n    return APR_SUCCESS;\n}\n"
}