{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "binutils/size.c",
    "message": "Offset: [1, +oo] Size: [0, +oo] by call to `bfd_check_format_matches`.",
    "warning_function_name": "display_bfd",
    "warning_line": "if (bfd_check_format_matches (abfd, bfd_object, &matching))",
    "warning_context": "static void\ndisplay_bfd (bfd *abfd)\n{\n  char **matching;\n\n  if (bfd_check_format (abfd, bfd_archive))\n    /* An archive within an archive.  */\n    return;\n\n  if (bfd_check_format_matches (abfd, bfd_object, &matching))\n    {\n      print_sizes (abfd);\n      printf (\"\\n\");\n      return;\n    }\n\n  if (bfd_get_error () == bfd_error_file_ambiguously_recognized)\n    {\n      bfd_nonfatal (bfd_get_filename (abfd));\n      list_matching_formats (matching);\n      free (matching);\n      return_code = 3;\n      return;\n    }\n\n  if (bfd_check_format_matches (abfd, bfd_core, &matching))\n    {\n      const char *core_cmd;\n\n      print_sizes (abfd);\n      fputs (\" (core file\", stdout);\n\n      core_cmd = bfd_core_file_failing_command (abfd);\n      if (core_cmd)\n\tprintf (\" invoked as %s\", core_cmd);\n\n      puts (\")\\n\");\n      return;\n    }\n\n  bfd_nonfatal (bfd_get_filename (abfd));\n\n  if (bfd_get_error () == bfd_error_file_ambiguously_recognized)\n    {\n      list_matching_formats (matching);\n      free (matching);\n    }\n\n  return_code = 3;\n}\n"
}