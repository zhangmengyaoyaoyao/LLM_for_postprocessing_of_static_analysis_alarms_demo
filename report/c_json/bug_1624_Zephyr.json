{
    "project": "Zephyr",
    "tool": "Cppcheck",
    "category": "Uninitialized Variable",
    "file": "samples/net/sockets/big_http_download/src/big_http_download.c",
    "message": "Uninitialized variable: st",
    "warning_function_name": "main",
    "warning_line": "if (st != 0) {",
    "warning_context": "int main(void)\n{\n\tstatic struct addrinfo hints;\n\tstruct addrinfo *res;\n\tint st;\n\tchar *p;\n\tunsigned int total_bytes = 0U;\n\tint resolve_attempts = 10;\n\tbool is_tls = false;\n\n#if defined(CONFIG_NET_SOCKETS_SOCKOPT_TLS)\n\ttls_credential_add(CA_CERTIFICATE_TAG, TLS_CREDENTIAL_CA_CERTIFICATE,\n\t\t\t   ca_certificate, sizeof(ca_certificate));\n#endif\n\n\tsetbuf(stdout, NULL);\n\n\tif (strncmp(download_url, \"http://\", SSTRLEN(\"http://\")) == 0) {\n\t\tport = \"80\";\n\t\tp = download_url + SSTRLEN(\"http://\");\n#if defined(CONFIG_NET_SOCKETS_SOCKOPT_TLS)\n\t} else if (strncmp(download_url, \"https://\",\n\t\t   SSTRLEN(\"https://\")) == 0) {\n\t\tis_tls = true;\n\t\tport = \"443\";\n\t\tp = download_url + SSTRLEN(\"https://\");\n#endif /* defined(CONFIG_NET_SOCKETS_SOCKOPT_TLS) */\n\t} else {\n\t\tfatal(\"Only http: \"\n#if defined(CONFIG_NET_SOCKETS_SOCKOPT_TLS)\n\t\t      \"and https: \"\n#endif\n\t\t      \"URLs are supported\");\n\t}\n\n\t/* Parse host part */\n\thost = p;\n\twhile (*p && *p != ':' && *p != '/') {\n\t\tp++;\n\t}\n\n\t/* Store optional port part */\n\tif (*p == ':') {\n\t\t*p++ = 0;\n\t\tport = p;\n\t}\n\n\t/* Parse path part */\n\twhile (*p && *p != '/') {\n\t\tp++;\n\t}\n\n\tif (*p == '/') {\n\t\t*p++ = 0;\n\t\turi_path = p;\n\t}\n\n\tprintf(\"Preparing HTTP GET request for http%s://%s:%s/%s\\n\",\n\t\t       (is_tls ? \"s\" : \"\"), host, port, uri_path);\n\n\thints.ai_family = AF_INET;\n\thints.ai_socktype = SOCK_STREAM;\n\n\twhile (resolve_attempts--) {\n\t\tst = getaddrinfo(host, port, &hints, &res);\n\n\t\tif (st == 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tprintf(\"getaddrinfo status: %d, retrying\\n\", st);\n\t\tsleep(2);\n\t}\n\n\tif (st != 0) {\n\t\tfatal(\"Unable to resolve address\");\n\t}\n\n\tdump_addrinfo(res);\n\n\thash_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);\n\tif (!hash_info) {\n\t\tfatal(\"Unable to request hash type from mbedTLS\");\n\t}\n\n\tmbedtls_md_init(&hash_ctx);\n\tif (mbedtls_md_setup(&hash_ctx, hash_info, 0) < 0) {\n\t\tfatal(\"Can't setup mbedTLS hash engine\");\n\t}\n\n\twhile (1) {\n\t\tdownload(res, is_tls);\n\n\t\ttotal_bytes += cur_bytes;\n\t\tprintf(\"Total downloaded so far: %uMB\\n\", total_bytes / (1024 * 1024));\n\n\t\tsleep(3);\n\t}\n\n\tmbedtls_md_free(&hash_ctx);\n\n"
}