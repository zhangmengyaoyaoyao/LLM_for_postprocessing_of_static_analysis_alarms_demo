{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "NULL_DEREFERENCE",
    "Message": "pointer `h` last assigned on line 174 could be null and is dereferenced at line 178, column 12.",
    "Code_line": "  for (r = h->refs; r != NULL; r = r->next)",
    "Code_function": "add_cref (const char *name,\n\t  bfd *abfd,\n\t  asection *section,\n\t  bfd_vma value ATTRIBUTE_UNUSED)\n{\n  struct cref_hash_entry *h;\n  struct cref_ref *r;\n\n  if (! cref_initialized)\n    {\n      if (!bfd_hash_table_init (&cref_table.root, cref_hash_newfunc,\n\t\t\t\tsizeof (struct cref_hash_entry)))\n\teinfo (_(\"%X%P: bfd_hash_table_init of cref table failed: %E\\n\"));\n      cref_initialized = TRUE;\n    }\n\n  h = cref_hash_lookup (&cref_table, name, TRUE, FALSE);\n  if (h == NULL)\n    einfo (_(\"%X%P: cref_hash_lookup failed: %E\\n\"));\n\n  for (r = h->refs; r != NULL; r = r->next)\n    if (r->abfd == abfd)\n      break;\n\n  if (r == NULL)\n    {\n      r = (struct cref_ref *) bfd_hash_allocate (&cref_table.root, sizeof *r);\n      if (r == NULL)\n\teinfo (_(\"%X%P: cref alloc failed: %E\\n\"));\n      r->next = h->refs;\n      h->refs = r;\n      r->abfd = abfd;\n      r->def = FALSE;\n      r->common = FALSE;\n      r->undef = FALSE;\n    }\n\n  if (bfd_is_und_section (section))\n    r->undef = TRUE;\n  else if (bfd_is_com_section (section))\n    r->common = TRUE;\n  else\n    r->def = TRUE;\n}"
}