{
    "project": "tiff",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L2",
    "file": "tools/tiffcrop.c",
    "message": "Offset: [0, max(65, `out->tif_fieldinfo->field_bit`)] Size: 4 by call to `writeCroppedImage`.",
    "warning_function_name": "writeSelections",
    "warning_line": "if (writeCroppedImage(in, *out, image, dump,",
    "warning_context": "    {\n    case ONE_FILE_COMPOSITE: /* Regions combined into single image */\n         autoindex = 0;\n         crop_buff = seg_buffs[0].buffer;\n         if (update_output_file (out, mp, autoindex, filename, page))\n           return (1);\n         page_count = total_pages;\n         if (writeCroppedImage(in, *out, image, dump,\n                               crop->combined_width, \n                               crop->combined_length,\n                               crop_buff, *page, total_pages))\n            {\n             TIFFError(\"writeRegions\", \"Unable to write new image\");\n             return (-1);\n             }\n\t break;\n    case ONE_FILE_SEPARATED: /* Regions as separated images */\n         autoindex = 0;\n         if (update_output_file (out, mp, autoindex, filename, page))\n           return (1);\n         page_count = crop->selections * total_pages;\n         for (i = 0; i < crop->selections; i++)\n           {\n           crop_buff = seg_buffs[i].buffer;\n           if (writeCroppedImage(in, *out, image, dump,\n                                 crop->regionlist[i].width, \n                                 crop->regionlist[i].length, \n                                 crop_buff, *page, page_count))\n             {\n             TIFFError(\"writeRegions\", \"Unable to write new image\");\n             return (-1);\n             }\n\t   }\n         break;\n    case FILE_PER_IMAGE_COMPOSITE: /* Regions as composite image */\n         autoindex = 1;\n         if (update_output_file (out, mp, autoindex, filename, page))\n           return (1);\n\n         crop_buff = seg_buffs[0].buffer;\n         if (writeCroppedImage(in, *out, image, dump,\n                               crop->combined_width, \n                               crop->combined_length, \n                               crop_buff, *page, total_pages))\n           {\n           TIFFError(\"writeRegions\", \"Unable to write new image\");\n           return (-1);\n           }\n         break;\n    case FILE_PER_IMAGE_SEPARATED: /* Regions as separated images */\n         autoindex = 1;\n         page_count = crop->selections;\n         if (update_output_file (out, mp, autoindex, filename, page))\n           return (1);\n                \n         for (i = 0; i < crop->selections; i++)\n           {\n           crop_buff = seg_buffs[i].buffer;\n           /* Write the current region to the current file */\n           if (writeCroppedImage(in, *out, image, dump,\n                                 crop->regionlist[i].width, \n                                 crop->regionlist[i].length, \n                                 crop_buff, *page, page_count))\n             {\n             TIFFError(\"writeRegions\", \"Unable to write new image\");\n             return (-1);\n             }\n           }\n         break;\n    case FILE_PER_SELECTION:\n         autoindex = 1;\n\t page_count = 1;\n         for (i = 0; i < crop->selections; i++)\n           {\n           if (update_output_file (out, mp, autoindex, filename, page))\n             return (1);\n\n           crop_buff = seg_buffs[i].buffer;\n           /* Write the current region to the current file */\n           if (writeCroppedImage(in, *out, image, dump,\n                                 crop->regionlist[i].width, \n                                 crop->regionlist[i].length, \n                                 crop_buff, *page, page_count))\n             {\n             TIFFError(\"writeRegions\", \"Unable to write new image\");\n             return (-1);\n             }\n           }\n\t break;\n    default: return (1);\n    }\n\n  return (0);\n  } /* end writeRegions */\n\nstatic int\nwriteImageSections(TIFF *in, TIFF *out, struct image_data *image,\n\t\t   struct pagedef *page, struct pageseg *sections,\n\t\t   struct dump_opts * dump, unsigned char *src_buff,\n                   unsigned char **sect_buff_ptr)\n  {\n"
}