{
    "Project": "binutils",
    "Tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/elflink.c",
    "message": "Offset: [1, +oo] Size: [0, +oo].",
    "warning_function_name": "elf_create_symbuf",
    "warning_line": "if (ind == indbuf || ssymhead->st_shndx != (*ind)->st_shndx)",
    "warning_context": "static struct elf_symbuf_head *\nelf_create_symbuf (bfd_size_type symcount, Elf_Internal_Sym *isymbuf)\n{\n  Elf_Internal_Sym **ind, **indbufend, **indbuf;\n  struct elf_symbuf_symbol *ssym;\n  struct elf_symbuf_head *ssymbuf, *ssymhead;\n  bfd_size_type i, shndx_count, total_size;\n\n  indbuf = (Elf_Internal_Sym **) bfd_malloc2 (symcount, sizeof (*indbuf));\n  if (indbuf == NULL)\n    return NULL;\n\n  for (ind = indbuf, i = 0; i < symcount; i++)\n    if (isymbuf[i].st_shndx != SHN_UNDEF)\n      *ind++ = &isymbuf[i];\n  indbufend = ind;\n\n  qsort (indbuf, indbufend - indbuf, sizeof (Elf_Internal_Sym *),\n\t elf_sort_elf_symbol);\n\n  shndx_count = 0;\n  if (indbufend > indbuf)\n    for (ind = indbuf, shndx_count++; ind < indbufend - 1; ind++)\n      if (ind[0]->st_shndx != ind[1]->st_shndx)\n\tshndx_count++;\n\n  total_size = ((shndx_count + 1) * sizeof (*ssymbuf)\n\t\t+ (indbufend - indbuf) * sizeof (*ssym));\n  ssymbuf = (struct elf_symbuf_head *) bfd_malloc (total_size);\n  if (ssymbuf == NULL)\n    {\n      free (indbuf);\n      return NULL;\n    }\n\n  ssym = (struct elf_symbuf_symbol *) (ssymbuf + shndx_count + 1);\n  ssymbuf->ssym = NULL;\n  ssymbuf->count = shndx_count;\n  ssymbuf->st_shndx = 0;\n  for (ssymhead = ssymbuf, ind = indbuf; ind < indbufend; ssym++, ind++)\n    {\n      if (ind == indbuf || ssymhead->st_shndx != (*ind)->st_shndx)\n\t{\n\t  ssymhead++;\n\t  ssymhead->ssym = ssym;\n\t  ssymhead->count = 0;\n\t  ssymhead->st_shndx = (*ind)->st_shndx;\n\t}\n      ssym->st_name = (*ind)->st_name;\n      ssym->st_info = (*ind)->st_info;\n      ssym->st_other = (*ind)->st_other;\n      ssymhead->count++;\n    }\n  BFD_ASSERT ((bfd_size_type) (ssymhead - ssymbuf) == shndx_count\n\t      && (((bfd_hostptr_t) ssym - (bfd_hostptr_t) ssymbuf)\n\t\t  == total_size));\n\n  free (indbuf);\n  return ssymbuf;\n}\n"
}