{
    "project": "binutils",
    "tool": "Infer",
    "category": "BUFFER_OVERRUN_L3",
    "file": "bfd/bfd.c",
    "message": "Offset added: [-1, +oo] Size: [0, +oo].",
    "warning_function_name": "bfd_demangle",
    "warning_line": "memcpy (final, pre, pre_len);",
    "warning_context": "char *\nbfd_demangle (bfd *abfd, const char *name, int options)\n{\n  char *res, *alloc;\n  const char *pre, *suf;\n  size_t pre_len;\n  bfd_boolean skip_lead;\n\n  skip_lead = (abfd != NULL\n\t       && *name != '\\0'\n\t       && bfd_get_symbol_leading_char (abfd) == *name);\n  if (skip_lead)\n    ++name;\n\n  /* This is a hack for better error reporting on XCOFF, PowerPC64-ELF\n     or the MS PE format.  These formats have a number of leading '.'s\n     on at least some symbols, so we remove all dots to avoid\n     confusing the demangler.  */\n  pre = name;\n  while (*name == '.' || *name == '$')\n    ++name;\n  pre_len = name - pre;\n\n  /* Strip off @plt and suchlike too.  */\n  alloc = NULL;\n  suf = strchr (name, '@');\n  if (suf != NULL)\n    {\n      alloc = (char *) bfd_malloc (suf - name + 1);\n      if (alloc == NULL)\n\treturn NULL;\n      memcpy (alloc, name, suf - name);\n      alloc[suf - name] = '\\0';\n      name = alloc;\n    }\n\n  res = cplus_demangle (name, options);\n\n  if (alloc != NULL)\n    free (alloc);\n\n  if (res == NULL)\n    {\n      if (skip_lead)\n\t{\n\t  size_t len = strlen (pre) + 1;\n\t  alloc = (char *) bfd_malloc (len);\n\t  if (alloc == NULL)\n\t    return NULL;\n\t  memcpy (alloc, pre, len);\n\t  return alloc;\n\t}\n      return NULL;\n    }\n\n  /* Put back any prefix or suffix.  */\n  if (pre_len != 0 || suf != NULL)\n    {\n      size_t len;\n      size_t suf_len;\n      char *final;\n\n      len = strlen (res);\n      if (suf == NULL)\n\tsuf = res + len;\n      suf_len = strlen (suf) + 1;\n      final = (char *) bfd_malloc (pre_len + len + suf_len);\n      if (final != NULL)\n\t{\n\t  memcpy (final, pre, pre_len);\n\t  memcpy (final + pre_len, res, len);\n\t  memcpy (final + pre_len + len, suf, suf_len);\n\t}\n      free (res);\n      res = final;\n    }\n\n  return res;\n}\n"
}