{
    "project": "tiff",
    "tool": "Infer",
    "category": "UNINITIALIZED_VALUE",
    "file": "libtiff/tif_strip.c",
    "message": "The value read from ycbcrsubsampling[_] was never initialized.",
    "warning_function_name": "TIFFVStripSize",
    "warning_line": "samplingarea = ycbcrsubsampling[0]*ycbcrsubsampling[1];",
    "warning_context": "tsize_t\nTIFFVStripSize(TIFF* tif, uint32 nrows)\n{\n\tTIFFDirectory *td = &tif->tif_dir;\n\tuint32 stripsize;\n\n\tif (nrows == (uint32) -1)\n\t\tnrows = td->td_imagelength;\n\tif (td->td_planarconfig == PLANARCONFIG_CONTIG &&\n\t    td->td_photometric == PHOTOMETRIC_YCBCR &&\n\t    !isUpSampled(tif)) {\n\t\t/*\n\t\t * Packed YCbCr data contain one Cb+Cr for every\n\t\t * HorizontalSampling*VerticalSampling Y values.\n\t\t * Must also roundup width and height when calculating\n\t\t * since images that are not a multiple of the\n\t\t * horizontal/vertical subsampling area include\n\t\t * YCbCr data for the extended image.\n\t\t */\n\t\tuint16 ycbcrsubsampling[2];\n\t\tuint32 w, scanline, samplingarea;\n\n\t\tTIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING,\n\t\t\t\t      ycbcrsubsampling + 0,\n\t\t\t\t      ycbcrsubsampling + 1);\n\n\t\tsamplingarea = ycbcrsubsampling[0]*ycbcrsubsampling[1];\n\t\tif (samplingarea == 0) {\n\t\t\tTIFFErrorExt(tif->tif_clientdata, tif->tif_name,\n\t\t\t\t     \"Invalid YCbCr subsampling\");\n\t\t\treturn 0;\n\t\t}\n\n\t\tw = TIFFroundup(td->td_imagewidth, ycbcrsubsampling[0]);\n\t\tscanline = TIFFhowmany8(multiply(tif, w, td->td_bitspersample,\n\t\t\t\t\t\t \"TIFFVStripSize\"));\n\t\tnrows = TIFFroundup(nrows, ycbcrsubsampling[1]);\n\t\t/* NB: don't need TIFFhowmany here 'cuz everything is rounded */\n\t\tscanline = multiply(tif, nrows, scanline, \"TIFFVStripSize\");\n\t\t/* a zero anywhere in here means overflow, must return zero */\n\t\tif (scanline > 0) {\n\t\t\tuint32 extra =\n\t\t\t    multiply(tif, 2, scanline / samplingarea,\n\t\t\t\t     \"TIFFVStripSize\");\n\t\t\tif (extra > 0)\n\t\t\t\tstripsize = summarize(tif, scanline, extra,\n\t\t\t\t\t\t      \"TIFFVStripSize\");\n\t\t\telse\n\t\t\t\tstripsize = 0;\n\t\t} else\n\t\t\tstripsize = 0;\n\t} else\n\t\tstripsize = multiply(tif, nrows, TIFFScanlineSize(tif),\n\t\t\t\t     \"TIFFVStripSize\");\n\t/* Because tsize_t is signed, we might have conversion overflow */\n\tif (((tsize_t) stripsize) < 0) {\n\t\tTIFFErrorExt(tif->tif_clientdata, tif->tif_name, \"Integer overflow in %s\", \"TIFFVStripSize\");\n\t\tstripsize = 0;\n\t}\n\treturn (tsize_t) stripsize;\n}\n"
}