{
    "Project": "binutils",
    "Tool": "Infer",
    "Bug Type": "UNINITIALIZED_VALUE",
    "Message": "The value read from last[_] was never initialized.",
    "Code_line": "\t\t      && last[0] != 'L'))",
    "Code_function": "putop (const char *in_template, int sizeflag)\n{\n  const char *p;\n  int alt = 0;\n  int cond = 1;\n  unsigned int l = 0, len = 1;\n  char last[4];\n\n#define SAVE_LAST(c)\t\t\t\\\n  if (l < len && l < sizeof (last))\t\\\n    last[l++] = c;\t\t\t\\\n  else\t\t\t\t\t\\\n    abort ();\n\n  for (p = in_template; *p; p++)\n    {\n      switch (*p)\n\t{\n\tdefault:\n\t  *obufp++ = *p;\n\t  break;\n\tcase '%':\n\t  len++;\n\t  break;\n\tcase '!':\n\t  cond = 0;\n\t  break;\n\tcase '{':\n\t  alt = 0;\n\t  if (intel_syntax)\n\t    {\n\t      while (*++p != '|')\n\t\tif (*p == '}' || *p == '\\0')\n\t\t  abort ();\n\t    }\n\t  /* Fall through.  */\n\tcase 'I':\n\t  alt = 1;\n\t  continue;\n\tcase '|':\n\t  while (*++p != '}')\n\t    {\n\t      if (*p == '\\0')\n\t\tabort ();\n\t    }\n\t  break;\n\tcase '}':\n\t  break;\n\tcase 'A':\n\t  if (intel_syntax)\n\t    break;\n\t  if (modrm.mod != 3 || (sizeflag & SUFFIX_ALWAYS))\n\t    *obufp++ = 'b';\n\t  break;\n\tcase 'B':\n\t  if (l == 0 && len == 1)\n\t    {\ncase_B:\n\t      if (intel_syntax)\n\t\tbreak;\n\t      if (sizeflag & SUFFIX_ALWAYS)\n\t\t*obufp++ = 'b';\n\t    }\n\t  else\n\t    {\n\t      if (l != 1\n\t\t  || len != 2\n\t\t  || last[0] != 'L')\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\n\t      if (address_mode == mode_64bit\n\t\t  && !(prefixes & PREFIX_ADDR))\n\t\t{\n\t\t  *obufp++ = 'a';\n\t\t  *obufp++ = 'b';\n\t\t  *obufp++ = 's';\n\t\t}\n\n\t      goto case_B;\n\t    }\n\t  break;\n\tcase 'C':\n\t  if (intel_syntax && !alt)\n\t    break;\n\t  if ((prefixes & PREFIX_DATA) || (sizeflag & SUFFIX_ALWAYS))\n\t    {\n\t      if (sizeflag & DFLAG)\n\t\t*obufp++ = intel_syntax ? 'd' : 'l';\n\t      else\n\t\t*obufp++ = intel_syntax ? 'w' : 's';\n\t      used_prefixes |= (prefixes & PREFIX_DATA);\n\t    }\n\t  break;\n\tcase 'D':\n\t  if (intel_syntax || !(sizeflag & SUFFIX_ALWAYS))\n\t    break;\n\t  USED_REX (REX_W);\n\t  if (modrm.mod == 3)\n\t    {\n\t      if (rex & REX_W)\n\t\t*obufp++ = 'q';\n\t      else\n\t\t{\n\t\t  if (sizeflag & DFLAG)\n\t\t    *obufp++ = intel_syntax ? 'd' : 'l';\n\t\t  else\n\t\t    *obufp++ = 'w';\n\t\t  used_prefixes |= (prefixes & PREFIX_DATA);\n\t\t}\n\t    }\n\t  else\n\t    *obufp++ = 'w';\n\t  break;\n\tcase 'E':\t\t/* For jcxz/jecxz */\n\t  if (address_mode == mode_64bit)\n\t    {\n\t      if (sizeflag & AFLAG)\n\t\t*obufp++ = 'r';\n\t      else\n\t\t*obufp++ = 'e';\n\t    }\n\t  else\n\t    if (sizeflag & AFLAG)\n\t      *obufp++ = 'e';\n\t  used_prefixes |= (prefixes & PREFIX_ADDR);\n\t  break;\n\tcase 'F':\n\t  if (intel_syntax)\n\t    break;\n\t  if ((prefixes & PREFIX_ADDR) || (sizeflag & SUFFIX_ALWAYS))\n\t    {\n\t      if (sizeflag & AFLAG)\n\t\t*obufp++ = address_mode == mode_64bit ? 'q' : 'l';\n\t      else\n\t\t*obufp++ = address_mode == mode_64bit ? 'l' : 'w';\n\t      used_prefixes |= (prefixes & PREFIX_ADDR);\n\t    }\n\t  break;\n\tcase 'G':\n\t  if (intel_syntax || (obufp[-1] != 's' && !(sizeflag & SUFFIX_ALWAYS)))\n\t    break;\n\t  if ((rex & REX_W) || (sizeflag & DFLAG))\n\t    *obufp++ = 'l';\n\t  else\n\t    *obufp++ = 'w';\n\t  if (!(rex & REX_W))\n\t    used_prefixes |= (prefixes & PREFIX_DATA);\n\t  break;\n\tcase 'H':\n\t  if (intel_syntax)\n\t    break;\n\t  if ((prefixes & (PREFIX_CS | PREFIX_DS)) == PREFIX_CS\n\t      || (prefixes & (PREFIX_CS | PREFIX_DS)) == PREFIX_DS)\n\t    {\n\t      used_prefixes |= prefixes & (PREFIX_CS | PREFIX_DS);\n\t      *obufp++ = ',';\n\t      *obufp++ = 'p';\n\t      if (prefixes & PREFIX_DS)\n\t\t*obufp++ = 't';\n\t      else\n\t\t*obufp++ = 'n';\n\t    }\n\t  break;\n\tcase 'J':\n\t  if (intel_syntax)\n\t    break;\n\t  *obufp++ = 'l';\n\t  break;\n\tcase 'K':\n\t  USED_REX (REX_W);\n\t  if (rex & REX_W)\n\t    *obufp++ = 'q';\n\t  else\n\t    *obufp++ = 'd';\n\t  break;\n\tcase 'Z':\n\t  if (intel_syntax)\n\t    break;\n\t  if (address_mode == mode_64bit && (sizeflag & SUFFIX_ALWAYS))\n\t    {\n\t      *obufp++ = 'q';\n\t      break;\n\t    }\n\t  /* Fall through.  */\n\t  goto case_L;\n\tcase 'L':\n\t  if (l != 0 || len != 1)\n\t    {\n\t      SAVE_LAST (*p);\n\t      break;\n\t    }\ncase_L:\n\t  if (intel_syntax)\n\t    break;\n\t  if (sizeflag & SUFFIX_ALWAYS)\n\t    *obufp++ = 'l';\n\t  break;\n\tcase 'M':\n\t  if (intel_mnemonic != cond)\n\t    *obufp++ = 'r';\n\t  break;\n\tcase 'N':\n\t  if ((prefixes & PREFIX_FWAIT) == 0)\n\t    *obufp++ = 'n';\n\t  else\n\t    used_prefixes |= PREFIX_FWAIT;\n\t  break;\n\tcase 'O':\n\t  USED_REX (REX_W);\n\t  if (rex & REX_W)\n\t    *obufp++ = 'o';\n\t  else if (intel_syntax && (sizeflag & DFLAG))\n\t    *obufp++ = 'q';\n\t  else\n\t    *obufp++ = 'd';\n\t  if (!(rex & REX_W))\n\t    used_prefixes |= (prefixes & PREFIX_DATA);\n\t  break;\n\tcase 'T':\n\t  if (!intel_syntax\n\t      && address_mode == mode_64bit\n\t      && ((sizeflag & DFLAG) || (rex & REX_W)))\n\t    {\n\t      *obufp++ = 'q';\n\t      break;\n\t    }\n\t  /* Fall through.  */\n\t  goto case_P;\n\tcase 'P':\n\t  if (l == 0 && len == 1)\n\t    {\ncase_P:\n\t      if (intel_syntax)\n\t\t{\n\t\t  if ((rex & REX_W) == 0\n\t\t      && (prefixes & PREFIX_DATA))\n\t\t    {\n\t\t      if ((sizeflag & DFLAG) == 0)\n\t\t\t*obufp++ = 'w';\n\t\t      used_prefixes |= (prefixes & PREFIX_DATA);\n\t\t    }\n\t\t  break;\n\t\t}\n\t      if ((prefixes & PREFIX_DATA)\n\t\t  || (rex & REX_W)\n\t\t  || (sizeflag & SUFFIX_ALWAYS))\n\t\t{\n\t\t  USED_REX (REX_W);\n\t\t  if (rex & REX_W)\n\t\t    *obufp++ = 'q';\n\t\t  else\n\t\t    {\n\t\t      if (sizeflag & DFLAG)\n\t\t\t*obufp++ = 'l';\n\t\t      else\n\t\t\t*obufp++ = 'w';\n\t\t      used_prefixes |= (prefixes & PREFIX_DATA);\n\t\t    }\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      if (l != 1 || len != 2 || last[0] != 'L')\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\n\t      if ((prefixes & PREFIX_DATA)\n\t\t  || (rex & REX_W)\n\t\t  || (sizeflag & SUFFIX_ALWAYS))\n\t\t{\n\t\t  USED_REX (REX_W);\n\t\t  if (rex & REX_W)\n\t\t    *obufp++ = 'q';\n\t\t  else\n\t\t    {\n\t\t      if (sizeflag & DFLAG)\n\t\t\t*obufp++ = intel_syntax ? 'd' : 'l';\n\t\t      else\n\t\t\t*obufp++ = 'w';\n\t\t      used_prefixes |= (prefixes & PREFIX_DATA);\n\t\t    }\n\t\t}\n\t    }\n\t  break;\n\tcase 'U':\n\t  if (intel_syntax)\n\t    break;\n\t  if (address_mode == mode_64bit\n\t      && ((sizeflag & DFLAG) || (rex & REX_W)))\n\t    {\n\t      if (modrm.mod != 3 || (sizeflag & SUFFIX_ALWAYS))\n\t\t*obufp++ = 'q';\n\t      break;\n\t    }\n\t  /* Fall through.  */\n\t  goto case_Q;\n\tcase 'Q':\n\t  if (l == 0 && len == 1)\n\t    {\ncase_Q:\n\t      if (intel_syntax && !alt)\n\t\tbreak;\n\t      USED_REX (REX_W);\n\t      if (modrm.mod != 3 || (sizeflag & SUFFIX_ALWAYS))\n\t\t{\n\t\t  if (rex & REX_W)\n\t\t    *obufp++ = 'q';\n\t\t  else\n\t\t    {\n\t\t      if (sizeflag & DFLAG)\n\t\t\t*obufp++ = intel_syntax ? 'd' : 'l';\n\t\t      else\n\t\t\t*obufp++ = 'w';\n\t\t      used_prefixes |= (prefixes & PREFIX_DATA);\n\t\t    }\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      if (l != 1 || len != 2 || last[0] != 'L')\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\t      if (intel_syntax\n\t\t  || (modrm.mod == 3 && !(sizeflag & SUFFIX_ALWAYS)))\n\t\tbreak;\n\t      if ((rex & REX_W))\n\t\t{\n\t\t  USED_REX (REX_W);\n\t\t  *obufp++ = 'q';\n\t\t}\n\t      else\n\t\t*obufp++ = 'l';\n\t    }\n\t  break;\n\tcase 'R':\n\t  USED_REX (REX_W);\n\t  if (rex & REX_W)\n\t    *obufp++ = 'q';\n\t  else if (sizeflag & DFLAG)\n\t    {\n\t      if (intel_syntax)\n\t\t  *obufp++ = 'd';\n\t      else\n\t\t  *obufp++ = 'l';\n\t    }\n\t  else\n\t    *obufp++ = 'w';\n\t  if (intel_syntax && !p[1]\n\t      && ((rex & REX_W) || (sizeflag & DFLAG)))\n\t    *obufp++ = 'e';\n\t  if (!(rex & REX_W))\n\t    used_prefixes |= (prefixes & PREFIX_DATA);\n\t  break;\n\tcase 'V':\n\t  if (l == 0 && len == 1)\n\t    {\n\t      if (intel_syntax)\n\t\tbreak;\n\t      if (address_mode == mode_64bit\n\t\t  && ((sizeflag & DFLAG) || (rex & REX_W)))\n\t\t{\n\t\t  if (sizeflag & SUFFIX_ALWAYS)\n\t\t    *obufp++ = 'q';\n\t\t  break;\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      if (l != 1\n\t\t  || len != 2\n\t\t  || last[0] != 'L')\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\n\t      if (rex & REX_W)\n\t\t{\n\t\t  *obufp++ = 'a';\n\t\t  *obufp++ = 'b';\n\t\t  *obufp++ = 's';\n\t\t}\n\t    }\n\t  /* Fall through.  */\n\t  goto case_S;\n\tcase 'S':\n\t  if (l == 0 && len == 1)\n\t    {\ncase_S:\n\t      if (intel_syntax)\n\t\tbreak;\n\t      if (sizeflag & SUFFIX_ALWAYS)\n\t\t{\n\t\t  if (rex & REX_W)\n\t\t    *obufp++ = 'q';\n\t\t  else\n\t\t    {\n\t\t      if (sizeflag & DFLAG)\n\t\t\t*obufp++ = 'l';\n\t\t      else\n\t\t\t*obufp++ = 'w';\n\t\t      used_prefixes |= (prefixes & PREFIX_DATA);\n\t\t    }\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      if (l != 1\n\t\t  || len != 2\n\t\t  || last[0] != 'L')\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\n\t      if (address_mode == mode_64bit\n\t\t  && !(prefixes & PREFIX_ADDR))\n\t\t{\n\t\t  *obufp++ = 'a';\n\t\t  *obufp++ = 'b';\n\t\t  *obufp++ = 's';\n\t\t}\n\n\t      goto case_S;\n\t    }\n\t  break;\n\tcase 'X':\n\t  if (l != 0 || len != 1)\n\t    {\n\t      SAVE_LAST (*p);\n\t      break;\n\t    }\n\t  if (need_vex && vex.prefix)\n\t    {\n\t      if (vex.prefix == DATA_PREFIX_OPCODE)\n\t\t*obufp++ = 'd';\n\t      else\n\t\t*obufp++ = 's';\n\t    }\n\t  else\n\t    {\n\t      if (prefixes & PREFIX_DATA)\n\t\t*obufp++ = 'd';\n\t      else\n\t\t*obufp++ = 's';\n\t      used_prefixes |= (prefixes & PREFIX_DATA);\n\t    }\n\t  break;\n\tcase 'Y':\n\t  if (l == 0 && len == 1)\n\t    {\n\t      if (intel_syntax || !(sizeflag & SUFFIX_ALWAYS))\n\t\tbreak;\n\t      if (rex & REX_W)\n\t\t{\n\t\t  USED_REX (REX_W);\n\t\t  *obufp++ = 'q';\n\t\t}\n\t      break;\n\t    }\n\t  else\n\t    {\n\t      if (l != 1 || len != 2 || last[0] != 'X')\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\t      if (!need_vex)\n\t\tabort ();\n\t      if (intel_syntax\n\t\t  || (modrm.mod == 3 && !(sizeflag & SUFFIX_ALWAYS)))\n\t\tbreak;\n\t      switch (vex.length)\n\t\t{\n\t\tcase 128:\n\t\t  *obufp++ = 'x';\n\t\t  break;\n\t\tcase 256:\n\t\t  *obufp++ = 'y';\n\t\t  break;\n\t\tdefault:\n\t\t  abort ();\n\t\t}\n\t    }\n\t  break;\n\tcase 'W':\n\t  if (l == 0 && len == 1)\n\t    {\n\t      /* operand size flag for cwtl, cbtw */\n\t      USED_REX (REX_W);\n\t      if (rex & REX_W)\n\t\t{\n\t\t  if (intel_syntax)\n\t\t    *obufp++ = 'd';\n\t\t  else\n\t\t    *obufp++ = 'l';\n\t\t}\n\t      else if (sizeflag & DFLAG)\n\t\t*obufp++ = 'w';\n\t      else\n\t\t*obufp++ = 'b';\n\t      if (!(rex & REX_W))\n\t\tused_prefixes |= (prefixes & PREFIX_DATA);\n\t    }\n\t  else\n\t    {\n\t      if (l != 1\n\t\t  || len != 2\n\t\t  || (last[0] != 'X'\n\t\t      && last[0] != 'L'))\n\t\t{\n\t\t  SAVE_LAST (*p);\n\t\t  break;\n\t\t}\n\t      if (!need_vex)\n\t\tabort ();\n\t      if (last[0] == 'X')\n\t\t*obufp++ = vex.w ? 'd': 's';\n\t      else\n\t\t*obufp++ = vex.w ? 'q': 'd';\n\t    }\n\t  break;\n\t}\n      alt = 0;\n    }\n  *obufp = 0;\n  mnemonicendp = obufp;\n  return 0;\n}"
}