category,vtype,final_label,priority,rank,project,no,warning_line,warning_method
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1,"catch (Exception e)
","public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
String resolved = resolver.getResolvedEntity(publicId, systemId);
if (resolved != null) {
String badFilePrefix = ""file://"";
String correctFilePrefix = ""file:///"";
if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
}
try {
InputSource iSource = new InputSource(resolved);
iSource.setPublicId(publicId);
URL url = new URL(resolved);
InputStream iStream = url.openStream();
iSource.setByteStream(iStream);
return iSource;
} catch (Exception e) {
log.debug(""Failed to create InputSource for "" + resolved + "" ("" + e.toString() + "")"");
return null;
}
}
return null;
}"
I18N,DM_DEFAULT_ENCODING,TP,1,19,configuration,3,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNodeBuilder.FORMAT) {
out.println(padding + ""<date>"" + PListNodeBuilder.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
for (Object o : (List<?>) value) {
printValue(out, indentLevel + 1, o);
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
@SuppressWarnings(""unchecked"")
HierarchicalConfiguration<ImmutableNode> config = (HierarchicalConfiguration<ImmutableNode>) value;
printNode(out, indentLevel, config.getNodeModel().getNodeHandler().getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,TP,3,20,configuration,9,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,TP,3,20,configuration,11,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,12,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,14,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,TP,3,19,configuration,15,"catch (Exception e)
","@Override
public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
}
}
}
return path;
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,18,"value = array.length == 0 ? null : new Byte(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,3,15,configuration,19,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return empty;
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,21,private XMLBuilderParametersImpl currentXMLParameters;,private XMLBuilderParametersImpl currentXMLParameters;
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,22,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,23,"value = array.length == 0 ? null : new Integer(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,24,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,25,"catch (final Exception e)
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,3,15,configuration,26,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return found;
}"
CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,2,12,configuration,28,private ResultSet resultSet;,private ResultSet resultSet;
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,30,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,TP,3,20,configuration,31,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,TP,3,20,configuration,32,"try (BufferedReader r = new BufferedReader(in)) {
String str = null;
StringBuilder sb = new StringBuilder();
while((str =r.readLine())!=null)
{
sb.append(str);
}
return sb.toString();
} catch(IOException e) {
throw new RuntimeException(e);
","private String readFully(Reader in) {
try (BufferedReader r = new BufferedReader(in)) {
String str = null;
StringBuilder sb = new StringBuilder();
while ((str = r.readLine()) != null) {
sb.append(str);
}
return sb.toString();
} catch (IOException e) {
throw new RuntimeException(e);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,3,15,configuration,33,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return result;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,37,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,TP,3,20,configuration,38,"return new Float(n.floatValue());
","public static Float toFloat(final Object value) throws ConversionException {
final Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
}
return new Float(n.floatValue());
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,TP,3,19,configuration,39,"catch (Exception ex)
","protected void performReloadCheck() {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,41,private final ConfigurationInterpolator localSubst;,private final ConfigurationInterpolator localSubst;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,42,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,TP,1,14,configuration,43,private final ConversionHandler dataConversionHandler;,private final ConversionHandler dataConversionHandler;
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,45,"getConfiguration().addProperty(name, new Long(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,3,15,configuration,48,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,49,"return sourceURL != null ? sourceURL.toExternalForm()
","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,TP,1,16,configuration,50,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,51,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,52,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,53,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,54,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,55,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
PERFORMANCE,URF_UNREAD_FIELD,TP,3,20,configuration,56,private final HttpFileSystemConfigBuilder httpBuilder;,private final HttpFileSystemConfigBuilder httpBuilder;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,57,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
CORRECTNESS,NP_GUARANTEED_DEREF,TP,2,8,configuration,58,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,59,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,61,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,3,15,configuration,62,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,64,"String methodName = ""set"" + key.substring(0,1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,65,"getConfiguration().addProperty(name, new Integer(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,69,"catch (final Exception e)
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,TP,2,16,configuration,70,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,73,"catch (final Exception ex)
","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,TP,3,20,configuration,76,private final WebdavFileSystemConfigBuilder webdavBuilder;,private final WebdavFileSystemConfigBuilder webdavBuilder;
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,77,"getConfiguration().addProperty(name, new Byte(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,TP,3,20,configuration,79,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","@Override
public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,83,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,84,"} catch (final Exception e) {
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
}
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
return value;
}
if (!(value instanceof String)) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
try {
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME_JAKARTA).getConstructor(String.class);
return ctor.newInstance(value);
} catch (ClassNotFoundException e) {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
}
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,85,"Token token = null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,86,"getConfiguration().addProperty(name, new Short(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,87,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,88,"catch (final Exception e)
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,89,"catch (final Exception ex)
","private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,97,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,99,"file = new File(appendPath(basePath, fileName));
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,TP,2,16,configuration,100,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,101,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,103,public PrintStream debugStream = System.out;,public PrintStream debugStream = System.out;
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,106,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
I18N,DM_DEFAULT_ENCODING,TP,1,19,configuration,107,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,2,12,configuration,110,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,111,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,114,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,115,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,116,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,119,"catch (final Exception ex)
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,120,"file = new File(appendPath(basePath, fileName));
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,124,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,126,"Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
","final public Node Property() throws ParseException {
Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
}"
Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,1,6,configuration,130,"synchronized (listeners)
","private boolean checkDetailEvents(int limit) {
synchronized (listeners) {
return detailEvents > limit;
}
}"
MALICIOUS_CODE,EI_EXPOSE_REP,TP,2,18,configuration,131,"return locations;
","public Resource[] getLocations() {
return locations;
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,133,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,TP,3,20,configuration,134,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,136,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,137,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
MALICIOUS_CODE,EI_EXPOSE_REP2,TP,2,18,configuration,138,"this.configurations = configurations;
","public void setConfigurations(Configuration[] configurations) {
this.configurations = configurations;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,139,"catch (final Exception e)
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
}
if (!(value instanceof String)) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,140,"value = array.length == 0 ? null : new Short(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,143,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,TP,2,16,configuration,144,"throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,145,"if (locator.getEncoding() != null)
","@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
if (locator.getEncoding() != null) {
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
writer.println(""<?xml version=\""1.0\""?>"");
}
writer.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
writer.println(""<plist version=\""1.0\"">"");
printNode(writer, 1, getNodeModel().getNodeHandler().getRootNode());
writer.println(""</plist>"");
writer.flush();
}"
MALICIOUS_CODE,EI_EXPOSE_REP,TP,2,18,configuration,147,"return configurations;
","public Configuration[] getConfigurations() {
return configurations;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,TP,3,20,configuration,148,"hc = new BaseHierarchicalConfiguration((HierarchicalConfiguration) conf);
","public static HierarchicalConfiguration convertToHierarchical(Configuration conf, ExpressionEngine engine) {
if (conf == null) {
return null;
}
if (conf instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hc;
if (conf instanceof Reloadable) {
Object lock = ((Reloadable) conf).getReloadLock();
synchronized (lock) {
hc = new BaseHierarchicalConfiguration((HierarchicalConfiguration) conf);
}
} else {
hc = (HierarchicalConfiguration) conf;
}
if (engine != null) {
hc.setExpressionEngine(engine);
}
return hc;
} else {
BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();
if (engine != null) {
hc.setExpressionEngine(engine);
}
hc.append(conf);
return hc;
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,149,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,151,"switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,153,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,TP,3,20,configuration,156,"getConfiguration().addProperty(name, new Float(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,3,15,configuration,159,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,161,"file = new File(appendPath(basePath, fileName));
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,162,"file = new File(appendPath(basePath, fileName));
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,TP,2,13,configuration,164,"return count % 2 == 1;
","private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,165,"catch (Exception e)
","public boolean reload(boolean checkReload) {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
if (checkReload) {
return false;
}
} finally {
exitNoReload();
}
}
}
return true;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,TP,3,20,configuration,167,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,168,"token = jj_consume_token(DATA);
return filterData(token.image);
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
return filterData(token.image);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,169,"private Map<String, Configuration> namedConfigurations;","private Map<String, Configuration> namedConfigurations;"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,170,private final Configuration configuration;,private final Configuration configuration;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,171,"catch (final Exception ex)
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,2,18,configuration,172,"initProperty(bean, propName, properties.get(propName));
","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,174,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,175,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,178,private final EventListener<ConfigurationEvent> changeListener;,private final EventListener<ConfigurationEvent> changeListener;
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,180,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,181,"getConfiguration().addProperty(name, new Character(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,186,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,3,20,configuration,187,private CombinedBuilderParametersImpl currentParameters;,private CombinedBuilderParametersImpl currentParameters;
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,188,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,2,17,configuration,189,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,191,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,192,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,193,"catch (final Exception e)
","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,195,private ExpressionEngine conversionExpressionEngine;,private ExpressionEngine conversionExpressionEngine;
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,196,"staticCatalog = catalog;
","public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,197,private List<ConfigData> configurations = new ArrayList<ConfigData>();,private List<ConfigData> configurations = new ArrayList<ConfigData>();
PERFORMANCE,DM_FP_NUMBER_CTOR,TP,3,20,configuration,198,"value = array.length == 0 ? null : new Double(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,199,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,200,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,202,private FileLocator locator;,private FileLocator locator;
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,203,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,204,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,205,"if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 9;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (kind > 20)
kind = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (kind > 18)
kind = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && kind > 18)
kind = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && kind > 20)
kind = 20;
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
case 5:
if ((jjbitVec0[i2] & l2) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,208,"file = new File(appendPath(basePath, fileName));
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,214,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,215,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}"
CORRECTNESS,UR_UNINIT_READ,FP,3,6,configuration,217,"if (layout == null)
","public PropertiesConfiguration(File file) throws ConfigurationException {
super(file);
if (layout == null) {
layout = createLayout();
}
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,TP,2,13,configuration,221,"return bsCount % 2 == 1;
","private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,TP,2,16,configuration,222,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,1,6,configuration,223,"synchronized (listeners)
","public void setDetailEvents(boolean enable) {
synchronized (listeners) {
if (enable) {
detailEvents++;
} else {
detailEvents--;
}
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,TP,3,20,configuration,225,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
Multithreaded correctness,WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL,FP,2,14,configuration,227,"synchronized (getClass())
","private void registerBeanFactory() {
synchronized (getClass()) {
if (!BeanHelper.registeredFactoryNames().contains(CONFIG_BEAN_FACTORY_NAME)) {
BeanHelper.registerBeanFactory(CONFIG_BEAN_FACTORY_NAME, new ConfigurationBeanFactory());
}
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,228,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,TP,3,19,configuration,230,"catch (Exception ex)
","protected void performReloadCheck() {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,TP,3,20,configuration,231,"value = array.length == 0 ? null : new Float(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,TP,3,20,configuration,232,"getConfiguration().addProperty(name, new Double(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,234,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,237,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,TP,3,20,configuration,240,"return new Double(n.doubleValue());
","public static Double toDouble(final Object value) throws ConversionException {
final Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
}
return new Double(n.doubleValue());
}"
MALICIOUS_CODE,EI_EXPOSE_REP2,TP,2,18,configuration,243,"this.locations = locations;
","public void setLocations(Resource[] locations) {
this.locations = locations;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,TP,3,20,configuration,245,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,TP,3,20,configuration,246,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,247,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
PERFORMANCE,DM_NUMBER_CTOR,TP,2,18,configuration,248,"value = array.length == 0 ? null : new Long(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,1,14,configuration,251,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,620,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,622,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {
Collection<ImmutableNode> subNodes = new LinkedList<ImmutableNode>(refHandler.getChildren(node));
Iterator<ImmutableNode> children = subNodes.iterator();
ImmutableNode sibling1;
ImmutableNode nd = null;
while (children.hasNext()) {
do {
sibling1 = nd;
nd = children.next();
} while (refHandler.getReference(nd) != null && children.hasNext());
if (refHandler.getReference(nd) == null) {
List<ImmutableNode> newNodes = new LinkedList<ImmutableNode>();
newNodes.add(nd);
while (children.hasNext()) {
nd = children.next();
if (refHandler.getReference(nd) == null) {
newNodes.add(nd);
} else {
break;
}
}
ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
for (ImmutableNode insertNode : newNodes) {
if (refHandler.getReference(insertNode) == null) {
insert(insertNode, node, sibling1, sibling2, refHandler);
sibling1 = insertNode;
}
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,623,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,624,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,625,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,626,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,627,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,628,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,629,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,630,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,631,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,632,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,634,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,636,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,637,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,638,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,640,private ReloadingController reloadingController;,private ReloadingController reloadingController;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,641,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,642,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,643,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,645,"{
@Override
public String lookup(String key)
{
Object value = ip.resolve(key);
return (value != null) ? value.toString() : null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,646,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,649,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,650,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,651,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,652,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,653,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,654,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,655,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,656,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,657,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,658,"return (src != null) ? src.clone() : null;
","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,662,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,663,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,664,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,674,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,675,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,676,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,677,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,678,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,679,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,680,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,681,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,682,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,683,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
",private List<ConfigData> configurations;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,684,private List<ConfigData> configurations;,private List<ConfigData> configurations;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,685,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,686,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,687,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,688,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,689,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,690,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,691,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,692,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,693,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,694,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,695,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,696,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,697,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,698,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
AbstractConfiguration config = provider.getConfiguration(decl);
installInterpolator(decl, config);
return config;
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + tagName, ex2);
}
}
return null;
}
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,699,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,700,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,701,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,702,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,703,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,704,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,705,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, CombinedConfiguration> configs =
new ConcurrentHashMap<String, CombinedConfiguration>();
private List<ConfigData> configurations = new ArrayList<ConfigData>();
private Map<String, AbstractConfiguration> namedConfigurations =
new HashMap<String, AbstractConfiguration>();
private String keyPattern;
private NodeCombiner nodeCombiner;
private String loggerName = DynamicCombinedConfiguration.class.getName();
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public DynamicCombinedConfiguration(NodeCombiner comb)
{
super();
setNodeCombiner(comb);
setIgnoreReloadExceptions(false);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
}
public DynamicCombinedConfiguration()
{
super();
setIgnoreReloadExceptions(false);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
}
public void setKeyPattern(String pattern)
{
this.keyPattern = pattern;
}
public String getKeyPattern()
{
return this.keyPattern;
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
@Override
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
@Override
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidateAll();
}
@Override
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
}
@Override
public int getNumberOfConfigurations()
{
return configurations.size();
}
@Override
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
@Override
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
@Override
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
@Override
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
@Override
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
}
}
return super.removeConfiguration(config);
}
@Override
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
return super.removeConfigurationAt(index);
}
@Override
public ConfigurationNode getRootNode()
{
return getCurrentConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (configs != null)
{
this.getCurrentConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public void addProperty(String key, Object value)
{
this.getCurrentConfig().addProperty(key, value);
}
@Override
public void clear()
{
if (configs != null)
{
this.getCurrentConfig().clear();
}
}
@Override
public void clearProperty(String key)
{
this.getCurrentConfig().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getCurrentConfig().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getCurrentConfig().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getCurrentConfig().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getCurrentConfig().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getCurrentConfig().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getCurrentConfig().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getCurrentConfig().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getCurrentConfig().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getCurrentConfig().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getCurrentConfig().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getCurrentConfig().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getCurrentConfig().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getCurrentConfig().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getCurrentConfig().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return this.getCurrentConfig().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getCurrentConfig().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getCurrentConfig().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getCurrentConfig().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getCurrentConfig().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getCurrentConfig().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getCurrentConfig().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getCurrentConfig().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getCurrentConfig().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getCurrentConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (configs != null)
{
this.getCurrentConfig().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getCurrentConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return this.getCurrentConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (configs != null)
{
this.getCurrentConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getCurrentConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getCurrentConfig().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getCurrentConfig().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getCurrentConfig().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getCurrentConfig().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getCurrentConfig().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getCurrentConfig().interpolatedConfiguration();
}
@Override
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
return getCurrentConfig().getSource(key);
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
for (CombinedConfiguration cc : configs.values())
{
cc.addConfigurationListener(l);
}
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeConfigurationListener(l);
}
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearConfigurationListeners();
}
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.addErrorListener(l);
}
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeErrorListener(l);
}
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearErrorListeners();
}
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
@Override
public Object clone()
{
return super.clone();
}
@Override
public void invalidate()
{
getCurrentConfig().invalidate();
}
public void invalidateAll()
{
if (configs == null)
{
return;
}
for (CombinedConfiguration cc : configs.values())
{
cc.invalidate();
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private CombinedConfiguration getCurrentConfig()
{
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null)
{
synchronized (configs)
{
config = configs.get(key);
if (config == null)
{
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners())
{
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners())
{
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations)
{
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
","private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}"
Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,2,8,configuration,706,"synchronized (configs)
","private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,709,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,710,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,711,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,712,private final Object reloadLock;,private final Object reloadLock;
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,714,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,715,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,716,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,717,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,718,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,720,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,721,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,722,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,723,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","@Override
public long getLong(String key) {
return this.getConfiguration().getLong(key);
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,724,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,725,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
public Object getReloadLock()
{
return config.getReloadLock();
}
@Override
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
public void clear()
{
getConfig().clear();
}
@Override
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
@Override
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return config.getKeys(makePath());
}
@Override
public Iterator<String> getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
public boolean isEmpty()
{
return getConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return getConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
@Override
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","@Override
public long getLong(String key) {
return config.getLong(makePath(key));
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,726,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,727,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,728,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,729,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,730,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,731,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,732,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,733,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,734,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,735,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,736,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,737,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,738,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,739,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,740,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,741,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,744,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,745,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,746,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,747,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,748,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,749,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,750,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,751,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,752,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,753,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,754,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,755,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,756,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,757,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,758,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,759,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,760,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,761,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,762,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,763,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,764,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,765,private ConfigurationNode node;,private ConfigurationNode node;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,903,"final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,905,"final PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,906,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,907,"} catch (final Exception ex) {
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,908,"dump(configuration, new PrintWriter(out));
","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,909,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,910,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,911,"result.setErrorHandler(new DefaultHandler() {
@Override
public void error(final SAXParseException ex) throws SAXException {
throw ex;
","@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,912,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,913,"} catch (final Exception ex) {
","private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,914,"// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration configuration;","// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration configuration;"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,916,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,917,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,918,"return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,920,"reloadingController.resetReloadingState();
","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,922,"} catch (final Exception e) {
","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,925,"return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,926,"} catch (final Exception ex) {
","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
final FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,927,"} catch (final Exception ex) {
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,928,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,929,"final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,930,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,931,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,932,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,933,"final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,934,"return src != null ? src.clone() : null;
","private static <T> T[] defensiveCopy(final T[] src) {
return src != null ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,935,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,936,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,937,"return new ConfigurationNodePointer<>((ConfigurationNodePointer<Object>) parent, wrapper.getNode(), wrapper.getNodeHandler());
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<Object> wrapper = (NodeWrapper<Object>) bean;
return new ConfigurationNodePointer<>((ConfigurationNodePointer<Object>) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1042,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1043,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1044,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1045,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1046,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1047,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1048,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1049,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
",private List<ConfigData> configurations;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1050,private List<ConfigData> configurations;,private List<ConfigData> configurations;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1051,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1052,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1053,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1054,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,1055,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1056,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1058,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1059,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1060,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1061,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1062,"ResultSet rs = pstmt.executeQuery();
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1063,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1064,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,1065,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1066,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1067,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1068,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1069,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1070,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1071,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1072,"private Map<String, ConfigurationProvider> providers;","private Map<String, ConfigurationProvider> providers;"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,1073,"catch (Exception e)
","public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,1074,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1075,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1076,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1078,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1082,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,1083,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
@Override
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1084,private final Object reloadLock;,private final Object reloadLock;
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1085,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,1086,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,1087,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1088,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1089,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1090,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1091,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,1092,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1094,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
","@Override
public long getLong(String key) {
return this.getConfiguration().getLong(key);
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1095,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1097,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1098,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1099,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1100,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1101,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1102,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1103,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1104,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1105,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,1106,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1107,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,1108,private final String protocol;,private final String protocol;
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,1109,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1110,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,1111,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1112,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1113,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,1114,"{
super(name);
setReference(elem);
}
@Override
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
@Override
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection<org.w3c.dom.Node> textNodes = new ArrayList<org.w3c.dom.Node>();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (org.w3c.dom.Node tn : textNodes)
{
elem.removeChild(tn);
}
return result;
","public void save(Writer writer) throws ConfigurationException {
try {
Transformer transformer = createTransformer();
Source source = new DOMSource(createDocument());
Result result = new StreamResult(writer);
transformer.transform(source, result);
} catch (TransformerException e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
} catch (TransformerFactoryConfigurationError e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,1115,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1116,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1117,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1118,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,1119,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1120,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1121,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1122,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1123,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1124,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,1125,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,1126,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1127,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1128,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,1129,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1130,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1131,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1132,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1133,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1134,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1135,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1136,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1218,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1219,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1220,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1221,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1222,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1223,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1224,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1225,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1226,private List<ConfigData> configurations;,private List<ConfigData> configurations;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1227,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1228,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","@Override
protected List<ConfigurationNode> fetchNodeList(String key) {
if (isForceReloadCheck()) {
performReloadCheck();
}
return super.fetchNodeList(key);
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1229,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1230,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1231,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,1232,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1234,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1235,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1236,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,1237,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1238,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1239,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1240,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1241,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return empty;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1242,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1243,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1244,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1245,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
AbstractConfiguration config = provider.getConfiguration(decl);
installInterpolator(decl, config);
return config;
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + tagName, ex2);
}
}
return null;
}
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,1246,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1247,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1248,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,2,8,configuration,1249,"synchronized (configs)
","private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,1252,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1253,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1255,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1256,private final Object reloadLock;,private final Object reloadLock;
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,1258,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1259,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1261,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
",private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1262,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1263,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1264,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,1266,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,1267,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1268,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,1269,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
public Object getReloadLock()
{
return config.getReloadLock();
}
@Override
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
public void clear()
{
getConfig().clear();
}
@Override
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
@Override
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return config.getKeys(makePath());
}
@Override
public Iterator<String> getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
public boolean isEmpty()
{
return getConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return getConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
@Override
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","@Override
public String[] getStringArray(String key) {
return config.getStringArray(makePath(key));
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1270,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1271,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1272,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1273,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1274,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1275,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1276,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1277,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,1278,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,1279,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1280,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,1281,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1282,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1283,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1284,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,1286,"{
super(name);
setReference(elem);
}
@Override
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
@Override
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection<org.w3c.dom.Node> textNodes = new ArrayList<org.w3c.dom.Node>();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (org.w3c.dom.Node tn : textNodes)
{
elem.removeChild(tn);
}
return result;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,1287,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1288,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1289,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,1290,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1291,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,1292,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1293,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1294,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1295,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1296,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1297,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,1298,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,1299,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,1300,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1301,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1302,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1303,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1304,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1305,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1306,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1307,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1308,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1309,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1312,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1313,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1315,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1316,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1317,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1318,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1319,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1320,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1321,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1322,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1323,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1324,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1326,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,1328,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,1329,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1330,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,1332,private ReloadingController reloadingController;,private ReloadingController reloadingController;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1333,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1334,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1335,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1337,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,1341,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1342,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1343,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1344,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1345,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1346,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1347,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1348,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1349,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1354,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1355,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1356,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1404,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1405,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1406,private ExpressionEngine conversionExpressionEngine;,private ExpressionEngine conversionExpressionEngine;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1407,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired = false;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public List getConfigurations()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getConfiguration());
}
return list;
}
public List getConfigurationNameList()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
synchronized(getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized(getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1408,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1409,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1410,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1411,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,1412,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1413,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1415,protected Configuration configuration;,protected Configuration configuration;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1416,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1417,"pstmt = conn.prepareStatement(query.toString());
","protected void clearPropertyDirect(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1418,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1419,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1420,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1421,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,1422,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1423,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1424,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1425,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1426,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1427,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1428,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,1429,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,1430,"catch (Exception e)
","public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1431,"if (configs != null)
","public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1432,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,2,16,configuration,1433,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private Map configs = new HashMap();
private List configurations = new ArrayList();
private Map namedConfigurations = new HashMap();
private String keyPattern;
private NodeCombiner nodeCombiner;
private String loggerName = DynamicCombinedConfiguration.class.getName();
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public DynamicCombinedConfiguration(NodeCombiner comb)
{
super();
setNodeCombiner(comb);
setIgnoreReloadExceptions(false);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
}
public DynamicCombinedConfiguration()
{
super();
setIgnoreReloadExceptions(false);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
}
public void setKeyPattern(String pattern)
{
this.keyPattern = pattern;
}
public String getKeyPattern()
{
return this.keyPattern;
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidateAll();
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
}
}
return super.removeConfiguration(config);
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
return super.removeConfigurationAt(index);
}
public ConfigurationNode getRootNode()
{
return getCurrentConfig().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (configs != null)
{
this.getCurrentConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public void addProperty(String key, Object value)
{
this.getCurrentConfig().addProperty(key, value);
}
public void clear()
{
if (configs != null)
{
this.getCurrentConfig().clear();
}
}
public void clearProperty(String key)
{
this.getCurrentConfig().clearProperty(key);
}
public boolean containsKey(String key)
{
return this.getCurrentConfig().containsKey(key);
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getCurrentConfig().getBigDecimal(key, defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return this.getCurrentConfig().getBigDecimal(key);
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getCurrentConfig().getBigInteger(key, defaultValue);
}
public BigInteger getBigInteger(String key)
{
return this.getCurrentConfig().getBigInteger(key);
}
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
public boolean getBoolean(String key)
{
return this.getCurrentConfig().getBoolean(key);
}
public byte getByte(String key, byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
public byte getByte(String key)
{
return this.getCurrentConfig().getByte(key);
}
public double getDouble(String key, double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
public double getDouble(String key)
{
return this.getCurrentConfig().getDouble(key);
}
public float getFloat(String key, float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
public float getFloat(String key)
{
return this.getCurrentConfig().getFloat(key);
}
public int getInt(String key, int defaultValue)
{
return this.getCurrentConfig().getInt(key, defaultValue);
}
public int getInt(String key)
{
return this.getCurrentConfig().getInt(key);
}
public Integer getInteger(String key, Integer defaultValue)
{
return this.getCurrentConfig().getInteger(key, defaultValue);
}
public Iterator getKeys()
{
return this.getCurrentConfig().getKeys();
}
public Iterator getKeys(String prefix)
{
return this.getCurrentConfig().getKeys(prefix);
}
public List getList(String key, List defaultValue)
{
return this.getCurrentConfig().getList(key, defaultValue);
}
public List getList(String key)
{
return this.getCurrentConfig().getList(key);
}
public long getLong(String key, long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
public long getLong(String key)
{
return this.getCurrentConfig().getLong(key);
}
public Properties getProperties(String key)
{
return this.getCurrentConfig().getProperties(key);
}
public Object getProperty(String key)
{
return this.getCurrentConfig().getProperty(key);
}
public short getShort(String key, short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
public short getShort(String key)
{
return this.getCurrentConfig().getShort(key);
}
public String getString(String key, String defaultValue)
{
return this.getCurrentConfig().getString(key, defaultValue);
}
public String getString(String key)
{
return this.getCurrentConfig().getString(key);
}
public String[] getStringArray(String key)
{
return this.getCurrentConfig().getStringArray(key);
}
public boolean isEmpty()
{
return this.getCurrentConfig().isEmpty();
}
public void setProperty(String key, Object value)
{
if (configs != null)
{
this.getCurrentConfig().setProperty(key, value);
}
}
public Configuration subset(String prefix)
{
return this.getCurrentConfig().subset(prefix);
}
public Node getRoot()
{
return this.getCurrentConfig().getRoot();
}
public void setRoot(Node node)
{
if (configs != null)
{
this.getCurrentConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
public void addNodes(String key, Collection nodes)
{
this.getCurrentConfig().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getCurrentConfig().configurationAt(key, supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return this.getCurrentConfig().configurationAt(key);
}
public List configurationsAt(String key)
{
return this.getCurrentConfig().configurationsAt(key);
}
public void clearTree(String key)
{
this.getCurrentConfig().clearTree(key);
}
public int getMaxIndex(String key)
{
return this.getCurrentConfig().getMaxIndex(key);
}
public Configuration interpolatedConfiguration()
{
return this.getCurrentConfig().interpolatedConfiguration();
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
return getCurrentConfig().getSource(key);
}
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.addConfigurationListener(l);
}
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.removeConfigurationListener(l);
}
return super.removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return super.getConfigurationListeners();
}
public void clearConfigurationListeners()
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.clearConfigurationListeners();
}
super.clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.addErrorListener(l);
}
super.addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.removeErrorListener(l);
}
return super.removeErrorListener(l);
}
public void clearErrorListeners()
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.clearErrorListeners();
}
super.clearErrorListeners();
}
public Collection getErrorListeners()
{
return super.getErrorListeners();
}
public Object clone()
{
return super.clone();
}
public void invalidate()
{
getCurrentConfig().invalidate();
}
public void invalidateAll()
{
if (configs == null)
{
return;
}
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.invalidate();
}
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private CombinedConfiguration getCurrentConfig()
{
String key = localSubst.replace(keyPattern);
CombinedConfiguration config;
synchronized (getNodeCombiner())
{
config = (CombinedConfiguration) configs.get(key);
if (config == null)
{
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
Iterator iter = getErrorListeners().iterator();
while (iter.hasNext())
{
ConfigurationErrorListener listener = (ConfigurationErrorListener) iter.next();
config.addErrorListener(listener);
}
iter = getConfigurationListeners().iterator();
while (iter.hasNext())
{
ConfigurationListener listener = (ConfigurationListener) iter.next();
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
iter = configurations.iterator();
while (iter.hasNext())
{
ConfigData data = (ConfigData) iter.next();
config.addConfiguration(data.getConfiguration(), data.getName(),
data.getAt());
}
configs.put(key, config);
}
}
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
","public void addConfiguration(AbstractConfiguration config, String name, String at) {
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null) {
namedConfigurations.put(name, config);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1434,"catch (Exception ex)
","void extractProperties15() {
try {
Method method = System.class.getMethod(METHOD_NAME, null);
environment = (Map) method.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,1435,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1436,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,1437,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1438,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1439,private final Object reloadLock;,private final Object reloadLock;
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,1440,"synchronized(counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1441,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,2,16,configuration,1442,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final Map configurationsMap = new HashMap();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
public void clear()
{
this.getConfiguration().clear();
}
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
public Iterator getKeys()
{
return this.getConfiguration().getKeys();
}
public Iterator getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
public List getList(String key, List defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
public List getList(String key)
{
return this.getConfiguration().getList(key);
}
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
public void addNodes(String key, Collection nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
public List configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return super.getConfigurationListeners();
}
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
public void clearErrorListeners()
{
super.clearErrorListeners();
}
public Collection getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
public void load() throws ConfigurationException
{
this.getConfiguration();
}
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getConfigurationListeners().iterator();
while (iter.hasNext())
{
ConfigurationListener listener = (ConfigurationListener) iter.next();
listener.configurationChanged(event);
}
}
}
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getErrorListeners().iterator();
while (iter.hasNext())
{
ConfigurationErrorListener listener = (ConfigurationErrorListener) iter.next();
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
synchronized (configurationsMap)
{
configurationsMap.remove(path);
}
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
synchronized (configurationsMap)
{
if (configurationsMap.containsKey(path))
{
return (AbstractHierarchicalFileConfiguration) configurationsMap.get(path);
}
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
};
synchronized (configurationsMap)
{
configurationsMap.put(pattern, configuration);
}
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setAttributeSplittingDisabled(attributeSplittingDisabled);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
synchronized (configurationsMap)
{
if (!configurationsMap.containsKey(path))
{
configurationsMap.put(path, configuration);
}
}
return configuration;
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1443,"if (init)
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1444,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1445,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final Map configurationsMap = new HashMap();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
public void clear()
{
this.getConfiguration().clear();
}
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
public Iterator getKeys()
{
return this.getConfiguration().getKeys();
}
public Iterator getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
public List getList(String key, List defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
public List getList(String key)
{
return this.getConfiguration().getList(key);
}
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
public void addNodes(String key, Collection nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
public List configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return super.getConfigurationListeners();
}
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
public void clearErrorListeners()
{
super.clearErrorListeners();
}
public Collection getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
public void load() throws ConfigurationException
{
this.getConfiguration();
}
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getConfigurationListeners().iterator();
while (iter.hasNext())
{
ConfigurationListener listener = (ConfigurationListener) iter.next();
listener.configurationChanged(event);
}
}
}
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getErrorListeners().iterator();
while (iter.hasNext())
{
ConfigurationErrorListener listener = (ConfigurationErrorListener) iter.next();
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
synchronized (configurationsMap)
{
configurationsMap.remove(path);
}
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
synchronized (configurationsMap)
{
if (configurationsMap.containsKey(path))
{
return (AbstractHierarchicalFileConfiguration) configurationsMap.get(path);
}
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
};
synchronized (configurationsMap)
{
configurationsMap.put(pattern, configuration);
}
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setAttributeSplittingDisabled(attributeSplittingDisabled);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
synchronized (configurationsMap)
{
if (!configurationsMap.containsKey(path))
{
configurationsMap.put(path, configuration);
}
}
return configuration;
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1446,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,1449,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
public Object getReloadLock()
{
return config.getReloadLock();
}
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
public void clear()
{
getConfig().clear();
}
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
public int getInt(String key)
{
return config.getInt(makePath(key));
}
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
public Iterator getKeys()
{
return config.getKeys(makePath());
}
public Iterator getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
public List getList(String key, List defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
public List getList(String key)
{
return config.getList(makePath(key));
}
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
public long getLong(String key)
{
return config.getLong(makePath(key));
}
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
public short getShort(String key)
{
return config.getShort(makePath(key));
}
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
public String getString(String key)
{
return config.getString(makePath(key));
}
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
public boolean isEmpty()
{
return getConfig().isEmpty();
}
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
public Node getRoot()
{
return getConfig().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
public void addNodes(String key, Collection nodes)
{
getConfig().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
public List configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
public Collection getErrorListeners()
{
return getConfig().getErrorListeners();
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1450,"if (init)
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,1451,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
separator.append(c);
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
separator.append(c);
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c) || ArrayUtils.contains(SEPARATORS, c))
{
separator.append(c);
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] doParseProperty(String line) {
String[] result = new String[3];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
StringBuffer separator = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
separator.append(c);
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
separator.append(c);
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c) || ArrayUtils.contains(SEPARATORS, c)) {
separator.append(c);
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
result[2] = separator.toString();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1452,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,1453,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1454,"catch (Exception e)
","static boolean isEnum(Class cls) {
if (!SystemUtils.isJavaVersionAtLeast(JAVA_VERSION_1_5)) {
return false;
}
try {
Method isEnumMethod = Class.class.getMethod(""isEnum"", new Class[] {});
return ((Boolean) isEnumMethod.invoke(cls, new Object[] {})).booleanValue();
} catch (Exception e) {
throw new RuntimeException(e.getMessage());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1455,"catch (Exception ex)
","public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = (ConfigurationNode) nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1456,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1457,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map map = provider.getOptions();
if (map == null) {
return null;
}
Iterator iter = map.entrySet().iterator();
int count = 0;
while (iter.hasNext()) {
Map.Entry entry = (Map.Entry) iter.next();
try {
String key = (String) entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,1458,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,1459,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,1460,private final String protocol;,private final String protocol;
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,1461,"{
super(name);
setReference(elem);
}
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection textNodes = new ArrayList();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (Iterator it = textNodes.iterator(); it.hasNext();)
{
elem.removeChild((org.w3c.dom.Node) it.next());
}
return result;
",private DocumentBuilder documentBuilder;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1462,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1463,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1464,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,1465,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1466,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,1467,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1468,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1469,"catch (Exception ex)
","private static Class getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1470,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1472,public Token currentToken;,public Token currentToken;
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,1473,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}"
PERFORMANCE,UUF_UNUSED_FIELD,FP,2,18,configuration,1474,private boolean jj_semLA;,private boolean jj_semLA;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1475,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1476,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1477,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,1478,"switch (i) {
case 0: jj_3_1(); break;
","final private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
}
jj_rescan = false;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1479,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1480,"String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public Node Property() throws ParseException {
String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1481,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1482,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1483,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,1484,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1485,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1486,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1487,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,1488,"jjstateSet[jjnewStateCnt++] = jjnextStates[start];
}
while (start++ != end);
}
","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1489,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,1490,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1491,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,1492,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1493,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,2,18,configuration,1494,"jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}
","private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1495,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1496,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1497,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1498,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1499,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1500,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1501,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1502,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1503,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1504,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1505,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1506,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1507,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1508,"char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else
{
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
","public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1509,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,1510,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,1511,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,1512,public Token specialToken;,public Token specialToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1513,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1514,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1515,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1516,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1517,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,1518,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,1519,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1520,"fs = ((CatalogManager) catalogManager).getFileSystem();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,1521,"String name = (url == null) ? fileName : url.toString();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1522,"staticCatalog = catalog;
","public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1523,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1524,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1525,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1526,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1527,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1528,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1529,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1694,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1695,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1696,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1697,"{
public boolean evaluate(Object obj)
{
String key = (String) obj;
return key.startsWith(prefix + ""."") || key.equals(prefix);
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1698,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1699,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,1700,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1701,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1702,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1703,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1704,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,1705,"catch (Exception ex)
","public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1707,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1708,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,1709,"return count % 2 == 1;
","private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,1710,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1712,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1713,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1714,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1715,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,1716,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1717,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1718,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1719,"pstmt = conn.prepareStatement(query.toString());
","public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1720,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1721,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1722,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1723,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1724,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1725,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1726,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1727,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ExpressionEngine expressionEngine;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1728,private ExpressionEngine expressionEngine;,private ExpressionEngine expressionEngine;
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,1731,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,1732,"return bsCount % 2 == 1;
","private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1733,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1734,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1735,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1736,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1737,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1738,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1739,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1740,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,1741,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1742,"catch (Exception ex)
","public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = (ConfigurationNode) nodes.get(0);
if (currentRoot != super.getRootNode()) {
setRootNode(currentRoot);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1743,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1744,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,1746,"{
super(name);
setReference(elem);
}
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
txtNode = document
.createTextNode(PropertyConverter.escapeDelimiters(
value.toString(), getListDelimiter()));
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
txtNode.setNodeValue(PropertyConverter.escapeDelimiters(
value.toString(), getListDelimiter()));
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection textNodes = new ArrayList();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (Iterator it = textNodes.iterator(); it.hasNext();)
{
elem.removeChild((org.w3c.dom.Node) it.next());
}
return result;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1748,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1749,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,2,18,configuration,1750,"initProperty(bean, propName, properties.get(propName));
","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}"
DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,2,16,configuration,1751,"throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1752,public Token currentToken;,public Token currentToken;
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,1753,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}"
Multithreaded correctness,STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE,FP,2,8,configuration,1754,"out.print(""<*D"" + DATE_FORMAT.format((Date) value) + "">"");
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof List) {
out.print(""( "");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
if (it.hasNext()) {
out.print("", "");
}
}
out.print("" )"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println();
out.println(padding + ""{"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
out.println("";"");
}
out.println(padding + ""}"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
out.print(""<"" + new String(Hex.encodeHex((byte[]) value)) + "">"");
} else if (value instanceof Date) {
out.print(""<*D"" + DATE_FORMAT.format((Date) value) + "">"");
} else if (value != null) {
out.print(quoteString(String.valueOf(value)));
}
}"
Multithreaded correctness,STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE,FP,2,8,configuration,1755,"return PropertyListConfiguration.DATE_FORMAT.parse(substring);
","protected Date parseDate(String s) throws ParseException {
String substring = s.substring(3, s.length() - 1);
try {
return PropertyListConfiguration.DATE_FORMAT.parse(substring);
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the date '"" + s + ""' : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1756,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1757,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,1758,"switch (i) {
case 0: jj_3_1(); break;
","final private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
}
jj_rescan = false;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1759,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1760,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1761,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1762,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1763,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,1764,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1765,"String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public Node Property() throws ParseException {
String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
PERFORMANCE,UUF_UNUSED_FIELD,FP,2,18,configuration,1766,private boolean jj_semLA;,private boolean jj_semLA;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1767,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1768,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1769,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,1770,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1771,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,1772,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,2,18,configuration,1773,"jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}
","private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1774,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1775,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,1776,"jjstateSet[jjnewStateCnt++] = jjnextStates[start];
}
while (start++ != end);
}
","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1777,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1778,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1779,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1780,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1781,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1782,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1783,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1784,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1785,"char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else
{
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
","public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1786,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1787,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1788,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1789,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1790,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1791,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,1792,public Token specialToken;,public Token specialToken;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,1793,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,1794,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,1795,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1796,"addValue(new Integer(value));
","public void addIntegerValue(String value) {
addValue(new Integer(value));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1797,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1798,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}"
Multithreaded correctness,STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE,FP,2,8,configuration,1799,"addValue(format.parse(value));
","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1800,"addValue(new Double(value));
","public void addRealValue(String value) {
addValue(new Double(value));
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,2,18,configuration,1801,"private StringBuffer buffer = new StringBuffer();
private List stack = new ArrayList();
public XMLPropertyListHandler(Node root)
{
push(root);
}
private Node peek()
{
if (!stack.isEmpty())
{
return (Node) stack.get(stack.size() - 1);
}
else
{
return null;
}
}
private Node pop()
{
if (!stack.isEmpty())
{
return (Node) stack.remove(stack.size() - 1);
}
else
{
return null;
}
}
private void push(Node node)
{
stack.add(node);
}
public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException
{
if (""array"".equals(qName))
{
push(new ArrayNode());
}
else if (""dict"".equals(qName))
{
if (peek() instanceof ArrayNode)
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) peek();
node.addValue(config);
push(config.getRoot());
}
}
}
public void endElement(String uri, String localName, String qName) throws SAXException
{
if (""key"".equals(qName))
{
PListNode node = new PListNode();
node.setName(buffer.toString());
peek().addChild(node);
push(node);
}
else if (""dict"".equals(qName))
{
pop();
}
else
{
if (""string"".equals(qName))
{
((PListNode) peek()).addValue(buffer.toString());
}
else if (""integer"".equals(qName))
{
((PListNode) peek()).addIntegerValue(buffer.toString());
}
else if (""real"".equals(qName))
{
((PListNode) peek()).addRealValue(buffer.toString());
}
else if (""true"".equals(qName))
{
((PListNode) peek()).addTrueValue();
}
else if (""false"".equals(qName))
{
((PListNode) peek()).addFalseValue();
}
else if (""data"".equals(qName))
{
((PListNode) peek()).addDataValue(buffer.toString());
}
else if (""date"".equals(qName))
{
((PListNode) peek()).addDateValue(buffer.toString());
}
else if (""array"".equals(qName))
{
ArrayNode array = (ArrayNode) pop();
((PListNode) peek()).addList(array);
}
if (!(peek() instanceof ArrayNode))
{
pop();
}
}
buffer.setLength(0);
}
public void characters(char[] ch, int start, int length) throws SAXException
{
buffer.append(ch, start, length);
}
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1802,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1803,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1804,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1805,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1806,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1807,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1808,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1809,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1810,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1814,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1815,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1816,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1817,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1818,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1819,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1820,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1824,"private Map<String, AbstractConfiguration> namedConfigurations;","private Map<String, AbstractConfiguration> namedConfigurations;"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1825,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1826,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1827,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","@Override
protected List<ConfigurationNode> fetchNodeList(String key) {
if (isForceReloadCheck()) {
performReloadCheck();
}
return super.fetchNodeList(key);
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1828,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1829,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,1831,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1832,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1833,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1834,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,1835,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1836,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1837,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1838,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1839,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1840,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return result;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1841,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1842,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1843,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1844,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
AbstractConfiguration config = provider.getConfiguration(decl);
installInterpolator(decl, config);
return config;
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + tagName, ex2);
}
}
return null;
}
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,1845,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1846,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1847,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,2,8,configuration,1848,"synchronized (configs)
","private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1850,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1851,private final Object reloadLock;,private final Object reloadLock;
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,1853,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1854,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1856,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
",private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1857,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,1859,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<SubnodeConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,1860,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1861,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1862,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,1863,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1865,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1866,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1867,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1868,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1869,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1870,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1871,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1872,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,1873,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1874,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,1875,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1876,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,1877,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1878,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1879,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1880,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","public void save(Writer writer) throws ConfigurationException {
try {
Transformer transformer = createTransformer();
Source source = new DOMSource(createDocument());
Result result = new StreamResult(writer);
transformer.transform(source, result);
} catch (TransformerException e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
} catch (TransformerFactoryConfigurationError e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,1881,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1882,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1883,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1884,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1888,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1891,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1892,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1893,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1894,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,1895,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,1896,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1897,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,1898,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1899,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1900,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1901,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1902,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1903,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1904,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,1905,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1906,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1942,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1943,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,1944,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","private void validSubnodeConfigurations(ConfigurationEvent event) {
Set<SubnodeConfiguration> subs = new HashSet<SubnodeConfiguration>(subConfigs.keySet());
for (SubnodeConfiguration sub : subs) {
if (sub != event.getSource()) {
sub.validateRootNode();
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1945,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1946,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1947,private ConfigurationNode combinedRoot;,private ConfigurationNode combinedRoot;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,1948,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private NodeCombiner nodeCombiner;
private ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
return combinedRoot;
}
@Override
protected void clearInternal()
{
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
beginRead(false);
try
{
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(optimize);
if (combinedRoot != null)
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if(optimize)
{
return;
}
try
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private void invalidateInternal()
{
combinedRoot = null;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addConfigurationListener(this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeConfigurationListener(this);
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","public NodeCombiner getNodeCombiner() {
beginRead(true);
try {
return nodeCombiner;
} finally {
endRead();
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1949,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1950,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,1,14,configuration,1951,private final ConversionHandler dataConversionHandler;,private final ConversionHandler dataConversionHandler;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1952,private final Configuration configuration;,private final Configuration configuration;
CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,2,12,configuration,1953,private ResultSet resultSet;,private ResultSet resultSet;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,1954,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,1955,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,1956,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,1958,"{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
protected void addPropertyInternal(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
protected void clearInternal()
{
getConfig().clear();
}
@Override
protected void clearPropertyDirect(String key)
{
config.clearProperty(makePath(key));
}
@Override
protected boolean containsKeyInternal(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
protected Iterator<String> getKeysInternal()
{
return config.getKeys(makePath());
}
@Override
protected Iterator<String> getKeysInternal(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
protected Object getPropertyInternal(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
protected boolean isEmptyInternal()
{
return getConfig().isEmpty();
}
@Override
protected void setPropertyInternal(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
protected void setRootNodeInternal(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNodeInternal(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
protected void addNodesInternal(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<SubnodeConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
protected List<ConfigurationNode> clearTreeInternal(String key)
{
config.clearTree(makePath(key));
return Collections.emptyList();
}
@Override
protected int getMaxIndexInternal(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void write(Writer writer) throws ConfigurationException, IOException
{
fetchFileBased().write(writer);
}
public void read(Reader reader) throws ConfigurationException, IOException
{
fetchFileBased().read(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
private BaseHierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return substitute(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return substitute(pathPattern) + item;
}
private String substitute(String pattern)
{
Object value = getInterpolator().interpolate(pattern);
return (value != null) ? value.toString() : null;
}
private FileBased fetchFileBased() throws ConfigurationException
{
if (!(config instanceof FileBased))
{
throw new ConfigurationException(
""Wrapped configuration does not implement FileBased!""
+ "" No I/O operations are supported."");
}
return (FileBased) config;
","@Override
protected void setPropertyInternal(String key, Object value) {
getConfig().setProperty(key, value);
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,1959,"switch (event.getType())
{
case AbstractConfiguration.EVENT_ADD_PROPERTY:
boolean contained = layoutData.containsKey(event
.getPropertyName());
PropertyLayoutData data = fetchLayoutData(event
.getPropertyName());
data.setSingleLine(!contained);
break;
case AbstractConfiguration.EVENT_CLEAR_PROPERTY:
layoutData.remove(event.getPropertyName());
break;
case AbstractConfiguration.EVENT_CLEAR:
clear();
break;
case AbstractConfiguration.EVENT_SET_PROPERTY:
fetchLayoutData(event.getPropertyName());
","public void configurationChanged(ConfigurationEvent event) {
if (!event.isBeforeUpdate()) {
switch(event.getType()) {
case AbstractConfiguration.EVENT_ADD_PROPERTY:
boolean contained = layoutData.containsKey(event.getPropertyName());
PropertyLayoutData data = fetchLayoutData(event.getPropertyName());
data.setSingleLine(!contained);
break;
case AbstractConfiguration.EVENT_CLEAR_PROPERTY:
layoutData.remove(event.getPropertyName());
break;
case AbstractConfiguration.EVENT_CLEAR:
clear();
break;
case AbstractConfiguration.EVENT_SET_PROPERTY:
fetchLayoutData(event.getPropertyName());
break;
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1960,"catch (Exception ex)
","void validateRootNode() {
if (subnodeKey != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(subnodeKey);
if (nodes.size() != 1) {
subnodeKey = null;
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
}
} catch (Exception ex) {
subnodeKey = null;
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,1961,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1962,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private FileLocator locator;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1963,private FileLocator locator;,private FileLocator locator;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1964,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1965,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1966,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = beanUtilsBean.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
MALICIOUS_CODE,EI_EXPOSE_REP,FP,2,18,configuration,1967,"return additionalBeanInfo;
","@Override
public BeanInfo[] getAdditionalBeanInfo() {
return additionalBeanInfo;
}"
MALICIOUS_CODE,EI_EXPOSE_REP,FP,2,18,configuration,1968,"return propertyDescriptors;
","@Override
public PropertyDescriptor[] getPropertyDescriptors() {
return propertyDescriptors;
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,1969,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,1970,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,1972,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1973,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1974,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1975,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1976,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,1977,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1978,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,1979,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1980,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,1982,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,1986,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1987,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,1988,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,1989,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,1990,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,1991,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,1992,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1993,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,1994,private FileLocator locator;,private FileLocator locator;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,1995,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,1996,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1997,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,1998,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,1999,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2000,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2001,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2002,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2003,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2004,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2005,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2011,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2012,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,2014,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2015,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2016,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2017,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2018,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2019,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2021,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2022,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2023,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,2025,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,2027,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,2028,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2029,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,2031,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2032,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2033,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2034,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2036,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,2040,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2041,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2042,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2043,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2044,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2045,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2046,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,2047,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2048,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2052,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2053,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2054,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2359,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2360,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2361,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2362,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,2363,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public List getConfigurations()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getConfiguration());
}
return list;
}
public List getConfigurationNameList()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2364,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2365,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2366,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2368,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,2369,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2370,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2371,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2372,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2373,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2374,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2375,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2376,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2377,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2378,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2379,"pstmt = conn.prepareStatement(query.toString());
","protected void clearPropertyDirect(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,2380,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2381,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2382,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2383,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,2384,"catch (Exception e)
","public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,2385,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,2386,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2387,"if (configs != null)
","public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2389,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,2393,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2394,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,2395,private final Object reloadLock;,private final Object reloadLock;
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,2396,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,2397,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,2399,"{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2400,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2401,"if (init)
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2403,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final Map configurationsMap = new HashMap();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
public void clear()
{
this.getConfiguration().clear();
}
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
public Iterator getKeys()
{
return this.getConfiguration().getKeys();
}
public Iterator getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
public List getList(String key, List defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
public List getList(String key)
{
return this.getConfiguration().getList(key);
}
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
public void addNodes(String key, Collection nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
public List configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return super.getConfigurationListeners();
}
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
public void clearErrorListeners()
{
super.clearErrorListeners();
}
public Collection getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
public void load() throws ConfigurationException
{
this.getConfiguration();
}
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getConfigurationListeners().iterator();
while (iter.hasNext())
{
ConfigurationListener listener = (ConfigurationListener) iter.next();
listener.configurationChanged(event);
}
}
}
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getErrorListeners().iterator();
while (iter.hasNext())
{
ConfigurationErrorListener listener = (ConfigurationErrorListener) iter.next();
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
synchronized (configurationsMap)
{
configurationsMap.remove(path);
}
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
synchronized (configurationsMap)
{
if (configurationsMap.containsKey(path))
{
return (AbstractHierarchicalFileConfiguration) configurationsMap.get(path);
}
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
};
synchronized (configurationsMap)
{
configurationsMap.put(pattern, configuration);
}
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setAttributeSplittingDisabled(attributeSplittingDisabled);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
synchronized (configurationsMap)
{
if (!configurationsMap.containsKey(path))
{
configurationsMap.put(path, configuration);
}
}
return configuration;
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
",private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2404,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2405,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
public Object getReloadLock()
{
return config.getReloadLock();
}
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
public void clear()
{
getConfig().clear();
}
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
public int getInt(String key)
{
return config.getInt(makePath(key));
}
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
public Iterator getKeys()
{
return config.getKeys(makePath());
}
public Iterator getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
public List getList(String key, List defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
public List getList(String key)
{
return config.getList(makePath(key));
}
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
public long getLong(String key)
{
return config.getLong(makePath(key));
}
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
public short getShort(String key)
{
return config.getShort(makePath(key));
}
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
public String getString(String key)
{
return config.getString(makePath(key));
}
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
public boolean isEmpty()
{
return getConfig().isEmpty();
}
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
public Node getRoot()
{
return getConfig().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
public void addNodes(String key, Collection nodes)
{
getConfig().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
public List configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
public Collection getErrorListeners()
{
return getConfig().getErrorListeners();
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2406,"if (init)
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,2407,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
separator.append(c);
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
separator.append(c);
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c) || ArrayUtils.contains(SEPARATORS, c))
{
separator.append(c);
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] doParseProperty(String line) {
String[] result = new String[3];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
StringBuffer separator = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
separator.append(c);
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
separator.append(c);
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c) || ArrayUtils.contains(SEPARATORS, c)) {
separator.append(c);
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
result[2] = separator.toString();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2415,"catch (Exception ex)
","public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = (ConfigurationNode) nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2416,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,2417,private final String protocol;,private final String protocol;
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,2418,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2419,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map map = provider.getOptions();
if (map == null) {
return null;
}
Iterator iter = map.entrySet().iterator();
int count = 0;
while (iter.hasNext()) {
Map.Entry entry = (Map.Entry) iter.next();
try {
String key = (String) entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,2420,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,2421,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,2422,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,2424,"{
super(name);
setReference(elem);
}
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection textNodes = new ArrayList();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (Iterator it = textNodes.iterator(); it.hasNext();)
{
elem.removeChild((org.w3c.dom.Node) it.next());
}
return result;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,2425,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2426,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,2427,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2428,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2429,"catch (Exception ex)
","private static Class getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2430,"public static class Variables extends ArrayList
{
public Variable getVariable()
{
if (size() > 0)
{
return (Variable) get(size() - 1);
}
else
{
return null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2431,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2432,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2433,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2434,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2435,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,2436,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,2437,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2438,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,2439,"staticCatalog = catalog;
","public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,2440,"String name = (url == null) ? fileName : url.toString();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2441,"fs = ((CatalogManager) catalogManager).getFileSystem();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2442,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2443,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2444,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2445,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2446,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2447,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2460,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2461,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2462,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2463,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2464,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2465,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2466,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,2467,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
",private List<ConfigData> configurations;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2468,private List<ConfigData> configurations;,private List<ConfigData> configurations;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2469,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2470,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2471,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2472,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,2473,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2475,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2476,protected Configuration configuration;,protected Configuration configuration;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2477,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2478,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,2479,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2480,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2481,"ResultSet rs = pstmt.executeQuery();
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2482,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2483,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2484,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2485,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2486,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2487,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2488,"private Map<String, ConfigurationProvider> providers;","private Map<String, ConfigurationProvider> providers;"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2489,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2490,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,2491,"catch (Exception e)
","public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,2492,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2493,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private Map<String, CombinedConfiguration> configs =
new HashMap<String, CombinedConfiguration>();
private List<ConfigData> configurations = new ArrayList<ConfigData>();
private Map<String, AbstractConfiguration> namedConfigurations =
new HashMap<String, AbstractConfiguration>();
private String keyPattern;
private NodeCombiner nodeCombiner;
private String loggerName = DynamicCombinedConfiguration.class.getName();
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public DynamicCombinedConfiguration(NodeCombiner comb)
{
super();
setNodeCombiner(comb);
setIgnoreReloadExceptions(false);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
}
public DynamicCombinedConfiguration()
{
super();
setIgnoreReloadExceptions(false);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
}
public void setKeyPattern(String pattern)
{
this.keyPattern = pattern;
}
public String getKeyPattern()
{
return this.keyPattern;
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
@Override
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
@Override
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidateAll();
}
@Override
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
}
@Override
public int getNumberOfConfigurations()
{
return configurations.size();
}
@Override
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
@Override
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
@Override
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
@Override
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
@Override
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
}
}
return super.removeConfiguration(config);
}
@Override
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
return super.removeConfigurationAt(index);
}
@Override
public ConfigurationNode getRootNode()
{
return getCurrentConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (configs != null)
{
this.getCurrentConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public void addProperty(String key, Object value)
{
this.getCurrentConfig().addProperty(key, value);
}
@Override
public void clear()
{
if (configs != null)
{
this.getCurrentConfig().clear();
}
}
@Override
public void clearProperty(String key)
{
this.getCurrentConfig().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getCurrentConfig().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getCurrentConfig().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getCurrentConfig().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getCurrentConfig().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getCurrentConfig().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getCurrentConfig().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getCurrentConfig().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getCurrentConfig().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getCurrentConfig().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getCurrentConfig().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getCurrentConfig().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getCurrentConfig().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getCurrentConfig().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getCurrentConfig().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getCurrentConfig().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getCurrentConfig().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getCurrentConfig().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getCurrentConfig().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getCurrentConfig().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getCurrentConfig().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getCurrentConfig().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getCurrentConfig().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getCurrentConfig().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getCurrentConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (configs != null)
{
this.getCurrentConfig().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getCurrentConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return this.getCurrentConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (configs != null)
{
this.getCurrentConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getCurrentConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getCurrentConfig().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getCurrentConfig().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getCurrentConfig().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getCurrentConfig().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getCurrentConfig().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getCurrentConfig().interpolatedConfiguration();
}
@Override
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
return getCurrentConfig().getSource(key);
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
for (CombinedConfiguration cc : configs.values())
{
cc.addConfigurationListener(l);
}
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeConfigurationListener(l);
}
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearConfigurationListeners();
}
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.addErrorListener(l);
}
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeErrorListener(l);
}
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearErrorListeners();
}
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
@Override
public Object clone()
{
return super.clone();
}
@Override
public void invalidate()
{
getCurrentConfig().invalidate();
}
public void invalidateAll()
{
if (configs == null)
{
return;
}
for (CombinedConfiguration cc : configs.values())
{
cc.invalidate();
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private CombinedConfiguration getCurrentConfig()
{
String key = localSubst.replace(keyPattern);
CombinedConfiguration config;
synchronized (getNodeCombiner())
{
config = configs.get(key);
if (config == null)
{
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners())
{
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners())
{
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations)
{
config.addConfiguration(data.getConfiguration(), data.getName(),
data.getAt());
}
configs.put(key, config);
}
}
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
",private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2494,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2495,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,2497,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2498,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2500,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
@Override
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,2501,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,2502,private final Object reloadLock;,private final Object reloadLock;
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,2503,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,2504,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,2505,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2508,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2509,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,2510,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,2511,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2512,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2513,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
public Object getReloadLock()
{
return config.getReloadLock();
}
@Override
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
public void clear()
{
getConfig().clear();
}
@Override
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
@Override
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return config.getKeys(makePath());
}
@Override
public Iterator<String> getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
public boolean isEmpty()
{
return getConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return getConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
@Override
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2514,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2515,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2516,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2517,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2518,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2519,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2520,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2521,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2522,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2523,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2524,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,2525,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,2526,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,2527,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,2528,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,2529,"{
super(name);
setReference(elem);
}
@Override
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
@Override
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection<org.w3c.dom.Node> textNodes = new ArrayList<org.w3c.dom.Node>();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (org.w3c.dom.Node tn : textNodes)
{
elem.removeChild(tn);
}
return result;
",private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,2530,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2531,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,2532,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,2533,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2534,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2535,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2536,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,2537,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2538,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2539,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2540,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2541,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2542,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,2543,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,2544,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2545,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2546,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,2547,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,2548,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2549,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2550,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2551,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2552,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2553,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2554,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2569,"{
@Override
protected Object interpolate(final Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2570,"final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2573,"catch (final Exception ex)
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2574,"dump(configuration, new PrintWriter(out));
","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2575,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,2576,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2578,"{
@Override
public InputSource resolveEntity(final String publicId, final String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(final String publicId, final String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2579,"catch (final Exception e)
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(final String publicId, final String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,2582,"public static final EventType<ConfigurationBuilderResultCreatedEvent> RESULT_CREATED =
new EventType<>(ANY,
""RESULT_CREATED"");
private final ImmutableConfiguration configuration;
public ConfigurationBuilderResultCreatedEvent(
final ConfigurationBuilder<?> source,
final EventType<? extends ConfigurationBuilderResultCreatedEvent> evType,
final ImmutableConfiguration createdConfiguration)
{
super(source, evType);
if (createdConfiguration == null)
{
throw new IllegalArgumentException(
""Configuration must not be null!"");
}
configuration = createdConfiguration;
}
public ImmutableConfiguration getConfiguration()
{
return configuration;
",private final ImmutableConfiguration configuration;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,2583,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,2584,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,2585,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2586,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2588,"reloadingController.resetReloadingState();
","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2591,"catch (final Exception e)
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2593,"catch (final Exception e)
","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,2597,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2598,"final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2599,"catch (final Exception ex)
","private FileSystemOptions getOptions(final String scheme) {
final FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2600,"catch (final Exception ex)
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2601,"{
@Override
public InputSource resolveEntity(final String publicId, final String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(final String publicId, final String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2602,"catch (final Exception e)
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(final String publicId, final String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,2603,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2604,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,2606,"return (src != null) ? src.clone() : null;
","private static <T> T[] defensiveCopy(final T[] src) {
return (src != null) ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2610,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2611,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2612,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2616,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2617,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2618,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2619,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2620,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2621,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2622,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2623,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isLoggable(Level.FINE)) {
getLogger().fine(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2627,private ConfigurationNode combinedRoot;,private ConfigurationNode combinedRoot;
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,2628,"catch (Exception ex)
","public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (ConfigData cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,2630,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>();
for (ConfigData config : configurations)
{
list.add(config.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>();
for (ConfigData config : configurations)
{
list.add(config.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if ((configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
synchronized (getNodeCombiner()) 
{
combinedRoot = null;
}
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
synchronized (getNodeCombiner())
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Object getProperty(String key)
{
if (isForceReloadCheck())
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
return super.getProperty(key);
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key + "" is defined by multiple sources!"");
}
}
return source;
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isLoggable(Level.FINEST))
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().finest(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isLoggable(Level.FINEST)) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().finest(os.toString());
}
return node;
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,2632,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isLoggable(Level.FINE)) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.fine(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURI().toURL();
log.fine(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.log(Level.WARNING, ""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.fine(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.log(Level.WARNING, ""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.fine(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.log(Level.WARNING, ""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2633,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2635,protected Configuration configuration;,protected Configuration configuration;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2636,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
results.addAll(PropertyConverter.flatten(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
return (results.size() > 1) ? results : results.get(0);
} else {
return null;
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2637,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_GET_KEYS, keyColumn, table), true);
ResultSet rs = ps.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
return null;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2638,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2639,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_IS_EMPTY, table), true);
ResultSet rs = ps.executeQuery();
return rs.next() ? rs.getInt(1) : null;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2640,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && nameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(nameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2641,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2642,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,2643,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2644,private List<ConfigData> configurations = new ArrayList<ConfigData>();,private List<ConfigData> configurations = new ArrayList<ConfigData>();
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2645,"if (configs != null)
","public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2649,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2650,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,2656,"public class MultiFileHierarchicalConfiguration extends AbstractHierarchicalFileConfiguration
implements ConfigurationListener, ConfigurationErrorListener, EntityResolverSupport
{
private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = """";
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
public void clear()
{
this.getConfiguration().clear();
}
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public <T> List<T> getList(String key, List<T> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public <T> List<T> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubConfiguration<ConfigurationNode> configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubConfiguration<ConfigurationNode> configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<SubConfiguration<ConfigurationNode>> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
public void load() throws ConfigurationException
{
this.getConfiguration();
}
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public ConfigurationNode getRootNode()
{
return getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Collection<ConfigurationListener> listeners = getConfigurationListeners();
for (ConfigurationListener listener : listeners)
{
listener.configurationChanged(event);
}
}
}
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Collection<ConfigurationErrorListener> listeners = getErrorListeners();
for (ConfigurationErrorListener listener : listeners)
{
listener.configurationError(event);
}
}
}
protected Object resolveContainerStore(String key)
{
if (recursive.get())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = getSubstitutor().replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Logger log = Logger.getLogger(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (!ignoreException)
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private ReloadingStrategy createReloadingStrategy()
{
if (getReloadingStrategy() == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private ReloadingStrategy createReloadingStrategy() {
if (getReloadingStrategy() == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2658,"{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2659,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,2660,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = getSubstitutor().replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
public void load() throws ConfigurationException {
}
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Logger log = Logger.getLogger(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (!ignoreException) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,2661,"if (!init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (!init) {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2662,"catch (Exception ex)
","@Override
public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2663,"catch (Exception ex)
","public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
setRootNode(currentRoot);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2665,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","public void save(Writer writer) throws ConfigurationException {
try {
Transformer transformer = createTransformer();
Source source = new DOMSource(createDocument());
Result result = new StreamResult(writer);
transformer.transform(source, result);
} catch (TransformerException e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
} catch (TransformerFactoryConfigurationError err) {
throw new ConfigurationException(""Unable to save the configuration"", err);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,2666,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2667,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,2670,"catch (Exception ex)
","protected void performReloadCheck() {
for (ConfigData<?> cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2674,"return new Byte(n.byteValue());
","public Byte convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2675,"return new Double(n.doubleValue());
","public Double convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,2676,"return new Float(n.floatValue());
","public Float convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2677,"return new Integer(n.intValue());
","public Integer convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2678,"return new Long(n.longValue());
","public Long convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,2679,"return new Short(n.shortValue());
","public Short convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,2680,"public class ConfigurationNodeHandler extends AbstractNodeHandler<ConfigurationNode>
implements NodeHandler<ConfigurationNode>
{
public ConfigurationNode addChild(ConfigurationNode node, String name)
{
ConfigurationNode child = createNode(node, name);
node.addChild(child);
return child;
}
public Object getAttributeValue(ConfigurationNode node, String name)
{
List<ConfigurationNode> attrs = node.getAttributes(name);
if (attrs.isEmpty())
{
return null;
}
else if (attrs.size() == 1)
{
return attrs.get(0).getValue();
}
else
{
List<Object> result = new ArrayList<Object>(attrs.size());
for (ConfigurationNode attr : attrs)
{
result.add(attr.getValue());
}
return result;
}
}
public List<String> getAttributes(ConfigurationNode node)
{
List<ConfigurationNode> attrs = node.getAttributes();
assert attrs != null : ""Attribute list is null"";
List<String> names = new ArrayList<String>(attrs.size());
for (ConfigurationNode n : attrs)
{
names.add(n.getName());
}
return names;
}
@Override
public boolean hasAttributes(ConfigurationNode node)
{
return !node.getAttributes().isEmpty();
}
public ConfigurationNode getChild(ConfigurationNode node, int index)
{
return node.getChild(index);
}
public List<ConfigurationNode> getChildren(ConfigurationNode node)
{
return node.getChildren();
}
public List<ConfigurationNode> getChildren(ConfigurationNode node,
String name)
{
return node.getChildren(name);
}
public ConfigurationNode getParent(ConfigurationNode node)
{
return node.getParentNode();
}
public Object getValue(ConfigurationNode node)
{
return node.getValue();
}
public String nodeName(ConfigurationNode node)
{
return node.getName();
}
public void setAttributeValue(ConfigurationNode node, String name,
Object value)
{
node.removeAttribute(name);
addAttributeValue(node, name, value);
}
public void addAttributeValue(ConfigurationNode node, String name,
Object value)
{
ConfigurationNode attr = createNode(node, name);
attr.setValue(value);
node.addAttribute(attr);
}
public void setValue(ConfigurationNode node, Object value)
{
node.setValue(value);
}
protected ConfigurationNode createNode(ConfigurationNode parent, String name)
{
ConfigurationNode node = new DefaultConfigurationNode(name);
node.setParentNode(parent);
return node;
}
public void removeAttribute(ConfigurationNode node, String name)
{
node.removeAttribute(name);
}
public void removeChild(ConfigurationNode node, ConfigurationNode child)
{
node.removeChild(child);
}
public int getChildrenCount(ConfigurationNode node, String name)
{
return node.getChildrenCount(name);
","public void addAttributeValue(ConfigurationNode node, String name, Object value) {
ConfigurationNode attr = createNode(node, name);
attr.setValue(value);
node.addAttribute(attr);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2681,"T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
","@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2682,private NodeHandler<T> nodeHandler;,private NodeHandler<T> nodeHandler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2683,"T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
","@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2684,"return new ConfigurationNodeIteratorChildren<T>(this, test, reverse,
","@SuppressWarnings(""unchecked"")
@Override
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
return new ConfigurationNodeIteratorChildren<T>(this, test, reverse, (ConfigurationNodePointer<T>) startWith);
}"
CORRECTNESS,NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS,FP,2,8,configuration,2728,"return instance.getByteArray(null, null);
","public static synchronized byte[] decodeBase64(String base64String) {
instance.put(null, base64String);
return instance.getByteArray(null, null);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,2729,public Token currentToken;,public Token currentToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2732,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2733,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,2734,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2735,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2736,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,2737,"switch (i) {
case 0: jj_3_1(); break;
","private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
try {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2738,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2739,"String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2740,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof AbstractHierarchicalConfiguration)
{
AbstractHierarchicalConfiguration conf = (AbstractHierarchicalConfiguration) child.getValue();
ConfigurationNode root = (ConfigurationNode) conf.getRootNode();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (ConfigurationNode) children.get(i);
configuration.getRootNode().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof AbstractHierarchicalConfiguration) {
AbstractHierarchicalConfiguration conf = (AbstractHierarchicalConfiguration) child.getValue();
ConfigurationNode root = (ConfigurationNode) conf.getRootNode();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (ConfigurationNode) children.get(i);
configuration.getRootNode().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2741,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,2742,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,2743,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2744,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2745,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2746,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2747,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2748,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2749,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2750,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2751,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2752,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2753,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (tabSize - (column % tabSize));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2754,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2755,"ReInit(dstream, encoding, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2756,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2757,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2758,"this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2759,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2760,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,2761,public Token specialToken;,public Token specialToken;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,2762,public int endLine;,public int endLine;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,2763,public int endColumn;,public int endColumn;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,2764,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2765,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,2766,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void setProperty(String key, Object value) {
if (value instanceof byte[]) {
fireEvent(EVENT_SET_PROPERTY, key, value, true);
setDetailEvents(false);
try {
clearProperty(key);
addPropertyDirect(key, value);
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_SET_PROPERTY, key, value, false);
} else {
super.setProperty(key, value);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2767,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,2769,"synchronized (INIT_GATE)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
FileObject file;
try {
FileSystemManager fsManager = VFS.getManager();
FileSystem fs = ((FileSystemBased) configuration).getFileSystem();
String uri = fs.getPath(null, configuration.getURL(), configuration.getBasePath(), configuration.getFileName());
if (uri == null) {
throw new ConfigurationRuntimeException(""Unable to determine file to monitor"");
}
file = fsManager.resolveFile(uri);
} catch (FileSystemException fse) {
String msg = ""Unable to monitor "" + configuration.getURL().toString();
throw new ConfigurationRuntimeException(msg, fse);
}
synchronized (INIT_GATE) {
if (fm == null) {
fm = new DefaultFileMonitor(null);
long delayTime = (delay > DEFAULT_DELAY) ? delay : DEFAULT_DELAY;
fm.setDelay(delayTime);
fm.start();
} else {
long delayTime = fm.getDelay();
if (delay > delayTime) {
fm.setDelay(delay);
}
}
file.getFileSystem().addListener(file, this);
fm.addFile(file);
strategies.put(file, this);
}
}"
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,2770,"synchronized (INIT_GATE)
","public static void stopMonitor() {
synchronized (INIT_GATE) {
if (fm != null) {
fm.stop();
fm = null;
}
for (Map.Entry<FileObject, VFSFileMonitorReloadingStrategy> entry : strategies.entrySet()) {
FileObject file = entry.getKey();
file.getFileSystem().removeListener(file, entry.getValue());
}
strategies.clear();
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2776,"List<ConfigurationNode> nodes = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
this.nodes.remove(node);
List<ConfigurationNode> nodes = namedNodes.get(node.getName());
if (nodes != null) {
nodes.remove(node);
if (nodes.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2777,"List<ConfigurationNode> nodes = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> nodes = namedNodes.remove(name);
if (nodes != null) {
detachNodes(nodes);
this.nodes.removeAll(nodes);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2778,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2779,"return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,2780,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2781,private ConfigurationNode node;,private ConfigurationNode node;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2956,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,2957,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2958,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2959,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,2960,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
combinedRoot = null;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
",private volatile ConfigurationNode combinedRoot;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2961,private volatile ConfigurationNode combinedRoot;,private volatile ConfigurationNode combinedRoot;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2963,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2964,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,2965,"return count % 2 == 1;
","private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,2966,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,2967,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2969,"catch (Exception e)
","static URL toURL(File file) throws MalformedURLException {
if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {
try {
Method toURI = file.getClass().getMethod(""toURI"", (Class[]) null);
Object uri = toURI.invoke(file, (Class[]) null);
Method toURL = uri.getClass().getMethod(""toURL"", (Class[]) null);
URL url = (URL) toURL.invoke(uri, (Class[]) null);
return url;
} catch (Exception e) {
throw new MalformedURLException(e.getMessage());
}
} else {
return file.toURL();
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2970,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2971,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2972,"pstmt = conn.prepareStatement(query.toString());
","public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2973,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2974,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2975,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2976,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2977,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,2978,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,2979,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2980,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,2981,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
Multithreaded correctness,WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL,FP,2,14,configuration,2982,"synchronized (getClass())
","private void registerBeanFactory() {
synchronized (getClass()) {
if (!BeanHelper.registeredFactoryNames().contains(CONFIG_BEAN_FACTORY_NAME)) {
BeanHelper.registerBeanFactory(CONFIG_BEAN_FACTORY_NAME, new ConfigurationBeanFactory());
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,2983,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,2984,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,2989,"catch (Exception ex)
","void extractProperties15() {
try {
Method method = System.class.getMethod(METHOD_NAME, null);
environment = (Map) method.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,2990,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,2991,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,3000,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,3001,"return bsCount % 2 == 1;
","private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3002,"catch (Exception e)
","static boolean isEnum(Class cls) {
if (!SystemUtils.isJavaVersionAtLeast(JAVA_VERSION_1_5)) {
return false;
}
try {
Method isEnumMethod = Class.class.getMethod(""isEnum"", new Class[] {});
return ((Boolean) isEnumMethod.invoke(cls, new Object[] {})).booleanValue();
} catch (Exception e) {
throw new RuntimeException(e.getMessage());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,3003,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3004,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3005,"catch (Exception ex)
","public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = (ConfigurationNode) nodes.get(0);
if (currentRoot != super.getRootNode()) {
setRootNode(currentRoot);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,3006,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3008,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private DocumentBuilder documentBuilder;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3009,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3010,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3011,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3012,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,2,18,configuration,3014,"initProperty(bean, propName, properties.get(propName));
","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}"
DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,2,16,configuration,3015,"throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}"
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,3016,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,3017,public Token currentToken;,public Token currentToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3018,"String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public Node Property() throws ParseException {
String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3019,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3020,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3021,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,3022,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3023,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3024,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,3025,"switch (i) {
case 0: jj_3_1(); break;
","final private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
}
jj_rescan = false;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3026,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3027,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
PERFORMANCE,UUF_UNUSED_FIELD,FP,2,18,configuration,3028,private boolean jj_semLA;,private boolean jj_semLA;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3029,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3030,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,3031,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3032,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,3033,"jjstateSet[jjnewStateCnt++] = jjnextStates[start];
}
while (start++ != end);
}
","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,3034,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3035,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3036,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,2,18,configuration,3037,"jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}
","private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3038,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3039,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3040,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3041,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3042,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3043,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3044,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3045,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3046,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3047,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3048,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3049,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3050,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3051,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3052,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3053,"char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else
{
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
","public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,3054,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,3055,public Token specialToken;,public Token specialToken;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,3056,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3057,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3058,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3059,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3060,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3061,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,2,18,configuration,3062,"private StringBuffer buffer = new StringBuffer();
private List stack = new ArrayList();
public XMLPropertyListHandler(Node root)
{
push(root);
}
private Node peek()
{
if (!stack.isEmpty())
{
return (Node) stack.get(stack.size() - 1);
}
else
{
return null;
}
}
private Node pop()
{
if (!stack.isEmpty())
{
return (Node) stack.remove(stack.size() - 1);
}
else
{
return null;
}
}
private void push(Node node)
{
stack.add(node);
}
public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException
{
if (""array"".equals(qName))
{
push(new ArrayNode());
}
else if (""dict"".equals(qName))
{
if (peek() instanceof ArrayNode)
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) peek();
node.addValue(config);
push(config.getRoot());
}
}
}
public void endElement(String uri, String localName, String qName) throws SAXException
{
if (""key"".equals(qName))
{
PListNode node = new PListNode();
node.setName(buffer.toString());
peek().addChild(node);
push(node);
}
else if (""dict"".equals(qName))
{
pop();
}
else
{
if (""string"".equals(qName))
{
((PListNode) peek()).addValue(buffer.toString());
}
else if (""integer"".equals(qName))
{
((PListNode) peek()).addIntegerValue(buffer.toString());
}
else if (""real"".equals(qName))
{
((PListNode) peek()).addRealValue(buffer.toString());
}
else if (""true"".equals(qName))
{
((PListNode) peek()).addTrueValue();
}
else if (""false"".equals(qName))
{
((PListNode) peek()).addFalseValue();
}
else if (""data"".equals(qName))
{
((PListNode) peek()).addDataValue(buffer.toString());
}
else if (""date"".equals(qName))
{
((PListNode) peek()).addDateValue(buffer.toString());
}
else if (""array"".equals(qName))
{
ArrayNode array = (ArrayNode) pop();
((PListNode) peek()).addList(array);
}
if (!(peek() instanceof ArrayNode))
{
pop();
}
}
buffer.setLength(0);
}
public void characters(char[] ch, int start, int length) throws SAXException
{
buffer.append(ch, start, length);
}
","public void setProperty(String key, Object value) {
if (value instanceof byte[]) {
fireEvent(EVENT_SET_PROPERTY, key, value, true);
setDetailEvents(false);
try {
clearProperty(key);
addPropertyDirect(key, value);
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_SET_PROPERTY, key, value, false);
} else {
super.setProperty(key, value);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3063,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3064,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3065,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3066,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3067,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3068,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3069,private ConfigurationNode node;,private ConfigurationNode node;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3151,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,3154,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<>();
namedConfigurations = new HashMap<>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3155,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3156,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3157,"dump(configuration, new PrintWriter(out));
","public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3158,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3159,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,3160,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3162,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3163,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3164,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,3166,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3168,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3169,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3170,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3172,"reloadingController.resetReloadingState();
","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3173,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3174,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3175,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3177,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3181,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,3182,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3183,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3184,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3185,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3186,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,3187,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3188,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3189,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,3190,"return (src != null) ? src.clone() : null;
","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3194,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3195,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3196,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3380,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3381,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,3382,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if(optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3383,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3384,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3385,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3386,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3387,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3388,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3390,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3391,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3392,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,3394,private final Configuration configuration;,private final Configuration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3396,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3397,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3398,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3400,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3401,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3402,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3403,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3404,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3405,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3406,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3407,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3408,private final EventType<?> errorOperationType;,private final EventType<?> errorOperationType;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3409,private final EventType<? extends Event> eventType;,private final EventType<? extends Event> eventType;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3411,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,3413,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3417,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3418,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,3419,private final String protocol;,private final String protocol;
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,3420,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,3421,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3422,"if (locator.getEncoding() != null)
","@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
if (locator.getEncoding() != null) {
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
writer.println(""<?xml version=\""1.0\""?>"");
}
writer.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
writer.println(""<plist version=\""1.0\"">"");
printNode(writer, 1, getNodeModel().getNodeHandler().getRootNode());
writer.println(""</plist>"");
writer.flush();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3423,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNodeBuilder.FORMAT) {
out.println(padding + ""<date>"" + PListNodeBuilder.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
for (Object o : (List<?>) value) {
printValue(out, indentLevel + 1, o);
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
@SuppressWarnings(""unchecked"")
HierarchicalConfiguration<ImmutableNode> config = (HierarchicalConfiguration<ImmutableNode>) value;
printNode(out, indentLevel, config.getNodeModel().getNodeHandler().getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3424,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3425,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3426,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3427,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3428,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,3429,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,3430,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3434,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3435,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3436,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3576,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3577,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3578,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3579,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3580,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3581,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3582,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3583,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3584,private List<ConfigData> configurations;,private List<ConfigData> configurations;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,3585,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3586,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3587,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3588,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,3589,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,3590,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3591,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3592,protected Configuration configuration;,protected Configuration configuration;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3593,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3594,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3595,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3596,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3597,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3598,"ResultSet rs = pstmt.executeQuery();
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3599,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3600,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3601,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3602,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,3603,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3604,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3605,"private Map<String, ConfigurationProvider> providers;","private Map<String, ConfigurationProvider> providers;"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3606,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,3607,"catch (Exception e)
","public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,3608,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,3609,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3610,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,3612,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3613,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,3616,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,3617,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
@Override
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,3618,private final Object reloadLock;,private final Object reloadLock;
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,3619,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,3620,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3622,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
",private ReloadingStrategy fileStrategy;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,3623,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,3624,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3625,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,3626,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,3627,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,3628,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,3629,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
public Object getReloadLock()
{
return config.getReloadLock();
}
@Override
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
public void clear()
{
getConfig().clear();
}
@Override
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
@Override
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return config.getKeys(makePath());
}
@Override
public Iterator<String> getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
public boolean isEmpty()
{
return getConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return getConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
@Override
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,3630,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3631,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3632,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3633,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3634,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3635,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3636,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3637,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3638,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3639,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,3640,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3641,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,3642,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,3643,private final String protocol;,private final String protocol;
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,3644,"{
super(name);
setReference(elem);
}
@Override
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
@Override
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection<org.w3c.dom.Node> textNodes = new ArrayList<org.w3c.dom.Node>();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (org.w3c.dom.Node tn : textNodes)
{
elem.removeChild(tn);
}
return result;
",private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,3645,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,3646,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3647,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,3648,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3649,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,3650,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3651,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3652,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,3653,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3654,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3655,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3656,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3657,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3658,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,3659,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,3660,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,3661,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,3662,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3663,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3664,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3665,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3666,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3667,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3668,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3669,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3670,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3677,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3678,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,3679,"public class BaseHierarchicalConfiguration extends AbstractHierarchicalConfiguration<ImmutableNode>
implements Cloneable, InMemoryNodeModelSupport
{
private final EventListener<ConfigurationEvent> changeListener;
public BaseHierarchicalConfiguration()
{
this((HierarchicalConfiguration<ImmutableNode>) null);
}
public BaseHierarchicalConfiguration(HierarchicalConfiguration<ImmutableNode> c)
{
this(createNodeModel(c));
}
protected BaseHierarchicalConfiguration(NodeModel<ImmutableNode> model)
{
super(model);
changeListener = createChangeListener();
}
@Override
public InMemoryNodeModel getNodeModel()
{
return (InMemoryNodeModel) super.getNodeModel();
}
@Override
public Configuration subset(String prefix)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);
if (results.isEmpty())
{
return new BaseHierarchicalConfiguration();
}
final BaseHierarchicalConfiguration parent = this;
BaseHierarchicalConfiguration result =
new BaseHierarchicalConfiguration()
{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
}
};
result.getModel().setRootNode(createSubsetRootNode(results));
if (result.isEmpty())
{
return new BaseHierarchicalConfiguration();
}
else
{
result.setSynchronizer(getSynchronizer());
return result;
}
}
finally
{
endRead();
}
}
private ImmutableNode createSubsetRootNode(
Collection<QueryResult<ImmutableNode>> results)
{
ImmutableNode.Builder builder = new ImmutableNode.Builder();
Object value = null;
int valueCount = 0;
for (QueryResult<ImmutableNode> result : results)
{
if (result.isAttributeResult())
{
builder.addAttribute(result.getAttributeName(),
result.getAttributeValue(getModel().getNodeHandler()));
}
else
{
if (result.getNode().getValue() != null)
{
value = result.getNode().getValue();
valueCount++;
}
builder.addChildren(result.getNode().getChildren());
builder.addAttributes(result.getNode().getAttributes());
}
}
if (valueCount == 1)
{
builder.value(value);
}
return builder.create();
}
@Override
public HierarchicalConfiguration<ImmutableNode> configurationAt(String key,
boolean supportUpdates)
{
beginRead(false);
try
{
return supportUpdates ? createConnectedSubConfiguration(key)
: createIndependentSubConfiguration(key);
}
finally
{
endRead();
}
}
protected InMemoryNodeModel getSubConfigurationParentModel()
{
return (InMemoryNodeModel) getModel();
}
protected NodeSelector getSubConfigurationNodeSelector(String key)
{
return new NodeSelector(key);
}
protected SubnodeConfiguration createSubConfigurationForTrackedNode(
NodeSelector selector, InMemoryNodeModelSupport parentModelSupport)
{
SubnodeConfiguration subConfig =
new SubnodeConfiguration(this, new TrackedNodeModel(
parentModelSupport, selector, true));
initSubConfigurationForThisParent(subConfig);
return subConfig;
}
protected void initSubConfigurationForThisParent(SubnodeConfiguration subConfig)
{
initSubConfiguration(subConfig);
subConfig.addEventListener(ConfigurationEvent.ANY, changeListener);
}
private BaseHierarchicalConfiguration createConnectedSubConfiguration(
String key)
{
NodeSelector selector = getSubConfigurationNodeSelector(key);
getSubConfigurationParentModel().trackNode(selector, this);
return createSubConfigurationForTrackedNode(selector, this);
}
private List<HierarchicalConfiguration<ImmutableNode>> createConnectedSubConfigurations(
InMemoryNodeModelSupport parentModelSupport,
Collection<NodeSelector> selectors)
{
List<HierarchicalConfiguration<ImmutableNode>> configs =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(
selectors.size());
for (NodeSelector selector : selectors)
{
configs.add(createSubConfigurationForTrackedNode(selector,
parentModelSupport));
}
return configs;
}
private BaseHierarchicalConfiguration createIndependentSubConfiguration(
String key)
{
List<ImmutableNode> targetNodes = fetchFilteredNodeResults(key);
if (targetNodes.size() != 1)
{
throw new ConfigurationRuntimeException(
""Passed in key must select exactly one node: "" + key);
}
BaseHierarchicalConfiguration sub =
new BaseHierarchicalConfiguration(new InMemoryNodeModel(
targetNodes.get(0)));
initSubConfiguration(sub);
return sub;
}
private BaseHierarchicalConfiguration createIndependentSubConfigurationForNode(
ImmutableNode node)
{
BaseHierarchicalConfiguration sub =
new BaseHierarchicalConfiguration(new InMemoryNodeModel(node));
initSubConfiguration(sub);
return sub;
}
private List<ImmutableNode> fetchFilteredNodeResults(String key)
{
NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
return resolveNodeKey(handler.getRootNode(), key, handler);
}
@Override
public ImmutableHierarchicalConfiguration immutableConfigurationAt(
String key, boolean supportUpdates)
{
return ConfigurationUtils.unmodifiableConfiguration(configurationAt(
key, supportUpdates));
}
@Override
public HierarchicalConfiguration<ImmutableNode> configurationAt(String key)
{
return configurationAt(key, false);
}
@Override
public ImmutableHierarchicalConfiguration immutableConfigurationAt(
String key)
{
return ConfigurationUtils.unmodifiableConfiguration(configurationAt(
key));
}
@Override
public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(
String key)
{
List<ImmutableNode> nodes;
beginRead(false);
try
{
nodes = fetchFilteredNodeResults(key);
}
finally
{
endRead();
}
List<HierarchicalConfiguration<ImmutableNode>> results =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(
nodes.size());
for (ImmutableNode node : nodes)
{
BaseHierarchicalConfiguration sub =
createIndependentSubConfigurationForNode(node);
results.add(sub);
}
return results;
}
@Override
public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(
String key, boolean supportUpdates)
{
if (!supportUpdates)
{
return configurationsAt(key);
}
InMemoryNodeModel parentModel;
beginRead(false);
try
{
parentModel = getSubConfigurationParentModel();
}
finally
{
endRead();
}
Collection<NodeSelector> selectors =
parentModel.selectAndTrackNodes(key, this);
return createConnectedSubConfigurations(this, selectors);
}
@Override
public List<ImmutableHierarchicalConfiguration> immutableConfigurationsAt(
String key)
{
return toImmutable(configurationsAt(key));
}
@Override
public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(
String key)
{
List<ImmutableNode> nodes;
beginRead(false);
try
{
nodes = fetchFilteredNodeResults(key);
}
finally
{
endRead();
}
if (nodes.size() != 1)
{
return Collections.emptyList();
}
ImmutableNode parent = nodes.get(0);
List<HierarchicalConfiguration<ImmutableNode>> subs =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(parent
.getChildren().size());
for (ImmutableNode node : parent.getChildren())
{
subs.add(createIndependentSubConfigurationForNode(node));
}
return subs;
}
@Override
public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(
String key, boolean supportUpdates)
{
if (!supportUpdates)
{
return childConfigurationsAt(key);
}
InMemoryNodeModel parentModel = getSubConfigurationParentModel();
return createConnectedSubConfigurations(this,
parentModel.trackChildNodes(key, this));
}
@Override
public List<ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(
String key)
{
return toImmutable(childConfigurationsAt(key));
}
protected void subnodeConfigurationChanged(ConfigurationEvent event)
{
fireEvent(ConfigurationEvent.SUBNODE_CHANGED, null, event, event.isBeforeUpdate());
}
private void initSubConfiguration(BaseHierarchicalConfiguration sub)
{
sub.setSynchronizer(getSynchronizer());
sub.setExpressionEngine(getExpressionEngine());
sub.setListDelimiterHandler(getListDelimiterHandler());
sub.setThrowExceptionOnMissing(isThrowExceptionOnMissing());
sub.getInterpolator().setParentInterpolator(getInterpolator());
}
private EventListener<ConfigurationEvent> createChangeListener()
{
return new EventListener<ConfigurationEvent>()
{
@Override
public void onEvent(ConfigurationEvent event)
{
subnodeConfigurationChanged(event);
}
};
}
@Override
public Configuration interpolatedConfiguration()
{
InterpolatedVisitor visitor = new InterpolatedVisitor();
NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
NodeTreeWalker.INSTANCE
.walkDFS(handler.getRootNode(), visitor, handler);
BaseHierarchicalConfiguration c =
(BaseHierarchicalConfiguration) clone();
c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
return c;
}
@Override
protected NodeModel<ImmutableNode> cloneNodeModel()
{
return new InMemoryNodeModel(getModel().getNodeHandler().getRootNode());
}
private static List<ImmutableHierarchicalConfiguration> toImmutable(
List<? extends HierarchicalConfiguration<?>> subs)
{
List<ImmutableHierarchicalConfiguration> res =
new ArrayList<ImmutableHierarchicalConfiguration>(subs.size());
for (HierarchicalConfiguration<?> sub : subs)
{
res.add(ConfigurationUtils.unmodifiableConfiguration(sub));
}
return res;
}
private static NodeModel<ImmutableNode> createNodeModel(
HierarchicalConfiguration<ImmutableNode> c)
{
ImmutableNode root = (c != null) ? obtainRootNode(c) : null;
return new InMemoryNodeModel(root);
}
private static ImmutableNode obtainRootNode(
HierarchicalConfiguration<ImmutableNode> c)
{
return c.getNodeModel().getNodeHandler().getRootNode();
","private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {
Collection<ImmutableNode> subNodes = new LinkedList<ImmutableNode>(refHandler.getChildren(node));
Iterator<ImmutableNode> children = subNodes.iterator();
ImmutableNode sibling1;
ImmutableNode nd = null;
while (children.hasNext()) {
do {
sibling1 = nd;
nd = children.next();
} while (refHandler.getReference(nd) != null && children.hasNext());
if (refHandler.getReference(nd) == null) {
List<ImmutableNode> newNodes = new LinkedList<ImmutableNode>();
newNodes.add(nd);
while (children.hasNext()) {
nd = children.next();
if (refHandler.getReference(nd) == null) {
newNodes.add(nd);
} else {
break;
}
}
ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
for (ImmutableNode insertNode : newNodes) {
if (refHandler.getReference(insertNode) == null) {
insert(insertNode, node, sibling1, sibling2, refHandler);
sibling1 = insertNode;
}
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3680,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3681,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,3682,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","public List<Configuration> getConfigurations() {
beginRead(true);
try {
List<Configuration> list = new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations) {
list.add(cd.getConfiguration());
}
return list;
} finally {
endRead();
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3683,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3684,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3685,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3687,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3688,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3689,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,3691,"public static final EventType<ConfigurationBuilderResultCreatedEvent> RESULT_CREATED =
new EventType<ConfigurationBuilderResultCreatedEvent>(ANY,
""RESULT_CREATED"");
private final ImmutableConfiguration configuration;
public ConfigurationBuilderResultCreatedEvent(
ConfigurationBuilder<?> source,
EventType<? extends ConfigurationBuilderResultCreatedEvent> evType,
ImmutableConfiguration createdConfiguration)
{
super(source, evType);
if (createdConfiguration == null)
{
throw new IllegalArgumentException(
""Configuration must not be null!"");
}
configuration = createdConfiguration;
}
public ImmutableConfiguration getConfiguration()
{
return configuration;
",private final ImmutableConfiguration configuration;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,3692,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3693,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3694,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3695,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3697,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3698,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3699,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3700,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3702,"{
@Override
public String lookup(String key)
{
Object value = ip.resolve(key);
return (value != null) ? value.toString() : null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3703,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3706,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3707,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,3708,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3709,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3710,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3711,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNodeBuilder.FORMAT) {
out.println(padding + ""<date>"" + PListNodeBuilder.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
for (Object o : (List<?>) value) {
printValue(out, indentLevel + 1, o);
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
@SuppressWarnings(""unchecked"")
HierarchicalConfiguration<ImmutableNode> config = (HierarchicalConfiguration<ImmutableNode>) value;
printNode(out, indentLevel, config.getNodeModel().getNodeHandler().getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64;
try {
base64 = new String(Base64.encodeBase64((byte[]) value), DATA_ENCODING);
} catch (UnsupportedEncodingException e) {
throw new AssertionError(e);
}
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml10(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml10(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3712,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3713,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,3714,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,3715,"return (src != null) ? src.clone() : null;
","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3719,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3720,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3721,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3857,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3858,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3859,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3860,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3861,"value = array.length == 0 ? null : new Integer(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3862,"value = array.length == 0 ? null : new Long(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3863,"value = array.length == 0 ? null : new Float(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3864,"value = array.length == 0 ? null : new Byte(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3865,"{
public boolean evaluate(Object obj)
{
String key = (String) obj;
return key.startsWith(prefix + ""."") || key.equals(prefix);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3866,"value = array.length == 0 ? null : new Double(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3867,"value = array.length == 0 ? null : new Short(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3868,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3869,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,3870,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3871,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3872,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
try {
clear();
load();
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3873,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,3874,"catch (Exception ex)
","public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,3875,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
synchronized (getNodeCombiner()) 
{
combinedRoot = null;
}
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
invalidate();
}
public ConfigurationNode getRootNode()
{
synchronized (getNodeCombiner())
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Object getProperty(String key)
{
if (isForceReloadCheck())
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
return super.getProperty(key);
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
return node;
","private Collection parseAt(String at) {
if (at == null) {
return null;
}
Collection result = new ArrayList();
DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(AT_ENGINE, at).iterator();
while (it.hasNext()) {
result.add(it.nextKey());
}
return result;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3876,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3877,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,3878,"return count % 2 == 1;
","private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3879,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,3880,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3882,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3883,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3884,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3885,"pstmt = conn.prepareStatement(query.toString());
","public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3886,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3887,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3888,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,3889,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3890,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3891,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3892,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,3893,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,3894,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3895,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3896,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3897,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,3898,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
","public void clearTree(String key) {
fireEvent(EVENT_CLEAR_TREE, key, null, true);
List nodes = fetchNodeList(key);
for (Iterator it = nodes.iterator(); it.hasNext(); ) {
removeNode((ConfigurationNode) it.next());
}
fireEvent(EVENT_CLEAR_TREE, key, nodes, false);
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,3899,"return bsCount % 2 == 1;
","private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,3900,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3901,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3902,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3903,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3904,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3905,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3906,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3907,private Document document;,private Document document;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3909,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3910,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3911,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3912,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,2,18,configuration,3913,"initProperty(bean, propName, properties.get(propName));
","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3914,"getConfiguration().addProperty(name, new Float(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3915,"getConfiguration().addProperty(name, new Byte(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3916,"getConfiguration().addProperty(name, new Integer(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3917,"getConfiguration().addProperty(name, new Character(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3918,"getConfiguration().addProperty(name, new Long(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3919,"getConfiguration().addProperty(name, new Double(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3920,"getConfiguration().addProperty(name, new Short(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,2,16,configuration,3921,"throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,3922,public Token currentToken;,public Token currentToken;
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,3923,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3924,"Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
","final public Node Property() throws ParseException {
Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,3925,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw new ParseException(e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3926,"switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3927,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3928,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3929,"Token token = null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3930,"token = jj_consume_token(DATA);
return filterData(token.image);
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
return filterData(token.image);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3931,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3932,"jjround = 0x80000001;
for (i = 9; i-- > 0;)
jjrounds[i] = 0x80000000;
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 9; i-- > 0; ) jjrounds[i] = 0x80000000;
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,3933,"if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 9;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (kind > 20)
kind = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (kind > 18)
kind = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && kind > 18)
kind = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && kind > 20)
kind = 20;
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
case 5:
if ((jjbitVec0[i2] & l2) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,3934,public PrintStream debugStream = System.out;,public PrintStream debugStream = System.out;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3935,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3936,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3937,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3938,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3939,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3940,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3941,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3942,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,3943,public Token specialToken;,public Token specialToken;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,3944,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,3945,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,3946,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3947,"{
public Object createObject(Attributes attributes) throws Exception
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3948,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3950,"{
public void end() throws Exception
{
}
","public void addRealValue(String value) {
addValue(new Double(value));
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,3951,"addValue(new Double(value));
","public void addRealValue(String value) {
addValue(new Double(value));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3952,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
Multithreaded correctness,STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE,FP,2,8,configuration,3953,"addValue(format.parse(value));
","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,3954,"addValue(new Integer(value));
","public void addIntegerValue(String value) {
addValue(new Integer(value));
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,2,18,configuration,3955,"{
super(methodName);
}
public void end(String namespace, String name) throws Exception
{
super.end(namespace, name);
digester.pop();
}
","public void load(Reader in) throws ConfigurationException {
Digester digester = new Digester();
digester.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
});
digester.setValidating(true);
digester.addRule(""*/key"", new ObjectCreateRule(PListNode.class) {
public void end() throws Exception {
}
});
digester.addCallMethod(""*/key"", ""setName"", 0);
digester.addRule(""*/dict/string"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/data"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/integer"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/real"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/true"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/false"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/date"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/dict"", new SetNextAndPopRule(""addChild""));
digester.addCallMethod(""*/dict/string"", ""addValue"", 0);
digester.addCallMethod(""*/dict/data"", ""addDataValue"", 0);
digester.addCallMethod(""*/dict/integer"", ""addIntegerValue"", 0);
digester.addCallMethod(""*/dict/real"", ""addRealValue"", 0);
digester.addCallMethod(""*/dict/true"", ""addTrueValue"");
digester.addCallMethod(""*/dict/false"", ""addFalseValue"");
digester.addCallMethod(""*/dict/date"", ""addDateValue"", 0);
digester.addRule(""*/dict/array"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/array"", new ObjectCreateRule(ArrayNode.class));
digester.addSetNext(""*/dict/array"", ""addList"");
digester.addRule(""*/array/array"", new ObjectCreateRule(ArrayNode.class));
digester.addSetNext(""*/array/array"", ""addList"");
digester.addCallMethod(""*/array/string"", ""addValue"", 0);
digester.addCallMethod(""*/array/data"", ""addDataValue"", 0);
digester.addCallMethod(""*/array/integer"", ""addIntegerValue"", 0);
digester.addCallMethod(""*/array/real"", ""addRealValue"", 0);
digester.addCallMethod(""*/array/true"", ""addTrueValue"");
digester.addCallMethod(""*/array/false"", ""addFalseValue"");
digester.addCallMethod(""*/array/date"", ""addDateValue"", 0);
digester.addFactoryCreate(""*/array/dict"", new AbstractObjectCreationFactory() {
public Object createObject(Attributes attributes) throws Exception {
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
}
});
digester.push(getRoot());
try {
digester.parse(in);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3956,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3957,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3958,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3959,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3960,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3961,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,3962,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3973,"final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration() {
@Override
protected Object interpolate(final Object value) {
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator() {
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3974,"final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3975,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3976,"final PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,3977,"dump(configuration, new PrintWriter(out));
","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3978,"} catch (final Exception ex) {
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,3979,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,3980,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,3981,"result.setErrorHandler(new DefaultHandler() {
@Override
public void error(final SAXParseException ex) throws SAXException {
throw ex;
","@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3982,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3983,"} catch (final Exception ex) {
","private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,3985,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3987,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,3988,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,3989,"return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,3991,"reloadingController.resetReloadingState();
","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3992,"} catch (final Exception e) {
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
}
if (!(value instanceof String)) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3994,"} catch (final Exception e) {
","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,3997,"return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,3998,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,3999,"} catch (final Exception ex) {
","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
final FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4000,"} catch (final Exception ex) {
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4001,"final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4002,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4003,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4004,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4005,"final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,4006,"return src != null ? src.clone() : null;
","private static <T> T[] defensiveCopy(final T[] src) {
return src != null ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4007,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4008,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4009,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4033,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4034,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4035,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4036,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4037,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4038,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4039,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,4040,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURI().toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = DefaultFileSystem.constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = DefaultFileSystem.constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4041,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4042,protected Configuration configuration;,protected Configuration configuration;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4043,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_IS_EMPTY, table), true);
ResultSet rs = ps.executeQuery();
return rs.next() ? rs.getInt(1) : null;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4044,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
results.addAll(PropertyConverter.flatten(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
return (results.size() > 1) ? results : results.get(0);
} else {
return null;
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4045,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4046,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && nameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(nameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4047,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_GET_KEYS, keyColumn, table), true);
ResultSet rs = ps.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
return null;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4048,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4049,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4053,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
","public void setRootNode(ConfigurationNode rootNode) {
if (rootNode == null) {
throw new IllegalArgumentException(""Root node must not be null!"");
}
this.rootNode = rootNode;
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,4054,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4056,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,4057,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4058,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (getReloadingStrategy() == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,4059,"if (!init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (!init) {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4060,"catch (Exception ex)
","@Override
public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4062,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4063,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,4064,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4065,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4066,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4067,private FlatNode root;,private FlatNode root;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4068,"catch (Exception ex)
","public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4069,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","public String getPublicID() {
return publicID;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4070,"catch (Exception ex)
","private static Class getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,2,18,configuration,4071,"{
configuration = config;
name = n;
atPath = parseAt(at);
this.at = at;
}
public AbstractHierarchicalConfiguration<?> getConfiguration()
{
return configuration;
}
public String getName()
{
return name;
}
public String getAt()
{
return at;
}
public Object getRootNode()
{
return rootNode;
}
public CombinedNode getTransformedRoot()
{
CombinedNode result = new CombinedNode();
CombinedNode atParent = result;
if (atPath != null)
{
for (String name : atPath)
{
CombinedNode node = new CombinedNode();
node.setName(name);
atParent.addChild(name, node);
atParent = node;
}
}
rootNode = append(atParent, getConfiguration());
return result;
}
private <T> T append(CombinedNode atParent,
AbstractHierarchicalConfiguration<T> config)
{
T root = config.getRootNode();
atParent.appendChildren(root, config.getNodeHandler());
atParent.appendAttributes(root, config.getNodeHandler());
return root;
}
private Collection<String> parseAt(String at)
{
if (at == null)
{
return null;
}
Collection<String> result = new ArrayList<String>();
DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(
AT_ENGINE, at).iterator();
while (it.hasNext())
{
result.add(it.nextKey());
}
return result;
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4072,"PrintStream stream = new PrintStream(os);
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4073,"public class CombinedConfiguration extends
AbstractHierarchicalConfiguration<Object> implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final CombinedNodeHandler COMBINED_NODE_HANDLER = new CombinedNodeHandler();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private CombinedNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
private boolean ignoreReloadExceptions = true;
public CombinedConfiguration(NodeCombiner comb)
{
super(new CombinedConfigurationNodeHandler());
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config,
String name, String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.getNodeHandler().initNodeHandlerRegistry(getCombinedNodeHandler());
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config,
String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractHierarchicalConfiguration<?>> getConfigurations()
{
List<AbstractHierarchicalConfiguration<?>> list = new ArrayList<AbstractHierarchicalConfiguration<?>>();
for (ConfigData configuration : configurations)
{
list.add(configuration.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>();
for (ConfigData configuration : configurations)
{
list.add((configuration).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
synchronized (getNodeCombiner()) 
{
combinedRoot = null;
}
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public Object getRootNode()
{
synchronized (getNodeCombiner())
{
if (combinedRoot == null)
{
getCombinedNodeHandler().setHandlers(createSubHandlers());
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy
.addConfiguration(
(AbstractHierarchicalConfiguration<?>) ConfigurationUtils
.cloneConfiguration(cd
.getConfiguration()), cd
.getName(), cd.getAt());
}
return copy;
}
catch (CloneNotSupportedException cnsex)
{
throw new ConfigurationRuntimeException(cnsex);
}
}
@Override
public Object getProperty(String key)
{
if (isForceReloadCheck())
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
return super.getProperty(key);
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
NodeList<Object> nodes = fetchNodeList(key);
if (nodes.size() == 0)
{
return null;
}
Configuration source = findSourceConfiguration(nodes, 0);
for (int idx = 1; idx < nodes.size(); idx++)
{
Configuration src = findSourceConfiguration(nodes, idx);
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected Map<Class<?>, NodeHandler<?>> createSubHandlers()
{
Map<Class<?>, NodeHandler<?>> result = new HashMap<Class<?>, NodeHandler<?>>();
for (ConfigData cd : configurations)
{
result.put(cd.getConfiguration().getRootNode().getClass(), cd
.getConfiguration().getNodeHandler());
}
return result;
}
@Override
protected NodeList<Object> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
private CombinedNode constructCombinedNode()
{
initSubHandlers();
if (getNumberOfConfigurations() < 1)
{
return new CombinedNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node, getNodeHandler(),
it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}
private void initSubHandlers()
{
Map<Class<?>, NodeHandler<?>> handlers = new HashMap<Class<?>, NodeHandler<?>>(
createSubHandlers());
handlers.put(CombinedNode.class, COMBINED_NODE_HANDLER);
getCombinedNodeHandler().setHandlers(handlers);
}
private Configuration findSourceConfiguration(Object node)
{
Object root = null;
Object current = node;
while (current != null)
{
root = current;
current = getNodeHandler().getParent(current);
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
}
private Configuration findSourceConfiguration(NodeList<Object> nl, int idx)
{
return nl.isNode(idx) ? findSourceConfiguration(nl.getNode(idx))
: findSourceConfiguration(nl.getAttributeParent(idx));
}
private CombinedConfigurationNodeHandler getCombinedNodeHandler()
{
return (CombinedConfigurationNodeHandler) getNodeHandler();
","protected void performReloadCheck() {
for (ConfigData cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,4074,"catch (Exception ex)
","protected void performReloadCheck() {
for (ConfigData cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4075,"getLogger().debug(os.toString());
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4078,"return new Byte(n.byteValue());
","public Byte convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4079,"return new Double(n.doubleValue());
","public Double convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4080,"return new Float(n.floatValue());
","public Float convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4081,"return new Integer(n.intValue());
","public Integer convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4082,"return new Long(n.longValue());
","public Long convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4083,"return new Short(n.shortValue());
","public Short convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4085,private NodeHandler<T> nodeHandler;,private NodeHandler<T> nodeHandler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4086,"return new ConfigurationNodeIteratorChildren<T>(this, test, reverse,
","@SuppressWarnings(""unchecked"")
@Override
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
return new ConfigurationNodeIteratorChildren<T>(this, test, reverse, (ConfigurationNodePointer<T>) startWith);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4087,"T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
","@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4088,"T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
","@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,4090,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4092,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4093,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,4094,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,4095,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,4096,private final String protocol;,private final String protocol;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4097,"public static class Variables extends ArrayList<Variable>
{
public Variable getVariable()
{
if (size() > 0)
{
return get(size() - 1);
}
else
{
return null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4098,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4099,"ReInit(stream, null);
}
","public void ReInit(java.io.InputStream stream) {
ReInit(stream, null);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4100,"Object value = null;
Token token;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{if (true) return value;}
break;
case OBJECT_BEGIN:
value = Object();
{if (true) return value;}
break;
case STRING:
value = String();
{if (true) return value;}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{if (true) return new BigInteger(token.image);}
break;
case REAL:
token = jj_consume_token(REAL);
{if (true) return new BigDecimal(token.image);}
break;
case TRUE:
token = jj_consume_token(TRUE);
{if (true) return Boolean.TRUE;}
break;
case FALSE:
token = jj_consume_token(FALSE);
{if (true) return Boolean.FALSE;}
break;
case NULL:
token = jj_consume_token(NULL);
{if (true) return null;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Value() throws ParseException {
Object value = null;
Token token;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{
if (true)
return value;
}
break;
case OBJECT_BEGIN:
value = Object();
{
if (true)
return value;
}
break;
case STRING:
value = String();
{
if (true)
return value;
}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{
if (true)
return new BigInteger(token.image);
}
break;
case REAL:
token = jj_consume_token(REAL);
{
if (true)
return new BigDecimal(token.image);
}
break;
case TRUE:
token = jj_consume_token(TRUE);
{
if (true)
return Boolean.TRUE;
}
break;
case FALSE:
token = jj_consume_token(FALSE);
{
if (true)
return Boolean.FALSE;
}
break;
case NULL:
token = jj_consume_token(NULL);
{
if (true)
return null;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4101,"try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}
","public void ReInit(java.io.InputStream stream, String encoding) {
try {
jj_input_stream.ReInit(stream, encoding, 1, 1);
} catch (java.io.UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4102,"String key = null;
Object value = null;
key = String();
jj_consume_token(SEPARATOR);
value = Value();
ConfigurationNode node = null;
if (value instanceof AbstractHierarchicalConfiguration)
{
AbstractHierarchicalConfiguration config = (AbstractHierarchicalConfiguration) value;
node = (ConfigurationNode) config.getRootNode();
node.setName(key);
}
else if (value != null)
{
node = new DefaultConfigurationNode();
node.setValue(value);
node.setName(key);
}
{if (true) return node;}
","final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
key = String();
jj_consume_token(SEPARATOR);
value = Value();
ConfigurationNode node = null;
if (value instanceof AbstractHierarchicalConfiguration) {
AbstractHierarchicalConfiguration config = (AbstractHierarchicalConfiguration) value;
node = (ConfigurationNode) config.getRootNode();
node.setName(key);
} else if (value != null) {
node = new DefaultConfigurationNode();
node.setValue(value);
node.setName(key);
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4103,"Token token = null;
token = jj_consume_token(STRING);
{if (true) return StringEscapeUtils.unescapeJava(removeQuotes(token.image));}
","final public String String() throws ParseException {
Token token = null;
token = jj_consume_token(STRING);
{
if (true)
return StringEscapeUtils.unescapeJava(removeQuotes(token.image));
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4104,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}
","public void ReInit(JSONParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}"
DODGY_CODE,DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD,FP,2,11,configuration,4105,"token = jj_consume_token(TRUE);
","final public Object Value() throws ParseException {
Object value = null;
Token token;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{
if (true)
return value;
}
break;
case OBJECT_BEGIN:
value = Object();
{
if (true)
return value;
}
break;
case STRING:
value = String();
{
if (true)
return value;
}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{
if (true)
return new BigInteger(token.image);
}
break;
case REAL:
token = jj_consume_token(REAL);
{
if (true)
return new BigDecimal(token.image);
}
break;
case TRUE:
token = jj_consume_token(TRUE);
{
if (true)
return Boolean.TRUE;
}
break;
case FALSE:
token = jj_consume_token(FALSE);
{
if (true)
return Boolean.FALSE;
}
break;
case NULL:
token = jj_consume_token(NULL);
{
if (true)
return null;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4106,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4107,"List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(OBJECT_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
child = Property();
if (child != null) children.add(child);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
jj_consume_token(LIST_SEPARATOR);
child = Property();
if (child != null) children.add(child);
}
break;
default:
jj_la1[1] = jj_gen;
;
}
jj_consume_token(OBJECT_END);
JSONConfiguration configuration = new JSONConfiguration();
ConfigurationNode root = configuration.getRootNode();
for (int i = 0; i < children.size(); i++)
{
child = (ConfigurationNode) children.get(i);
root.addChild(child);
}
{if (true) return configuration;}
","final public JSONConfiguration Object() throws ParseException {
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(OBJECT_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
child = Property();
if (child != null)
children.add(child);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
jj_consume_token(LIST_SEPARATOR);
child = Property();
if (child != null)
children.add(child);
}
break;
default:
jj_la1[1] = jj_gen;
;
}
jj_consume_token(OBJECT_END);
JSONConfiguration configuration = new JSONConfiguration();
ConfigurationNode root = configuration.getRootNode();
for (int i = 0; i < children.size(); i++) {
child = (ConfigurationNode) children.get(i);
root.addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4108,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
element = Value();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
element = Value();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
element = Value();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
element = Value();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4109,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4110,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4111,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4112,"if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4113,"jjround = 0x80000001;
for (i = 31; i-- > 0;)
jjrounds[i] = 0x80000000;
}
","private void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 31; i-- > 0; ) jjrounds[i] = 0x80000000;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4114,public Token currentToken;,public Token currentToken;
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,4115,"retval += "" \"""";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer expected = new StringBuffer();
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected.append(""..."");
}
expected.append(eol).append(""    "");
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += "" "" + tokenImage[tok.kind];
retval += "" \"""";
retval += add_escapes(tok.image);
retval += "" \"""";
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected.toString();
return retval;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4116,"char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else
{
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
","public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4117,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4118,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4119,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4120,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4121,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4122,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4123,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (tabSize - (column % tabSize));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4124,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4125,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4126,"ReInit(dstream, encoding, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4127,"ReInit(dstream, encoding, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4128,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4129,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4130,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4131,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4132,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4133,"this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4134,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4135,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4136,public int endLine;,public int endLine;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4137,public int endColumn;,public int endColumn;
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,4138,public Token specialToken;,public Token specialToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4139,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
CORRECTNESS,NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS,FP,2,8,configuration,4140,"return instance.getByteArray(null, null);
","public static synchronized byte[] decodeBase64(String base64String) {
instance.put(null, base64String);
return instance.getByteArray(null, null);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4141,public Token currentToken;,public Token currentToken;
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,4142,"retval += "" \"""";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer expected = new StringBuffer();
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected.append(""..."");
}
expected.append(eol).append(""    "");
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += "" "" + tokenImage[tok.kind];
retval += "" \"""";
retval += add_escapes(tok.image);
retval += "" \"""";
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected.toString();
return retval;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4144,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof AbstractHierarchicalConfiguration)
{
AbstractHierarchicalConfiguration conf = (AbstractHierarchicalConfiguration) child.getValue();
ConfigurationNode root = (ConfigurationNode) conf.getRootNode();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (ConfigurationNode) children.get(i);
configuration.getRootNode().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof AbstractHierarchicalConfiguration) {
AbstractHierarchicalConfiguration conf = (AbstractHierarchicalConfiguration) child.getValue();
ConfigurationNode root = (ConfigurationNode) conf.getRootNode();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (ConfigurationNode) children.get(i);
configuration.getRootNode().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,4145,"switch (i) {
case 0: jj_3_1(); break;
","private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
try {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,4146,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4147,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4148,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4149,"String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4150,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4151,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4152,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4153,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4154,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4155,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,4156,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4157,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4158,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4159,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (tabSize - (column % tabSize));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4160,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4161,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4162,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4163,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4164,"this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4165,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4166,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4167,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4168,"ReInit(dstream, encoding, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4169,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4170,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4171,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4172,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4173,public int endColumn;,public int endColumn;
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,4174,public Token specialToken;,public Token specialToken;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4175,public int endLine;,public int endLine;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4176,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4177,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4178,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,4179,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,4180,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,4181,"String name = (url == null) ? fileName : url.toString();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4182,"fs = ((CatalogManager) catalogManager).getFileSystem();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4183,"staticCatalog = catalog;
","public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4184,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4185,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4186,"List<ConfigurationNode> nodes = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> nodes = namedNodes.remove(name);
if (nodes != null) {
detachNodes(nodes);
this.nodes.removeAll(nodes);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4187,"List<ConfigurationNode> nodes = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
this.nodes.remove(node);
List<ConfigurationNode> nodes = namedNodes.get(node.getName());
if (nodes != null) {
nodes.remove(node);
if (nodes.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4217,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4218,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4219,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4220,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4221,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4222,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4223,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4224,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4225,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
",private List<ConfigData> configurations;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4226,private List<ConfigData> configurations;,private List<ConfigData> configurations;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4227,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4228,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4229,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4230,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,4231,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,4232,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4233,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4234,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4235,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4236,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,4237,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4238,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4239,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4240,"ResultSet rs = pstmt.executeQuery();
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4241,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4242,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4243,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4244,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4245,"private Map<String, ConfigurationProvider> providers;","private Map<String, ConfigurationProvider> providers;"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4246,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4247,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,4248,"catch (Exception e)
","public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,4249,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4250,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,4251,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4255,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4256,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,4257,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,4258,private final Object reloadLock;,private final Object reloadLock;
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4260,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,4261,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4262,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,4263,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4266,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,4267,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4268,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4269,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","@Override
public long getLong(String key) {
return this.getConfiguration().getLong(key);
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,4270,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4271,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
public Object getReloadLock()
{
return config.getReloadLock();
}
@Override
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
public void clear()
{
getConfig().clear();
}
@Override
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
@Override
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return config.getKeys(makePath());
}
@Override
public Iterator<String> getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
public boolean isEmpty()
{
return getConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return getConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
@Override
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","@Override
public Integer getInteger(String key, Integer defaultValue) {
return config.getInteger(makePath(key), defaultValue);
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4272,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4273,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4274,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4275,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4276,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4277,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4278,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4279,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,4280,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,4281,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4282,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4283,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,4284,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,4285,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4286,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4287,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,4288,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4290,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,4291,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4292,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4293,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,4294,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4295,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4296,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4297,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4298,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4299,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,4300,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,4301,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4302,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,4303,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4304,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4305,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4306,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4307,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4308,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4309,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4310,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4311,private ConfigurationNode node;,private ConfigurationNode node;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4331,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4332,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4333,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,4334,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4335,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,4336,"catch (Exception ex)
","protected void performReloadCheck() {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4337,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public List getConfigurations()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getConfiguration());
}
return list;
}
public List getConfigurationNameList()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
combinedRoot = null;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
","private Configuration findSourceConfiguration(ConfigurationNode node) {
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null) {
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode()) {
return cd.getConfiguration();
}
}
return this;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4338,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4339,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4340,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,4341,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4342,"catch (Exception e)
","static URL toURL(File file) throws MalformedURLException {
if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {
try {
Method toURI = file.getClass().getMethod(""toURI"", (Class[]) null);
Object uri = toURI.invoke(file, (Class[]) null);
Method toURL = uri.getClass().getMethod(""toURL"", (Class[]) null);
URL url = (URL) toURL.invoke(uri, (Class[]) null);
return url;
} catch (Exception e) {
throw new MalformedURLException(e.getMessage());
}
} else {
return file.toURL();
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4344,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4345,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4346,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4347,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4348,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4349,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,4350,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4351,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4352,"pstmt = conn.prepareStatement(query.toString());
","public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4353,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4354,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4355,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4356,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4357,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4358,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private Map configs = new HashMap();
private List configurations = new ArrayList();
private Map namedConfigurations = new HashMap();
private String keyPattern;
private NodeCombiner nodeCombiner;
public DynamicCombinedConfiguration(NodeCombiner comb)
{
super();
setNodeCombiner(comb);
}
public DynamicCombinedConfiguration()
{
super();
}
public void setKeyPattern(String pattern)
{
this.keyPattern = pattern;
}
public String getKeyPattern()
{
return this.keyPattern;
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidateAll();
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
}
}
return super.removeConfiguration(config);
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
return super.removeConfigurationAt(index);
}
public ConfigurationNode getRootNode()
{
return getCurrentConfig().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (configs != null)
{
this.getCurrentConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public void addProperty(String key, Object value)
{
this.getCurrentConfig().addProperty(key, value);
}
public void clear()
{
if (configs != null)
{
this.getCurrentConfig().clear();
}
}
public void clearProperty(String key)
{
this.getCurrentConfig().clearProperty(key);
}
public boolean containsKey(String key)
{
return this.getCurrentConfig().containsKey(key);
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getCurrentConfig().getBigDecimal(key, defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return this.getCurrentConfig().getBigDecimal(key);
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getCurrentConfig().getBigInteger(key, defaultValue);
}
public BigInteger getBigInteger(String key)
{
return this.getCurrentConfig().getBigInteger(key);
}
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
public boolean getBoolean(String key)
{
return this.getCurrentConfig().getBoolean(key);
}
public byte getByte(String key, byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
public byte getByte(String key)
{
return this.getCurrentConfig().getByte(key);
}
public double getDouble(String key, double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
public double getDouble(String key)
{
return this.getCurrentConfig().getDouble(key);
}
public float getFloat(String key, float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
public float getFloat(String key)
{
return this.getCurrentConfig().getFloat(key);
}
public int getInt(String key, int defaultValue)
{
return this.getCurrentConfig().getInt(key, defaultValue);
}
public int getInt(String key)
{
return this.getCurrentConfig().getInt(key);
}
public Integer getInteger(String key, Integer defaultValue)
{
return this.getCurrentConfig().getInteger(key, defaultValue);
}
public Iterator getKeys()
{
return this.getCurrentConfig().getKeys();
}
public Iterator getKeys(String prefix)
{
return this.getCurrentConfig().getKeys(prefix);
}
public List getList(String key, List defaultValue)
{
return this.getCurrentConfig().getList(key, defaultValue);
}
public List getList(String key)
{
return this.getCurrentConfig().getList(key);
}
public long getLong(String key, long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
public long getLong(String key)
{
return this.getCurrentConfig().getLong(key);
}
public Properties getProperties(String key)
{
return this.getCurrentConfig().getProperties(key);
}
public Object getProperty(String key)
{
return this.getCurrentConfig().getProperty(key);
}
public short getShort(String key, short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
public short getShort(String key)
{
return this.getCurrentConfig().getShort(key);
}
public String getString(String key, String defaultValue)
{
return this.getCurrentConfig().getString(key, defaultValue);
}
public String getString(String key)
{
return this.getCurrentConfig().getString(key);
}
public String[] getStringArray(String key)
{
return this.getCurrentConfig().getStringArray(key);
}
public boolean isEmpty()
{
return this.getCurrentConfig().isEmpty();
}
public void setProperty(String key, Object value)
{
if (configs != null)
{
this.getCurrentConfig().setProperty(key, value);
}
}
public Configuration subset(String prefix)
{
return this.getCurrentConfig().subset(prefix);
}
public Node getRoot()
{
return this.getCurrentConfig().getRoot();
}
public void setRoot(Node node)
{
if (configs != null)
{
this.getCurrentConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
public void addNodes(String key, Collection nodes)
{
this.getCurrentConfig().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getCurrentConfig().configurationAt(key, supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return this.getCurrentConfig().configurationAt(key);
}
public List configurationsAt(String key)
{
return this.getCurrentConfig().configurationsAt(key);
}
public void clearTree(String key)
{
this.getCurrentConfig().clearTree(key);
}
public int getMaxIndex(String key)
{
return this.getCurrentConfig().getMaxIndex(key);
}
public Configuration interpolatedConfiguration()
{
return this.getCurrentConfig().interpolatedConfiguration();
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
return getCurrentConfig().getSource(key);
}
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.addConfigurationListener(l);
}
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.removeConfigurationListener(l);
}
return super.removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return super.getConfigurationListeners();
}
public void clearConfigurationListeners()
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.clearConfigurationListeners();
}
super.clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.addErrorListener(l);
}
super.addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.removeErrorListener(l);
}
return super.removeErrorListener(l);
}
public void clearErrorListeners()
{
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.clearErrorListeners();
}
super.clearErrorListeners();
}
public Collection getErrorListeners()
{
return super.getErrorListeners();
}
public Object clone()
{
return super.clone();
}
public void invalidate()
{
getCurrentConfig().invalidate();
}
public void invalidateAll()
{
if (configs == null)
{
return;
}
Iterator iter = configs.values().iterator();
while (iter.hasNext())
{
CombinedConfiguration config = (CombinedConfiguration) iter.next();
config.invalidate();
}
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private CombinedConfiguration getCurrentConfig()
{
String key = getSubstitutor().replace(keyPattern);
CombinedConfiguration config;
synchronized (getNodeCombiner())
{
config = (CombinedConfiguration) configs.get(key);
if (config == null)
{
config = new CombinedConfiguration(getNodeCombiner());
config.setExpressionEngine(this.getExpressionEngine());
Iterator iter = config.getErrorListeners().iterator();
while (iter.hasNext())
{
ConfigurationErrorListener listener = (ConfigurationErrorListener) iter.next();
config.addErrorListener(listener);
}
iter = config.getConfigurationListeners().iterator();
while (iter.hasNext())
{
ConfigurationListener listener = (ConfigurationListener) iter.next();
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
iter = configurations.iterator();
while (iter.hasNext())
{
ConfigData data = (ConfigData) iter.next();
config.addConfiguration(data.getConfiguration(), data.getName(),
data.getAt());
}
configs.put(key, config);
}
}
return config;
","public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,4359,"if (configs != null)
","public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4360,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4361,"catch (Exception ex)
","void extractProperties15() {
try {
Method method = System.class.getMethod(METHOD_NAME, null);
environment = (Map) method.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4362,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4367,"{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,4368,"if (init)
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4369,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
public void clear()
{
getConfig().clear();
}
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
public int getInt(String key)
{
return config.getInt(makePath(key));
}
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
public Iterator getKeys()
{
return config.getKeys(makePath());
}
public Iterator getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
public List getList(String key, List defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
public List getList(String key)
{
return config.getList(makePath(key));
}
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
public long getLong(String key)
{
return config.getLong(makePath(key));
}
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
public short getShort(String key)
{
return config.getShort(makePath(key));
}
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
public String getString(String key)
{
return config.getString(makePath(key));
}
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
public boolean isEmpty()
{
return getConfig().isEmpty();
}
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
public Node getRoot()
{
return getConfig().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
public void addNodes(String key, Collection nodes)
{
getConfig().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
public List configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
public Collection getErrorListeners()
{
return getConfig().getErrorListeners();
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,4370,"if (init)
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,4371,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] doParseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4372,"catch (Exception e)
","static boolean isEnum(Class cls) {
if (!SystemUtils.isJavaVersionAtLeast(JAVA_VERSION_1_5)) {
return false;
}
try {
Method isEnumMethod = Class.class.getMethod(""isEnum"", new Class[] {});
return ((Boolean) isEnumMethod.invoke(cls, new Object[] {})).booleanValue();
} catch (Exception e) {
throw new RuntimeException(e.getMessage());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4373,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,4374,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4375,"catch (Exception ex)
","public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = (ConfigurationNode) nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,4376,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,4377,"{
super(name);
setReference(elem);
}
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
txtNode = document
.createTextNode(PropertyConverter.escapeDelimiters(
value.toString(), getListDelimiter()));
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
txtNode.setNodeValue(PropertyConverter.escapeDelimiters(
value.toString(), getListDelimiter()));
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection textNodes = new ArrayList();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (Iterator it = textNodes.iterator(); it.hasNext();)
{
elem.removeChild((org.w3c.dom.Node) it.next());
}
return result;
",private DocumentBuilder documentBuilder;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4378,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4379,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private EntityResolver entityResolver = new DefaultEntityResolver();
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4381,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,4382,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4383,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,4385,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4386,public Token currentToken;,public Token currentToken;
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,4387,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4388,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4389,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4390,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4391,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4392,"String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public Node Property() throws ParseException {
String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4393,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4394,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4395,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,4396,"switch (i) {
case 0: jj_3_1(); break;
","final private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
}
jj_rescan = false;
}"
PERFORMANCE,UUF_UNUSED_FIELD,FP,2,18,configuration,4397,private boolean jj_semLA;,private boolean jj_semLA;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4398,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4399,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,4400,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,4401,"jjstateSet[jjnewStateCnt++] = jjnextStates[start];
}
while (start++ != end);
}
","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4402,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4403,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4404,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4405,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4406,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,2,18,configuration,4407,"jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}
","private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4408,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4409,"char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else
{
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
","public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4410,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4411,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4412,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4413,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4414,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4415,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4416,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4417,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4418,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4419,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4420,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4421,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4422,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,4423,public Token specialToken;,public Token specialToken;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4424,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4425,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4426,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4427,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4428,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4429,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4430,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4431,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4433,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4434,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4435,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4436,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4437,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4438,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4506,"final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration() {
@Override
protected Object interpolate(final Object value) {
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator() {
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4507,"final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4508,"final PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4509,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4510,"} catch (final Exception ex) {
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4511,"dump(configuration, new PrintWriter(out));
","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4512,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,4513,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4515,"result.setErrorHandler(new DefaultHandler() {
@Override
public void error(final SAXParseException ex) throws SAXException {
throw ex;
","@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4516,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4517,"} catch (final Exception ex) {
","private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4518,"// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration configuration;","// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration configuration;"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4520,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4521,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4522,"return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4524,"reloadingController.resetReloadingState();
","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4525,"addLookup(DefaultLookups.valueOf(lookupName.toUpperCase()), lookupMap);
","private static Map<String, Lookup> parseLookups(final String str) {
final Map<String, Lookup> lookupMap = new HashMap<>();
try {
for (final String lookupName : str.split(""[\\s,]+"")) {
if (!lookupName.isEmpty()) {
addLookup(DefaultLookups.valueOf(lookupName.toUpperCase()), lookupMap);
}
}
} catch (IllegalArgumentException exc) {
throw new IllegalArgumentException(""Invalid default lookups definition: "" + str, exc);
}
return lookupMap;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4526,"} catch (final Exception e) {
","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4529,"} catch (final Exception ex) {
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4530,"} catch (final Exception ex) {
","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
final FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4531,"final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,4532,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4533,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4534,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4535,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4536,"final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,4537,"return src != null ? src.clone() : null;
","private static <T> T[] defensiveCopy(final T[] src) {
return src != null ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4538,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4539,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4540,"return new ConfigurationNodePointer<>((ConfigurationNodePointer<Object>) parent, wrapper.getNode(), wrapper.getNodeHandler());
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<Object> wrapper = (NodeWrapper<Object>) bean;
return new ConfigurationNodePointer<>((ConfigurationNodePointer<Object>) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4570,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4571,"value = array.length == 0 ? null : new Byte(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4572,"value = array.length == 0 ? null : new Integer(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4573,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4574,"value = array.length == 0 ? null : new Float(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4575,"value = array.length == 0 ? null : new Long(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4576,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4577,"value = array.length == 0 ? null : new Short(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4578,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4579,"{
public boolean evaluate(Object obj)
{
String key = (String) obj;
return key.startsWith(prefix + ""."") || key.equals(prefix);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4580,"value = array.length == 0 ? null : new Double(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4581,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,4582,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4583,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4584,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4585,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
try {
clear();
load();
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,4586,"catch (Exception ex)
","public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4587,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
synchronized (getNodeCombiner()) 
{
combinedRoot = null;
}
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
invalidate();
}
public ConfigurationNode getRootNode()
{
synchronized (getNodeCombiner())
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Object getProperty(String key)
{
if (isForceReloadCheck())
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
return super.getProperty(key);
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
return node;
",private ConfigurationNode combinedRoot;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4588,private ConfigurationNode combinedRoot;,private ConfigurationNode combinedRoot;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4589,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4590,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,4591,"return count % 2 == 1;
","private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4593,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,4594,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4595,protected Configuration configuration;,protected Configuration configuration;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4596,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4597,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4598,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,4599,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4600,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4601,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4602,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4603,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4604,"pstmt = conn.prepareStatement(query.toString());
","public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4605,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4606,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4607,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4608,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4609,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ExpressionEngine expressionEngine;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4610,private ExpressionEngine expressionEngine;,private ExpressionEngine expressionEngine;
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,4611,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
","public void clearProperty(String key) {
fireEvent(EVENT_CLEAR_PROPERTY, key, null, true);
List nodes = fetchNodeList(key);
for (Iterator it = nodes.iterator(); it.hasNext(); ) {
clearNode((ConfigurationNode) it.next());
}
fireEvent(EVENT_CLEAR_PROPERTY, key, null, false);
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,4612,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,4613,"return bsCount % 2 == 1;
","private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4614,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4615,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4616,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4617,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4618,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4619,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4620,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4622,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4623,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4624,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4625,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,2,18,configuration,4626,"initProperty(bean, propName, properties.get(propName));
","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4627,"getConfiguration().addProperty(name, new Integer(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4628,"getConfiguration().addProperty(name, new Character(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4629,"getConfiguration().addProperty(name, new Long(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4630,"getConfiguration().addProperty(name, new Double(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4631,"getConfiguration().addProperty(name, new Short(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4632,"getConfiguration().addProperty(name, new Byte(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4633,"getConfiguration().addProperty(name, new Float(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,2,16,configuration,4634,"throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}"
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,4635,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4636,public Token currentToken;,public Token currentToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4637,"token = jj_consume_token(DATA);
return filterData(token.image);
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
return filterData(token.image);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4638,"Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
","final public Node Property() throws ParseException {
Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4639,"Token token = null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4640,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4641,"switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,4642,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw new ParseException(e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4643,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4644,public PrintStream debugStream = System.out;,public PrintStream debugStream = System.out;
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,4645,"if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 9;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (kind > 20)
kind = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (kind > 18)
kind = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && kind > 18)
kind = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && kind > 20)
kind = 20;
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
case 5:
if ((jjbitVec0[i2] & l2) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4646,"jjround = 0x80000001;
for (i = 9; i-- > 0;)
jjrounds[i] = 0x80000000;
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 9; i-- > 0; ) jjrounds[i] = 0x80000000;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4647,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4648,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4649,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4650,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4651,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4652,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4653,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4654,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4655,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4656,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,4657,public Token specialToken;,public Token specialToken;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,4658,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,4659,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
Multithreaded correctness,STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE,FP,2,8,configuration,4660,"addValue(format.parse(value));
","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4661,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4662,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4664,"{
public Object createObject(Attributes attributes) throws Exception
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4665,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4666,"addValue(new Integer(value));
","public void addIntegerValue(String value) {
addValue(new Integer(value));
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4667,"addValue(new Double(value));
","public void addRealValue(String value) {
addValue(new Double(value));
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4668,"{
public void end() throws Exception
{
}
","public void load(Reader in) throws ConfigurationException {
Digester digester = new Digester();
digester.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
});
digester.setValidating(true);
digester.addRule(""*/key"", new ObjectCreateRule(PListNode.class) {
public void end() throws Exception {
}
});
digester.addCallMethod(""*/key"", ""setName"", 0);
digester.addRule(""*/dict/string"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/data"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/integer"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/real"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/true"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/false"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/date"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/dict"", new SetNextAndPopRule(""addChild""));
digester.addCallMethod(""*/dict/string"", ""addValue"", 0);
digester.addCallMethod(""*/dict/data"", ""addDataValue"", 0);
digester.addCallMethod(""*/dict/integer"", ""addIntegerValue"", 0);
digester.addCallMethod(""*/dict/real"", ""addRealValue"", 0);
digester.addCallMethod(""*/dict/true"", ""addTrueValue"");
digester.addCallMethod(""*/dict/false"", ""addFalseValue"");
digester.addCallMethod(""*/dict/date"", ""addDateValue"", 0);
digester.addRule(""*/dict/array"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/array"", new ObjectCreateRule(ArrayNode.class));
digester.addSetNext(""*/dict/array"", ""addList"");
digester.addRule(""*/array/array"", new ObjectCreateRule(ArrayNode.class));
digester.addSetNext(""*/array/array"", ""addList"");
digester.addCallMethod(""*/array/string"", ""addValue"", 0);
digester.addCallMethod(""*/array/data"", ""addDataValue"", 0);
digester.addCallMethod(""*/array/integer"", ""addIntegerValue"", 0);
digester.addCallMethod(""*/array/real"", ""addRealValue"", 0);
digester.addCallMethod(""*/array/true"", ""addTrueValue"");
digester.addCallMethod(""*/array/false"", ""addFalseValue"");
digester.addCallMethod(""*/array/date"", ""addDateValue"", 0);
digester.addFactoryCreate(""*/array/dict"", new AbstractObjectCreationFactory() {
public Object createObject(Attributes attributes) throws Exception {
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
}
});
digester.push(getRoot());
try {
digester.parse(in);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4669,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4670,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4671,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4672,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4673,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4674,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4675,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4680,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4681,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4683,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4684,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4685,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4686,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4687,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4688,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4689,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4690,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4691,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4692,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4694,"public static final EventType<ConfigurationBuilderResultCreatedEvent> RESULT_CREATED =
new EventType<ConfigurationBuilderResultCreatedEvent>(ANY,
""RESULT_CREATED"");
private final Configuration configuration;
public ConfigurationBuilderResultCreatedEvent(
ConfigurationBuilder<?> source,
EventType<? extends ConfigurationBuilderResultCreatedEvent> evType,
Configuration createdConfiguration)
{
super(source, evType);
if (createdConfiguration == null)
{
throw new IllegalArgumentException(
""Configuration must not be null!"");
}
configuration = createdConfiguration;
}
public Configuration getConfiguration()
{
return configuration;
",private final Configuration configuration;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4695,private final Configuration configuration;,private final Configuration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4696,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4697,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4698,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4700,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4701,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4702,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4703,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4705,"{
@Override
public String lookup(String key)
{
Object value = ip.resolve(key);
return (value != null) ? value.toString() : null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4706,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4709,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4710,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4711,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,4712,private final String protocol;,private final String protocol;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4713,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4714,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4715,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4716,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4717,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4721,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4722,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4723,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4732,private ConfigurationListener changeListener;,private ConfigurationListener changeListener;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4735,private ExpressionEngine conversionExpressionEngine;,private ExpressionEngine conversionExpressionEngine;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4736,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4737,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4738,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private NodeCombiner nodeCombiner;
private ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
return combinedRoot;
}
@Override
protected void clearInternal()
{
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
beginRead(false);
try
{
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(optimize);
if (combinedRoot != null)
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if(optimize)
{
return;
}
try
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private void invalidateInternal()
{
combinedRoot = null;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addConfigurationListener(this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeConfigurationListener(this);
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","public List<String> getConfigurationNameList() {
beginRead(true);
try {
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations) {
list.add(cd.getName());
}
return list;
} finally {
endRead();
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4739,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4741,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,4742,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,1,14,configuration,4744,private final ConversionHandler dataConversionHandler;,private final ConversionHandler dataConversionHandler;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4745,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}"
CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,2,12,configuration,4746,private ResultSet resultSet;,private ResultSet resultSet;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4747,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,4748,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4749,"public class DynamicCombinedConfiguration extends CombinedConfiguration
{
private static final ThreadLocal<CurrentConfigHolder> currentConfig =
new ThreadLocal<CurrentConfigHolder>();
private final ConcurrentMap<String, CombinedConfiguration> configs =
new ConcurrentHashMap<String, CombinedConfiguration>();
private List<ConfigData> configurations = new ArrayList<ConfigData>();
private Map<String, Configuration> namedConfigurations =
new HashMap<String, Configuration>();
private String keyPattern;
private NodeCombiner nodeCombiner;
private String loggerName = DynamicCombinedConfiguration.class.getName();
private final ConfigurationInterpolator localSubst;
public DynamicCombinedConfiguration(NodeCombiner comb)
{
super();
setNodeCombiner(comb);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
localSubst = initLocalInterpolator();
}
public DynamicCombinedConfiguration()
{
super();
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
localSubst = initLocalInterpolator();
}
public void setKeyPattern(String pattern)
{
this.keyPattern = pattern;
}
public String getKeyPattern()
{
return this.keyPattern;
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
@Override
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
@Override
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidateAll();
}
@Override
public void addConfiguration(Configuration config, String name,
String at)
{
beginWrite(true);
try
{
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
configs.clear();
}
finally
{
endWrite();
}
}
@Override
public int getNumberOfConfigurations()
{
beginRead(false);
try
{
return configurations.size();
}
finally
{
endRead();
}
}
@Override
public Configuration getConfiguration(int index)
{
beginRead(false);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
@Override
public Configuration getConfiguration(String name)
{
beginRead(false);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
@Override
public Set<String> getConfigurationNames()
{
beginRead(false);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
@Override
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
@Override
public boolean removeConfiguration(Configuration config)
{
beginWrite(false);
try
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
finally
{
endWrite();
}
}
@Override
public Configuration removeConfigurationAt(int index)
{
beginWrite(false);
try
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
return cd.getConfiguration();
}
finally
{
endWrite();
}
}
@Override
public ConfigurationNode getRootNode()
{
return getCurrentConfig().getRootNode();
}
@Override
protected void setRootNodeInternal(ConfigurationNode rootNode)
{
if (configs != null)
{
this.getCurrentConfig().setRootNode(rootNode);
}
else
{
super.setRootNodeInternal(rootNode);
}
}
@Override
protected void addPropertyInternal(String key, Object value)
{
this.getCurrentConfig().addProperty(key, value);
}
@Override
protected void clearInternal()
{
if (configs != null)
{
this.getCurrentConfig().clear();
}
}
@Override
protected void clearPropertyDirect(String key)
{
this.getCurrentConfig().clearProperty(key);
}
@Override
protected boolean containsKeyInternal(String key)
{
return this.getCurrentConfig().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getCurrentConfig().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getCurrentConfig().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getCurrentConfig().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getCurrentConfig().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getCurrentConfig().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getCurrentConfig().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getCurrentConfig().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getCurrentConfig().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getCurrentConfig().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getCurrentConfig().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getCurrentConfig().getInteger(key, defaultValue);
}
@Override
protected Iterator<String> getKeysInternal()
{
return this.getCurrentConfig().getKeys();
}
@Override
protected Iterator<String> getKeysInternal(String prefix)
{
return this.getCurrentConfig().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getCurrentConfig().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getCurrentConfig().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getCurrentConfig().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getCurrentConfig().getProperties(key);
}
@Override
protected Object getPropertyInternal(String key)
{
return this.getCurrentConfig().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getCurrentConfig().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getCurrentConfig().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getCurrentConfig().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getCurrentConfig().getStringArray(key);
}
@Override
protected boolean isEmptyInternal()
{
return this.getCurrentConfig().isEmpty();
}
@Override
protected void setPropertyInternal(String key, Object value)
{
if (configs != null)
{
this.getCurrentConfig().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getCurrentConfig().subset(prefix);
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
protected void addNodesInternal(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getCurrentConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getCurrentConfig().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getCurrentConfig().configurationAt(key);
}
@Override
public List<SubnodeConfiguration> configurationsAt(String key)
{
return this.getCurrentConfig().configurationsAt(key);
}
@Override
protected List<ConfigurationNode> clearTreeInternal(String key)
{
this.getCurrentConfig().clearTree(key);
return Collections.emptyList();
}
@Override
protected int getMaxIndexInternal(String key)
{
return this.getCurrentConfig().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getCurrentConfig().interpolatedConfiguration();
}
@Override
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
return getCurrentConfig().getSource(key);
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
for (CombinedConfiguration cc : configs.values())
{
cc.addConfigurationListener(l);
}
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeConfigurationListener(l);
}
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearConfigurationListeners();
}
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.addErrorListener(l);
}
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeErrorListener(l);
}
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearErrorListeners();
}
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
@Override
public Object clone()
{
return super.clone();
}
@Override
public void invalidate()
{
getCurrentConfig().invalidate();
}
public void invalidateAll()
{
for (CombinedConfiguration cc : configs.values())
{
cc.invalidate();
}
}
@Override
protected void beginRead(boolean optimize)
{
CurrentConfigHolder cch = ensureCurrentConfiguration();
cch.incrementLockCount();
if (!optimize && cch.getCurrentConfiguration() == null)
{
beginWrite(optimize);
endWrite();
}
cch.getCurrentConfiguration().beginRead(optimize);
}
@Override
protected void beginWrite(boolean optimize)
{
CurrentConfigHolder cch = ensureCurrentConfiguration();
cch.incrementLockCount();
super.beginWrite(optimize);
if (!optimize && cch.getCurrentConfiguration() == null)
{
cch.setCurrentConfiguration(createChildConfiguration());
configs.put(cch.getKey(), cch.getCurrentConfiguration());
initChildConfiguration(cch.getCurrentConfiguration());
}
}
@Override
protected void endRead()
{
currentConfig.get().getCurrentConfiguration().endRead();
releaseLock();
}
@Override
protected void endWrite()
{
super.endWrite();
releaseLock();
}
private void releaseLock()
{
CurrentConfigHolder cch = currentConfig.get();
assert cch != null : ""No current configuration!"";
if(cch.decrementLockCountAndCheckRelease())
{
currentConfig.remove();
}
}
private CombinedConfiguration getCurrentConfig()
{
CombinedConfiguration config;
String key;
beginRead(false);
try
{
config = currentConfig.get().getCurrentConfiguration();
key = currentConfig.get().getKey();
}
finally
{
endRead();
}
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}
private CombinedConfiguration createChildConfiguration()
{
return new CombinedConfiguration(getNodeCombiner());
}
private void initChildConfiguration(CombinedConfiguration config)
{
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
config.setLogger(log);
}
}
config.setExpressionEngine(this.getExpressionEngine());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiterHandler(getListDelimiterHandler());
for (ConfigurationErrorListener listener : getErrorListeners())
{
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners())
{
config.addConfigurationListener(listener);
}
for (ConfigData data : configurations)
{
config.addConfiguration(data.getConfiguration(), data.getName(),
data.getAt());
}
config.setSynchronizer(getSynchronizer());
}
private ConfigurationInterpolator initLocalInterpolator()
{
ConfigurationInterpolator ci = new ConfigurationInterpolator()
{
@Override
protected Lookup fetchLookupForPrefix(String prefix)
{
return ConfigurationInterpolator
.nullSafeLookup(getInterpolator().getLookups().get(
prefix));
}
};
return ci;
}
private CurrentConfigHolder ensureCurrentConfiguration()
{
CurrentConfigHolder cch = currentConfig.get();
if (cch == null)
{
String key = String.valueOf(localSubst.interpolate(keyPattern));
cch = new CurrentConfigHolder(key);
cch.setCurrentConfiguration(configs.get(key));
currentConfig.set(cch);
}
return cch;
",private NodeCombiner nodeCombiner;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4750,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4751,"{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
protected void addPropertyInternal(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
protected void clearInternal()
{
getConfig().clear();
}
@Override
protected void clearPropertyDirect(String key)
{
config.clearProperty(makePath(key));
}
@Override
protected boolean containsKeyInternal(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
protected Iterator<String> getKeysInternal()
{
return config.getKeys(makePath());
}
@Override
protected Iterator<String> getKeysInternal(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
protected Object getPropertyInternal(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
protected boolean isEmptyInternal()
{
return getConfig().isEmpty();
}
@Override
protected void setPropertyInternal(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
protected void setRootNodeInternal(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNodeInternal(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
protected void addNodesInternal(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<SubnodeConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
protected List<ConfigurationNode> clearTreeInternal(String key)
{
config.clearTree(makePath(key));
return Collections.emptyList();
}
@Override
protected int getMaxIndexInternal(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void write(Writer writer) throws ConfigurationException, IOException
{
fetchFileBased().write(writer);
}
public void read(Reader reader) throws ConfigurationException, IOException
{
fetchFileBased().read(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
private BaseHierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return substitute(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return substitute(pathPattern) + item;
}
private String substitute(String pattern)
{
Object value = getInterpolator().interpolate(pattern);
return (value != null) ? value.toString() : null;
}
private FileBased fetchFileBased() throws ConfigurationException
{
if (!(config instanceof FileBased))
{
throw new ConfigurationException(
""Wrapped configuration does not implement FileBased!""
+ "" No I/O operations are supported."");
}
return (FileBased) config;
","@Override
protected boolean isEmptyInternal() {
return getConfig().isEmpty();
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,4752,"switch (event.getType())
{
case AbstractConfiguration.EVENT_ADD_PROPERTY:
boolean contained = layoutData.containsKey(event
.getPropertyName());
PropertyLayoutData data = fetchLayoutData(event
.getPropertyName());
data.setSingleLine(!contained);
break;
case AbstractConfiguration.EVENT_CLEAR_PROPERTY:
layoutData.remove(event.getPropertyName());
break;
case AbstractConfiguration.EVENT_CLEAR:
clear();
break;
case AbstractConfiguration.EVENT_SET_PROPERTY:
fetchLayoutData(event.getPropertyName());
","public void configurationChanged(ConfigurationEvent event) {
if (!event.isBeforeUpdate()) {
switch(event.getType()) {
case AbstractConfiguration.EVENT_ADD_PROPERTY:
boolean contained = layoutData.containsKey(event.getPropertyName());
PropertyLayoutData data = fetchLayoutData(event.getPropertyName());
data.setSingleLine(!contained);
break;
case AbstractConfiguration.EVENT_CLEAR_PROPERTY:
layoutData.remove(event.getPropertyName());
break;
case AbstractConfiguration.EVENT_CLEAR:
clear();
break;
case AbstractConfiguration.EVENT_SET_PROPERTY:
fetchLayoutData(event.getPropertyName());
break;
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4753,"catch (Exception ex)
","void validateRootNode() {
if (subnodeKey != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(subnodeKey);
if (nodes.size() != 1) {
subnodeKey = null;
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
}
} catch (Exception ex) {
subnodeKey = null;
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,4754,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4755,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4756,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,4757,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,4758,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4759,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,4760,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4761,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4762,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4763,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","private void writeProperty(PrintWriter out, String key, List<?> values) {
for (Object value : values) {
writeProperty(out, key, value);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4764,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
MALICIOUS_CODE,EI_EXPOSE_REP,FP,2,18,configuration,4765,"return propertyDescriptors;
","@Override
public PropertyDescriptor[] getPropertyDescriptors() {
return propertyDescriptors;
}"
MALICIOUS_CODE,EI_EXPOSE_REP,FP,2,18,configuration,4766,"return additionalBeanInfo;
","@Override
public BeanInfo[] getAdditionalBeanInfo() {
return additionalBeanInfo;
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4767,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4768,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4770,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4771,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4772,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4773,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4774,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4775,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4776,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4777,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4778,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4782,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4783,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4784,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4785,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4786,private FileLocator locator;,private FileLocator locator;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4787,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4788,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,4789,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4790,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4791,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4792,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4793,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4794,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4795,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4796,private ConfigurationNode node;,private ConfigurationNode node;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4813,"public class BaseHierarchicalConfiguration extends AbstractHierarchicalConfiguration<ImmutableNode>
implements Cloneable, InMemoryNodeModelSupport
{
private final EventListener<ConfigurationEvent> changeListener;
public BaseHierarchicalConfiguration()
{
this((HierarchicalConfiguration<ImmutableNode>) null);
}
public BaseHierarchicalConfiguration(HierarchicalConfiguration<ImmutableNode> c)
{
this(createNodeModel(c));
}
protected BaseHierarchicalConfiguration(NodeModel<ImmutableNode> model)
{
super(model);
changeListener = createChangeListener();
}
@Override
public InMemoryNodeModel getNodeModel()
{
return (InMemoryNodeModel) super.getNodeModel();
}
@Override
public Configuration subset(String prefix)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);
if (results.isEmpty())
{
return new BaseHierarchicalConfiguration();
}
final BaseHierarchicalConfiguration parent = this;
BaseHierarchicalConfiguration result =
new BaseHierarchicalConfiguration()
{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
}
};
result.getModel().setRootNode(createSubsetRootNode(results));
if (result.isEmpty())
{
return new BaseHierarchicalConfiguration();
}
else
{
result.setSynchronizer(getSynchronizer());
return result;
}
}
finally
{
endRead();
}
}
private ImmutableNode createSubsetRootNode(
Collection<QueryResult<ImmutableNode>> results)
{
ImmutableNode.Builder builder = new ImmutableNode.Builder();
Object value = null;
int valueCount = 0;
for (QueryResult<ImmutableNode> result : results)
{
if (result.isAttributeResult())
{
builder.addAttribute(result.getAttributeName(),
result.getAttributeValue(getModel().getNodeHandler()));
}
else
{
if (result.getNode().getValue() != null)
{
value = result.getNode().getValue();
valueCount++;
}
builder.addChildren(result.getNode().getChildren());
builder.addAttributes(result.getNode().getAttributes());
}
}
if (valueCount == 1)
{
builder.value(value);
}
return builder.create();
}
public HierarchicalConfiguration<ImmutableNode> configurationAt(String key,
boolean supportUpdates)
{
beginRead(false);
try
{
return supportUpdates ? createConnectedSubConfiguration(key)
: createIndependentSubConfiguration(key);
}
finally
{
endRead();
}
}
protected InMemoryNodeModel getSubConfigurationParentModel()
{
return (InMemoryNodeModel) getModel();
}
protected NodeSelector getSubConfigurationNodeSelector(String key)
{
return new NodeSelector(key);
}
protected SubnodeConfiguration createSubConfigurationForTrackedNode(
NodeSelector selector, InMemoryNodeModelSupport parentModelSupport)
{
SubnodeConfiguration subConfig =
new SubnodeConfiguration(this, new TrackedNodeModel(
parentModelSupport, selector, true));
initSubConfigurationForThisParent(subConfig);
return subConfig;
}
protected void initSubConfigurationForThisParent(SubnodeConfiguration subConfig)
{
initSubConfiguration(subConfig);
subConfig.addEventListener(ConfigurationEvent.ANY, changeListener);
}
private BaseHierarchicalConfiguration createConnectedSubConfiguration(
String key)
{
NodeSelector selector = getSubConfigurationNodeSelector(key);
getSubConfigurationParentModel().trackNode(selector, this);
return createSubConfigurationForTrackedNode(selector, this);
}
private List<HierarchicalConfiguration<ImmutableNode>> createConnectedSubConfigurations(
InMemoryNodeModelSupport parentModelSupport,
Collection<NodeSelector> selectors)
{
List<HierarchicalConfiguration<ImmutableNode>> configs =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(
selectors.size());
for (NodeSelector selector : selectors)
{
configs.add(createSubConfigurationForTrackedNode(selector,
parentModelSupport));
}
return configs;
}
private BaseHierarchicalConfiguration createIndependentSubConfiguration(
String key)
{
List<ImmutableNode> targetNodes = fetchFilteredNodeResults(key);
if (targetNodes.size() != 1)
{
throw new ConfigurationRuntimeException(
""Passed in key must select exactly one node: "" + key);
}
BaseHierarchicalConfiguration sub =
new BaseHierarchicalConfiguration(new InMemoryNodeModel(
targetNodes.get(0)));
initSubConfiguration(sub);
return sub;
}
private BaseHierarchicalConfiguration createIndependentSubConfigurationForNode(
ImmutableNode node)
{
BaseHierarchicalConfiguration sub =
new BaseHierarchicalConfiguration(new InMemoryNodeModel(node));
initSubConfiguration(sub);
return sub;
}
private List<ImmutableNode> fetchFilteredNodeResults(String key)
{
NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
return resolveNodeKey(handler.getRootNode(), key, handler);
}
public ImmutableHierarchicalConfiguration immutableConfigurationAt(
String key, boolean supportUpdates)
{
return ConfigurationUtils.unmodifiableConfiguration(configurationAt(
key, supportUpdates));
}
public HierarchicalConfiguration<ImmutableNode> configurationAt(String key)
{
return configurationAt(key, false);
}
public ImmutableHierarchicalConfiguration immutableConfigurationAt(
String key)
{
return ConfigurationUtils.unmodifiableConfiguration(configurationAt(
key));
}
public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(
String key)
{
List<ImmutableNode> nodes;
beginRead(false);
try
{
nodes = fetchFilteredNodeResults(key);
}
finally
{
endRead();
}
List<HierarchicalConfiguration<ImmutableNode>> results =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(
nodes.size());
for (ImmutableNode node : nodes)
{
BaseHierarchicalConfiguration sub =
createIndependentSubConfigurationForNode(node);
results.add(sub);
}
return results;
}
public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(
String key, boolean supportUpdates)
{
if (!supportUpdates)
{
return configurationsAt(key);
}
InMemoryNodeModel parentModel;
beginRead(false);
try
{
parentModel = getSubConfigurationParentModel();
}
finally
{
endRead();
}
Collection<NodeSelector> selectors =
parentModel.selectAndTrackNodes(key, this);
return createConnectedSubConfigurations(this, selectors);
}
public List<ImmutableHierarchicalConfiguration> immutableConfigurationsAt(
String key)
{
return toImmutable(configurationsAt(key));
}
public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(
String key)
{
List<ImmutableNode> nodes;
beginRead(false);
try
{
nodes = fetchFilteredNodeResults(key);
}
finally
{
endRead();
}
if (nodes.size() != 1)
{
return Collections.emptyList();
}
ImmutableNode parent = nodes.get(0);
List<HierarchicalConfiguration<ImmutableNode>> subs =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(parent
.getChildren().size());
for (ImmutableNode node : parent.getChildren())
{
subs.add(createIndependentSubConfigurationForNode(node));
}
return subs;
}
public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(
String key, boolean supportUpdates)
{
if (!supportUpdates)
{
return childConfigurationsAt(key);
}
InMemoryNodeModel parentModel = getSubConfigurationParentModel();
return createConnectedSubConfigurations(this,
parentModel.trackChildNodes(key, this));
}
public List<ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(
String key)
{
return toImmutable(childConfigurationsAt(key));
}
protected void subnodeConfigurationChanged(ConfigurationEvent event)
{
fireEvent(ConfigurationEvent.SUBNODE_CHANGED, null, event, event.isBeforeUpdate());
}
private void initSubConfiguration(BaseHierarchicalConfiguration sub)
{
sub.setSynchronizer(getSynchronizer());
sub.setExpressionEngine(getExpressionEngine());
sub.setListDelimiterHandler(getListDelimiterHandler());
sub.setThrowExceptionOnMissing(isThrowExceptionOnMissing());
sub.getInterpolator().setParentInterpolator(getInterpolator());
}
private EventListener<ConfigurationEvent> createChangeListener()
{
return new EventListener<ConfigurationEvent>()
{
@Override
public void onEvent(ConfigurationEvent event)
{
subnodeConfigurationChanged(event);
}
};
}
@Override
public Configuration interpolatedConfiguration()
{
InterpolatedVisitor visitor = new InterpolatedVisitor();
NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
NodeTreeWalker.INSTANCE
.walkDFS(handler.getRootNode(), visitor, handler);
BaseHierarchicalConfiguration c =
(BaseHierarchicalConfiguration) clone();
c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
return c;
}
@Override
protected NodeModel<ImmutableNode> cloneNodeModel()
{
return new InMemoryNodeModel(getModel().getNodeHandler().getRootNode());
}
private static List<ImmutableHierarchicalConfiguration> toImmutable(
List<? extends HierarchicalConfiguration<?>> subs)
{
List<ImmutableHierarchicalConfiguration> res =
new ArrayList<ImmutableHierarchicalConfiguration>(subs.size());
for (HierarchicalConfiguration<?> sub : subs)
{
res.add(ConfigurationUtils.unmodifiableConfiguration(sub));
}
return res;
}
private static NodeModel<ImmutableNode> createNodeModel(
HierarchicalConfiguration<ImmutableNode> c)
{
ImmutableNode root = (c != null) ? obtainRootNode(c) : null;
return new InMemoryNodeModel(root);
}
private static ImmutableNode obtainRootNode(
HierarchicalConfiguration<ImmutableNode> c)
{
return c.getNodeModel().getNodeHandler().getRootNode();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4814,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4816,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4817,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4818,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4819,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4820,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4821,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4823,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4824,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4825,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4827,"public static final EventType<ConfigurationBuilderResultCreatedEvent> RESULT_CREATED =
new EventType<ConfigurationBuilderResultCreatedEvent>(ANY,
""RESULT_CREATED"");
private final ImmutableConfiguration configuration;
public ConfigurationBuilderResultCreatedEvent(
ConfigurationBuilder<?> source,
EventType<? extends ConfigurationBuilderResultCreatedEvent> evType,
ImmutableConfiguration createdConfiguration)
{
super(source, evType);
if (createdConfiguration == null)
{
throw new IllegalArgumentException(
""Configuration must not be null!"");
}
configuration = createdConfiguration;
}
public ImmutableConfiguration getConfiguration()
{
return configuration;
",private final ImmutableConfiguration configuration;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4828,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4829,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4830,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4831,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4833,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4834,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4835,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4836,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4838,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4842,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,4843,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4844,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4845,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4846,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4847,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printNode(PrintWriter out, int indentLevel, ImmutableNode node) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (node.getNodeName() != null) {
out.println(padding + ""<key>"" + StringEscapeUtils.escapeXml10(node.getNodeName()) + ""</key>"");
}
List<ImmutableNode> children = node.getChildren();
if (!children.isEmpty()) {
out.println(padding + ""<dict>"");
Iterator<ImmutableNode> it = children.iterator();
while (it.hasNext()) {
ImmutableNode child = it.next();
printNode(out, indentLevel + 1, child);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (node.getValue() == null) {
out.println(padding + ""<dict/>"");
} else {
Object value = node.getValue();
printValue(out, indentLevel, value);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4848,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4849,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4850,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4854,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4855,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4856,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4881,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4882,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,4883,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if(optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4884,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4885,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4886,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4887,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,4888,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,4889,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4891,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4892,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4893,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,4895,private final Configuration configuration;,private final Configuration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4897,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4898,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4899,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,4901,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4902,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4903,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4904,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4905,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4906,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,4907,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,4908,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4909,private final EventType<?> errorOperationType;,private final EventType<?> errorOperationType;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,4910,"public static final EventType<Event> ANY =
new EventType<Event>(null, ""ANY"");
private static final String FMT_PROPERTY = "" %s=%s"";
private static final int BUF_SIZE = 256;
private final EventType<? extends Event> eventType;
public Event(Object source, EventType<? extends Event> evType)
{
super(source);
if (evType == null)
{
throw new IllegalArgumentException(""Event type must not be null!"");
}
eventType = evType;
}
public EventType<? extends Event> getEventType()
{
return eventType;
}
@Override
public String toString()
{
StringBuilder buf = new StringBuilder(BUF_SIZE);
buf.append(getClass().getSimpleName());
buf.append("" ["");
appendPropertyRepresentation(buf, ""source"", getSource());
appendPropertyRepresentation(buf, ""eventType"", getEventType());
buf.append("" ]"");
return buf.toString();
}
protected void appendPropertyRepresentation(StringBuilder buf,
String property, Object value)
{
buf.append(String.format(FMT_PROPERTY, property, String.valueOf(value)));
}
",private final EventType<? extends Event> eventType;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4911,private final EventType<? extends Event> eventType;,private final EventType<? extends Event> eventType;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4912,"{
@Override
public String lookup(String key)
{
Object value = ip.resolve(key);
return (value != null) ? value.toString() : null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4913,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,4914,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,4918,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4919,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,4920,private final String protocol;,private final String protocol;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,4921,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,4922,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4923,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4924,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNodeBuilder.FORMAT) {
out.println(padding + ""<date>"" + PListNodeBuilder.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
for (Object o : (List<?>) value) {
printValue(out, indentLevel + 1, o);
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
@SuppressWarnings(""unchecked"")
HierarchicalConfiguration<ImmutableNode> config = (HierarchicalConfiguration<ImmutableNode>) value;
printNode(out, indentLevel, config.getNodeModel().getNodeHandler().getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,4925,"if (locator.getEncoding() != null)
","@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
if (locator.getEncoding() != null) {
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
writer.println(""<?xml version=\""1.0\""?>"");
}
writer.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
writer.println(""<plist version=\""1.0\"">"");
printNode(writer, 1, getNodeModel().getNodeHandler().getRootNode());
writer.println(""</plist>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4926,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4927,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","private PListNodeBuilder peek() {
if (!stack.isEmpty()) {
return stack.get(stack.size() - 1);
} else {
return null;
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4928,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,4929,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,4930,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4931,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4935,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,4936,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4937,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,4994,"final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration() {
@Override
protected Object interpolate(final Object value) {
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator() {
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,4995,"final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4996,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4997,"final PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,4998,"} catch (final Exception ex) {
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,4999,"dump(configuration, new PrintWriter(out));
","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5000,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,5001,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5002,"result.setErrorHandler(new DefaultHandler() {
@Override
public void error(final SAXParseException ex) throws SAXException {
throw ex;
","@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5003,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5004,"} catch (final Exception ex) {
","private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5006,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5008,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5009,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5010,"return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5012,"reloadingController.resetReloadingState();
","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5013,"} catch (final Exception e) {
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
}
if (!(value instanceof String)) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5015,"} catch (final Exception e) {
","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,5018,"return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5019,"} catch (final Exception ex) {
","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
final FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5020,"} catch (final Exception ex) {
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5021,"final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,5022,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5023,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5024,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,5025,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5026,"final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,5027,"return src != null ? src.clone() : null;
","private static <T> T[] defensiveCopy(final T[] src) {
return src != null ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5028,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5029,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5030,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5181,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
",private ConfigurationListener changeListener;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5182,private ConfigurationListener changeListener;,private ConfigurationListener changeListener;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5183,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5184,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5185,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5186,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private NodeCombiner nodeCombiner;
private ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
return combinedRoot;
}
@Override
protected void clearInternal()
{
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
beginRead(false);
try
{
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(optimize);
if (combinedRoot != null)
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if(optimize)
{
return;
}
try
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private void invalidateInternal()
{
combinedRoot = null;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addConfigurationListener(this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeConfigurationListener(this);
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","public NodeCombiner getNodeCombiner() {
beginRead(true);
try {
return nodeCombiner;
} finally {
endRead();
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5187,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5188,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,1,14,configuration,5189,private final ConversionHandler dataConversionHandler;,private final ConversionHandler dataConversionHandler;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,1,14,configuration,5190,private final ConversionHandler dataConversionHandler;,private final ConversionHandler dataConversionHandler;
CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,2,12,configuration,5191,private ResultSet resultSet;,private ResultSet resultSet;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5192,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5193,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,5194,"public class DynamicCombinedConfiguration extends CombinedConfiguration
{
private static final ThreadLocal<CurrentConfigHolder> currentConfig =
new ThreadLocal<CurrentConfigHolder>();
private final ConcurrentMap<String, CombinedConfiguration> configs =
new ConcurrentHashMap<String, CombinedConfiguration>();
private List<ConfigData> configurations = new ArrayList<ConfigData>();
private Map<String, Configuration> namedConfigurations =
new HashMap<String, Configuration>();
private String keyPattern;
private NodeCombiner nodeCombiner;
private String loggerName = DynamicCombinedConfiguration.class.getName();
private final ConfigurationInterpolator localSubst;
public DynamicCombinedConfiguration(NodeCombiner comb)
{
super();
setNodeCombiner(comb);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
localSubst = initLocalInterpolator();
}
public DynamicCombinedConfiguration()
{
super();
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
localSubst = initLocalInterpolator();
}
public void setKeyPattern(String pattern)
{
this.keyPattern = pattern;
}
public String getKeyPattern()
{
return this.keyPattern;
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
@Override
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
@Override
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidateAll();
}
@Override
public void addConfiguration(Configuration config, String name,
String at)
{
beginWrite(true);
try
{
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
configs.clear();
}
finally
{
endWrite();
}
}
@Override
public int getNumberOfConfigurations()
{
beginRead(false);
try
{
return configurations.size();
}
finally
{
endRead();
}
}
@Override
public Configuration getConfiguration(int index)
{
beginRead(false);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
@Override
public Configuration getConfiguration(String name)
{
beginRead(false);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
@Override
public Set<String> getConfigurationNames()
{
beginRead(false);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
@Override
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
@Override
public boolean removeConfiguration(Configuration config)
{
beginWrite(false);
try
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
finally
{
endWrite();
}
}
@Override
public Configuration removeConfigurationAt(int index)
{
beginWrite(false);
try
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
return cd.getConfiguration();
}
finally
{
endWrite();
}
}
@Override
public ConfigurationNode getRootNode()
{
return getCurrentConfig().getRootNode();
}
@Override
protected void setRootNodeInternal(ConfigurationNode rootNode)
{
if (configs != null)
{
this.getCurrentConfig().setRootNode(rootNode);
}
else
{
super.setRootNodeInternal(rootNode);
}
}
@Override
protected void addPropertyInternal(String key, Object value)
{
this.getCurrentConfig().addProperty(key, value);
}
@Override
protected void clearInternal()
{
if (configs != null)
{
this.getCurrentConfig().clear();
}
}
@Override
protected void clearPropertyDirect(String key)
{
this.getCurrentConfig().clearProperty(key);
}
@Override
protected boolean containsKeyInternal(String key)
{
return this.getCurrentConfig().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getCurrentConfig().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getCurrentConfig().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getCurrentConfig().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getCurrentConfig().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getCurrentConfig().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getCurrentConfig().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getCurrentConfig().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getCurrentConfig().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getCurrentConfig().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getCurrentConfig().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getCurrentConfig().getInteger(key, defaultValue);
}
@Override
protected Iterator<String> getKeysInternal()
{
return this.getCurrentConfig().getKeys();
}
@Override
protected Iterator<String> getKeysInternal(String prefix)
{
return this.getCurrentConfig().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getCurrentConfig().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getCurrentConfig().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getCurrentConfig().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getCurrentConfig().getProperties(key);
}
@Override
protected Object getPropertyInternal(String key)
{
return this.getCurrentConfig().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getCurrentConfig().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getCurrentConfig().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getCurrentConfig().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getCurrentConfig().getStringArray(key);
}
@Override
protected boolean isEmptyInternal()
{
return this.getCurrentConfig().isEmpty();
}
@Override
protected void setPropertyInternal(String key, Object value)
{
if (configs != null)
{
this.getCurrentConfig().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getCurrentConfig().subset(prefix);
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
protected void addNodesInternal(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getCurrentConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getCurrentConfig().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getCurrentConfig().configurationAt(key);
}
@Override
public List<SubnodeConfiguration> configurationsAt(String key)
{
return this.getCurrentConfig().configurationsAt(key);
}
@Override
protected List<ConfigurationNode> clearTreeInternal(String key)
{
this.getCurrentConfig().clearTree(key);
return Collections.emptyList();
}
@Override
protected int getMaxIndexInternal(String key)
{
return this.getCurrentConfig().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getCurrentConfig().interpolatedConfiguration();
}
@Override
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
return getCurrentConfig().getSource(key);
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
for (CombinedConfiguration cc : configs.values())
{
cc.addConfigurationListener(l);
}
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeConfigurationListener(l);
}
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearConfigurationListeners();
}
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.addErrorListener(l);
}
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeErrorListener(l);
}
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearErrorListeners();
}
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
@Override
public Object clone()
{
return super.clone();
}
@Override
public void invalidate()
{
getCurrentConfig().invalidate();
}
public void invalidateAll()
{
for (CombinedConfiguration cc : configs.values())
{
cc.invalidate();
}
}
@Override
protected void beginRead(boolean optimize)
{
CurrentConfigHolder cch = ensureCurrentConfiguration();
cch.incrementLockCount();
if (!optimize && cch.getCurrentConfiguration() == null)
{
beginWrite(optimize);
endWrite();
}
cch.getCurrentConfiguration().beginRead(optimize);
}
@Override
protected void beginWrite(boolean optimize)
{
CurrentConfigHolder cch = ensureCurrentConfiguration();
cch.incrementLockCount();
super.beginWrite(optimize);
if (!optimize && cch.getCurrentConfiguration() == null)
{
cch.setCurrentConfiguration(createChildConfiguration());
configs.put(cch.getKey(), cch.getCurrentConfiguration());
initChildConfiguration(cch.getCurrentConfiguration());
}
}
@Override
protected void endRead()
{
currentConfig.get().getCurrentConfiguration().endRead();
releaseLock();
}
@Override
protected void endWrite()
{
super.endWrite();
releaseLock();
}
private void releaseLock()
{
CurrentConfigHolder cch = currentConfig.get();
assert cch != null : ""No current configuration!"";
if(cch.decrementLockCountAndCheckRelease())
{
currentConfig.remove();
}
}
private CombinedConfiguration getCurrentConfig()
{
CombinedConfiguration config;
String key;
beginRead(false);
try
{
config = currentConfig.get().getCurrentConfiguration();
key = currentConfig.get().getKey();
}
finally
{
endRead();
}
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}
private CombinedConfiguration createChildConfiguration()
{
return new CombinedConfiguration(getNodeCombiner());
}
private void initChildConfiguration(CombinedConfiguration config)
{
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
config.setLogger(log);
}
}
config.setExpressionEngine(this.getExpressionEngine());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiterHandler(getListDelimiterHandler());
for (ConfigurationErrorListener listener : getErrorListeners())
{
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners())
{
config.addConfigurationListener(listener);
}
for (ConfigData data : configurations)
{
config.addConfiguration(data.getConfiguration(), data.getName(),
data.getAt());
}
config.setSynchronizer(getSynchronizer());
}
private ConfigurationInterpolator initLocalInterpolator()
{
ConfigurationInterpolator ci = new ConfigurationInterpolator()
{
@Override
protected Lookup fetchLookupForPrefix(String prefix)
{
return ConfigurationInterpolator
.nullSafeLookup(getInterpolator().getLookups().get(
prefix));
}
};
return ci;
}
private CurrentConfigHolder ensureCurrentConfiguration()
{
CurrentConfigHolder cch = currentConfig.get();
if (cch == null)
{
String key = String.valueOf(localSubst.interpolate(keyPattern));
cch = new CurrentConfigHolder(key);
cch.setCurrentConfiguration(configs.get(key));
currentConfig.set(cch);
}
return cch;
",private final ConfigurationInterpolator localSubst;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5195,private final ConfigurationInterpolator localSubst;,private final ConfigurationInterpolator localSubst;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,5196,"{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
protected void addPropertyInternal(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
protected void clearInternal()
{
getConfig().clear();
}
@Override
protected void clearPropertyDirect(String key)
{
config.clearProperty(makePath(key));
}
@Override
protected boolean containsKeyInternal(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
protected Iterator<String> getKeysInternal()
{
return config.getKeys(makePath());
}
@Override
protected Iterator<String> getKeysInternal(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
protected Object getPropertyInternal(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
protected boolean isEmptyInternal()
{
return getConfig().isEmpty();
}
@Override
protected void setPropertyInternal(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
protected void setRootNodeInternal(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNodeInternal(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
protected void addNodesInternal(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<SubnodeConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
protected List<ConfigurationNode> clearTreeInternal(String key)
{
config.clearTree(makePath(key));
return Collections.emptyList();
}
@Override
protected int getMaxIndexInternal(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void write(Writer writer) throws ConfigurationException, IOException
{
fetchFileBased().write(writer);
}
public void read(Reader reader) throws ConfigurationException, IOException
{
fetchFileBased().read(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
private BaseHierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return substitute(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return substitute(pathPattern) + item;
}
private String substitute(String pattern)
{
Object value = getInterpolator().interpolate(pattern);
return (value != null) ? value.toString() : null;
}
private FileBased fetchFileBased() throws ConfigurationException
{
if (!(config instanceof FileBased))
{
throw new ConfigurationException(
""Wrapped configuration does not implement FileBased!""
+ "" No I/O operations are supported."");
}
return (FileBased) config;
","@Override
protected void setPropertyInternal(String key, Object value) {
getConfig().setProperty(key, value);
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,5197,"switch (event.getType())
{
case AbstractConfiguration.EVENT_ADD_PROPERTY:
boolean contained = layoutData.containsKey(event
.getPropertyName());
PropertyLayoutData data = fetchLayoutData(event
.getPropertyName());
data.setSingleLine(!contained);
break;
case AbstractConfiguration.EVENT_CLEAR_PROPERTY:
layoutData.remove(event.getPropertyName());
break;
case AbstractConfiguration.EVENT_CLEAR:
clear();
break;
case AbstractConfiguration.EVENT_SET_PROPERTY:
fetchLayoutData(event.getPropertyName());
","public void configurationChanged(ConfigurationEvent event) {
if (!event.isBeforeUpdate()) {
switch(event.getType()) {
case AbstractConfiguration.EVENT_ADD_PROPERTY:
boolean contained = layoutData.containsKey(event.getPropertyName());
PropertyLayoutData data = fetchLayoutData(event.getPropertyName());
data.setSingleLine(!contained);
break;
case AbstractConfiguration.EVENT_CLEAR_PROPERTY:
layoutData.remove(event.getPropertyName());
break;
case AbstractConfiguration.EVENT_CLEAR:
clear();
break;
case AbstractConfiguration.EVENT_SET_PROPERTY:
fetchLayoutData(event.getPropertyName());
break;
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5198,"catch (Exception ex)
","void validateRootNode() {
if (subnodeKey != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(subnodeKey);
if (nodes.size() != 1) {
subnodeKey = null;
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
}
} catch (Exception ex) {
subnodeKey = null;
}
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5199,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private Document document;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5200,private Document document;,private Document document;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,5201,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5202,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5203,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5204,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = beanUtilsBean.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
MALICIOUS_CODE,EI_EXPOSE_REP,FP,2,18,configuration,5205,"return propertyDescriptors;
","@Override
public PropertyDescriptor[] getPropertyDescriptors() {
return propertyDescriptors;
}"
MALICIOUS_CODE,EI_EXPOSE_REP,FP,2,18,configuration,5206,"return additionalBeanInfo;
","@Override
public BeanInfo[] getAdditionalBeanInfo() {
return additionalBeanInfo;
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5207,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5208,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5210,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5211,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5212,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5213,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5214,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5215,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5216,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5217,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5218,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,5220,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,5224,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5225,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5226,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,5227,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,5228,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5229,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5230,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5231,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5232,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5233,private FileLocator locator;,private FileLocator locator;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5234,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5235,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,5236,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,5237,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5238,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5239,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5240,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5241,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5242,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5243,private ConfigurationNode node;,private ConfigurationNode node;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5259,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5260,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5261,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,5262,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5264,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
combinedRoot = null;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
",private volatile ConfigurationNode combinedRoot;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5265,private volatile ConfigurationNode combinedRoot;,private volatile ConfigurationNode combinedRoot;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5266,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5267,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,5269,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5270,"catch (Exception e)
","static URL toURL(File file) throws MalformedURLException {
if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {
try {
Method toURI = file.getClass().getMethod(""toURI"", (Class[]) null);
Object uri = toURI.invoke(file, (Class[]) null);
Method toURL = uri.getClass().getMethod(""toURL"", (Class[]) null);
URL url = (URL) toURL.invoke(uri, (Class[]) null);
return url;
} catch (Exception e) {
throw new MalformedURLException(e.getMessage());
}
} else {
return file.toURL();
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5271,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5272,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5273,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5274,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5275,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5276,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5277,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,5278,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5279,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5280,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5281,"pstmt = conn.prepareStatement(query.toString());
","public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5282,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5283,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5284,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5285,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5289,"catch (Exception ex)
","void extractProperties15() {
try {
Method method = System.class.getMethod(METHOD_NAME, null);
environment = (Map) method.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5290,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,5299,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,5300,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5301,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5302,"catch (Exception e)
","static boolean isEnum(Class cls) {
if (!SystemUtils.isJavaVersionAtLeast(JAVA_VERSION_1_5)) {
return false;
}
try {
Method isEnumMethod = Class.class.getMethod(""isEnum"", new Class[] {});
return ((Boolean) isEnumMethod.invoke(cls, new Object[] {})).booleanValue();
} catch (Exception e) {
throw new RuntimeException(e.getMessage());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5303,"catch (Exception ex)
","public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = (ConfigurationNode) nodes.get(0);
if (currentRoot != super.getRootNode()) {
setRootNode(currentRoot);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5304,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5305,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,5306,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,5307,"{
super(name);
setReference(elem);
}
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
txtNode = document
.createTextNode(PropertyConverter.escapeDelimiters(
value.toString(), getListDelimiter()));
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
txtNode.setNodeValue(PropertyConverter.escapeDelimiters(
value.toString(), getListDelimiter()));
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection textNodes = new ArrayList();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (Iterator it = textNodes.iterator(); it.hasNext();)
{
elem.removeChild((org.w3c.dom.Node) it.next());
}
return result;
",private DocumentBuilder documentBuilder;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5308,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5309,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5312,public Token currentToken;,public Token currentToken;
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,5313,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5314,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5315,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5316,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5317,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,5318,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5319,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5320,"String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public Node Property() throws ParseException {
String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5321,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5322,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
PERFORMANCE,UUF_UNUSED_FIELD,FP,2,18,configuration,5323,private boolean jj_semLA;,private boolean jj_semLA;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5324,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,5325,"switch (i) {
case 0: jj_3_1(); break;
","final private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
}
jj_rescan = false;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5326,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5327,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5328,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5329,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5330,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,5331,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,3,20,configuration,5332,"jjstateSet[jjnewStateCnt++] = jjnextStates[start];
}
while (start++ != end);
}
","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}"
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,2,18,configuration,5333,"jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}
","private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5334,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5335,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5336,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5337,"char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else
{
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
","public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5338,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5339,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5340,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5341,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5342,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5343,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5344,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5345,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5346,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5347,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5348,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5349,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5350,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5351,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,5352,public Token specialToken;,public Token specialToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5353,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5354,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5355,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5356,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5357,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5358,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5359,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5360,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5361,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5362,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5363,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5364,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5388,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5389,"value = array.length == 0 ? null : new Integer(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5390,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5391,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5392,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5393,"value = array.length == 0 ? null : new Byte(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5394,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5395,"value = array.length == 0 ? null : new Float(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5396,"{
public boolean evaluate(Object obj)
{
String key = (String) obj;
return key.startsWith(prefix + ""."") || key.equals(prefix);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5397,"value = array.length == 0 ? null : new Double(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5398,"value = array.length == 0 ? null : new Short(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5399,"value = array.length == 0 ? null : new Long(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5400,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5401,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,5402,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5403,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
try {
clear();
load();
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,5404,"catch (Exception ex)
","public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5405,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
synchronized (getNodeCombiner()) 
{
combinedRoot = null;
}
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
invalidate();
}
public ConfigurationNode getRootNode()
{
synchronized (getNodeCombiner())
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Object getProperty(String key)
{
if (isForceReloadCheck())
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
return super.getProperty(key);
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
return node;
",private ConfigurationNode combinedRoot;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5406,private ConfigurationNode combinedRoot;,private ConfigurationNode combinedRoot;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5407,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5408,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,5409,"return count % 2 == 1;
","private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,5410,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5411,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5413,protected Configuration configuration;,protected Configuration configuration;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5414,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5415,"pstmt = conn.prepareStatement(query.toString());
","public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5416,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5417,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5418,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5419,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5420,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5421,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5422,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5423,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,5424,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(conn, pstmt);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5425,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5426,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,5427,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ExpressionEngine expressionEngine;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5428,private ExpressionEngine expressionEngine;,private ExpressionEngine expressionEngine;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5429,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
","public void clearProperty(String key) {
fireEvent(EVENT_CLEAR_PROPERTY, key, null, true);
List nodes = fetchNodeList(key);
for (Iterator it = nodes.iterator(); it.hasNext(); ) {
clearNode((ConfigurationNode) it.next());
}
fireEvent(EVENT_CLEAR_PROPERTY, key, null, false);
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,5430,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}"
DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,2,13,configuration,5431,"return bsCount % 2 == 1;
","private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5432,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5433,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5434,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5435,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5436,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5437,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5438,private Document document;,private Document document;
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,5440,"{
super(name);
setReference(elem);
}
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
txtNode = document
.createTextNode(PropertyConverter.escapeDelimiters(
value.toString(), getListDelimiter()));
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
txtNode.setNodeValue(PropertyConverter.escapeDelimiters(
value.toString(), getListDelimiter()));
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection textNodes = new ArrayList();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (Iterator it = textNodes.iterator(); it.hasNext();)
{
elem.removeChild((org.w3c.dom.Node) it.next());
}
return result;
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5441,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5442,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5443,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,2,18,configuration,5444,"initProperty(bean, propName, properties.get(propName));
","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5445,"getConfiguration().addProperty(name, new Character(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5446,"getConfiguration().addProperty(name, new Integer(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5447,"getConfiguration().addProperty(name, new Long(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5448,"getConfiguration().addProperty(name, new Byte(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5449,"getConfiguration().addProperty(name, new Short(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5450,"getConfiguration().addProperty(name, new Float(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5451,"getConfiguration().addProperty(name, new Double(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,2,16,configuration,5452,"throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5453,public Token currentToken;,public Token currentToken;
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,5454,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5455,"switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5456,"token = jj_consume_token(DATA);
return filterData(token.image);
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
return filterData(token.image);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5457,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5458,"Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
","final public Node Property() throws ParseException {
Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5459,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,5460,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw new ParseException(e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5461,"Token token = null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,5462,"if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 9;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (kind > 20)
kind = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (kind > 18)
kind = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && kind > 18)
kind = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && kind > 20)
kind = 20;
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
case 5:
if ((jjbitVec0[i2] & l2) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5463,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5464,public PrintStream debugStream = System.out;,public PrintStream debugStream = System.out;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5465,"jjround = 0x80000001;
for (i = 9; i-- > 0;)
jjrounds[i] = 0x80000000;
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 9; i-- > 0; ) jjrounds[i] = 0x80000000;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5466,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5467,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5468,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5469,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5470,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5471,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5472,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5473,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,5474,public Token specialToken;,public Token specialToken;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5475,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5476,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5477,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5478,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5479,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void addIntegerValue(String value) {
addValue(new Integer(value));
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5480,"addValue(new Integer(value));
","public void addIntegerValue(String value) {
addValue(new Integer(value));
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,2,18,configuration,5482,"{
super(methodName);
}
public void end(String namespace, String name) throws Exception
{
super.end(namespace, name);
digester.pop();
}
","public void addRealValue(String value) {
addValue(new Double(value));
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5483,"addValue(new Double(value));
","public void addRealValue(String value) {
addValue(new Double(value));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5484,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5485,"{
public Object createObject(Attributes attributes) throws Exception
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}"
Multithreaded correctness,STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE,FP,2,8,configuration,5486,"addValue(format.parse(value));
","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5487,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5488,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5489,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5490,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5491,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5492,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5493,private ConfigurationNode node;,private ConfigurationNode node;
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5502,"public class BaseHierarchicalConfiguration extends AbstractHierarchicalConfiguration<ImmutableNode>
implements Cloneable, InMemoryNodeModelSupport
{
private final EventListener<ConfigurationEvent> changeListener;
public BaseHierarchicalConfiguration()
{
this((HierarchicalConfiguration<ImmutableNode>) null);
}
public BaseHierarchicalConfiguration(HierarchicalConfiguration<ImmutableNode> c)
{
this(createNodeModel(c));
}
protected BaseHierarchicalConfiguration(NodeModel<ImmutableNode> model)
{
super(model);
changeListener = createChangeListener();
}
@Override
public InMemoryNodeModel getNodeModel()
{
return (InMemoryNodeModel) super.getNodeModel();
}
@Override
public Configuration subset(String prefix)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);
if (results.isEmpty())
{
return new BaseHierarchicalConfiguration();
}
final BaseHierarchicalConfiguration parent = this;
BaseHierarchicalConfiguration result =
new BaseHierarchicalConfiguration()
{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
}
};
result.getModel().setRootNode(createSubsetRootNode(results));
if (result.isEmpty())
{
return new BaseHierarchicalConfiguration();
}
else
{
result.setSynchronizer(getSynchronizer());
return result;
}
}
finally
{
endRead();
}
}
private ImmutableNode createSubsetRootNode(
Collection<QueryResult<ImmutableNode>> results)
{
ImmutableNode.Builder builder = new ImmutableNode.Builder();
Object value = null;
int valueCount = 0;
for (QueryResult<ImmutableNode> result : results)
{
if (result.isAttributeResult())
{
builder.addAttribute(result.getAttributeName(),
result.getAttributeValue(getModel().getNodeHandler()));
}
else
{
if (result.getNode().getValue() != null)
{
value = result.getNode().getValue();
valueCount++;
}
builder.addChildren(result.getNode().getChildren());
builder.addAttributes(result.getNode().getAttributes());
}
}
if (valueCount == 1)
{
builder.value(value);
}
return builder.create();
}
@Override
public HierarchicalConfiguration<ImmutableNode> configurationAt(String key,
boolean supportUpdates)
{
beginRead(false);
try
{
return supportUpdates ? createConnectedSubConfiguration(key)
: createIndependentSubConfiguration(key);
}
finally
{
endRead();
}
}
protected InMemoryNodeModel getSubConfigurationParentModel()
{
return (InMemoryNodeModel) getModel();
}
protected NodeSelector getSubConfigurationNodeSelector(String key)
{
return new NodeSelector(key);
}
protected SubnodeConfiguration createSubConfigurationForTrackedNode(
NodeSelector selector, InMemoryNodeModelSupport parentModelSupport)
{
SubnodeConfiguration subConfig =
new SubnodeConfiguration(this, new TrackedNodeModel(
parentModelSupport, selector, true));
initSubConfigurationForThisParent(subConfig);
return subConfig;
}
protected void initSubConfigurationForThisParent(SubnodeConfiguration subConfig)
{
initSubConfiguration(subConfig);
subConfig.addEventListener(ConfigurationEvent.ANY, changeListener);
}
private BaseHierarchicalConfiguration createConnectedSubConfiguration(
String key)
{
NodeSelector selector = getSubConfigurationNodeSelector(key);
getSubConfigurationParentModel().trackNode(selector, this);
return createSubConfigurationForTrackedNode(selector, this);
}
private List<HierarchicalConfiguration<ImmutableNode>> createConnectedSubConfigurations(
InMemoryNodeModelSupport parentModelSupport,
Collection<NodeSelector> selectors)
{
List<HierarchicalConfiguration<ImmutableNode>> configs =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(
selectors.size());
for (NodeSelector selector : selectors)
{
configs.add(createSubConfigurationForTrackedNode(selector,
parentModelSupport));
}
return configs;
}
private BaseHierarchicalConfiguration createIndependentSubConfiguration(
String key)
{
List<ImmutableNode> targetNodes = fetchFilteredNodeResults(key);
if (targetNodes.size() != 1)
{
throw new ConfigurationRuntimeException(
""Passed in key must select exactly one node: "" + key);
}
BaseHierarchicalConfiguration sub =
new BaseHierarchicalConfiguration(new InMemoryNodeModel(
targetNodes.get(0)));
initSubConfiguration(sub);
return sub;
}
private BaseHierarchicalConfiguration createIndependentSubConfigurationForNode(
ImmutableNode node)
{
BaseHierarchicalConfiguration sub =
new BaseHierarchicalConfiguration(new InMemoryNodeModel(node));
initSubConfiguration(sub);
return sub;
}
private List<ImmutableNode> fetchFilteredNodeResults(String key)
{
NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
return resolveNodeKey(handler.getRootNode(), key, handler);
}
@Override
public ImmutableHierarchicalConfiguration immutableConfigurationAt(
String key, boolean supportUpdates)
{
return ConfigurationUtils.unmodifiableConfiguration(configurationAt(
key, supportUpdates));
}
@Override
public HierarchicalConfiguration<ImmutableNode> configurationAt(String key)
{
return configurationAt(key, false);
}
@Override
public ImmutableHierarchicalConfiguration immutableConfigurationAt(
String key)
{
return ConfigurationUtils.unmodifiableConfiguration(configurationAt(
key));
}
@Override
public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(
String key)
{
List<ImmutableNode> nodes;
beginRead(false);
try
{
nodes = fetchFilteredNodeResults(key);
}
finally
{
endRead();
}
List<HierarchicalConfiguration<ImmutableNode>> results =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(
nodes.size());
for (ImmutableNode node : nodes)
{
BaseHierarchicalConfiguration sub =
createIndependentSubConfigurationForNode(node);
results.add(sub);
}
return results;
}
@Override
public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(
String key, boolean supportUpdates)
{
if (!supportUpdates)
{
return configurationsAt(key);
}
InMemoryNodeModel parentModel;
beginRead(false);
try
{
parentModel = getSubConfigurationParentModel();
}
finally
{
endRead();
}
Collection<NodeSelector> selectors =
parentModel.selectAndTrackNodes(key, this);
return createConnectedSubConfigurations(this, selectors);
}
@Override
public List<ImmutableHierarchicalConfiguration> immutableConfigurationsAt(
String key)
{
return toImmutable(configurationsAt(key));
}
@Override
public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(
String key)
{
List<ImmutableNode> nodes;
beginRead(false);
try
{
nodes = fetchFilteredNodeResults(key);
}
finally
{
endRead();
}
if (nodes.size() != 1)
{
return Collections.emptyList();
}
ImmutableNode parent = nodes.get(0);
List<HierarchicalConfiguration<ImmutableNode>> subs =
new ArrayList<HierarchicalConfiguration<ImmutableNode>>(parent
.getChildren().size());
for (ImmutableNode node : parent.getChildren())
{
subs.add(createIndependentSubConfigurationForNode(node));
}
return subs;
}
@Override
public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(
String key, boolean supportUpdates)
{
if (!supportUpdates)
{
return childConfigurationsAt(key);
}
InMemoryNodeModel parentModel = getSubConfigurationParentModel();
return createConnectedSubConfigurations(this,
parentModel.trackChildNodes(key, this));
}
@Override
public List<ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(
String key)
{
return toImmutable(childConfigurationsAt(key));
}
protected void subnodeConfigurationChanged(ConfigurationEvent event)
{
fireEvent(ConfigurationEvent.SUBNODE_CHANGED, null, event, event.isBeforeUpdate());
}
private void initSubConfiguration(BaseHierarchicalConfiguration sub)
{
sub.setSynchronizer(getSynchronizer());
sub.setExpressionEngine(getExpressionEngine());
sub.setListDelimiterHandler(getListDelimiterHandler());
sub.setThrowExceptionOnMissing(isThrowExceptionOnMissing());
sub.getInterpolator().setParentInterpolator(getInterpolator());
}
private EventListener<ConfigurationEvent> createChangeListener()
{
return new EventListener<ConfigurationEvent>()
{
@Override
public void onEvent(ConfigurationEvent event)
{
subnodeConfigurationChanged(event);
}
};
}
@Override
public Configuration interpolatedConfiguration()
{
InterpolatedVisitor visitor = new InterpolatedVisitor();
NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
NodeTreeWalker.INSTANCE
.walkDFS(handler.getRootNode(), visitor, handler);
BaseHierarchicalConfiguration c =
(BaseHierarchicalConfiguration) clone();
c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
return c;
}
@Override
protected NodeModel<ImmutableNode> cloneNodeModel()
{
return new InMemoryNodeModel(getModel().getNodeHandler().getRootNode());
}
private static List<ImmutableHierarchicalConfiguration> toImmutable(
List<? extends HierarchicalConfiguration<?>> subs)
{
List<ImmutableHierarchicalConfiguration> res =
new ArrayList<ImmutableHierarchicalConfiguration>(subs.size());
for (HierarchicalConfiguration<?> sub : subs)
{
res.add(ConfigurationUtils.unmodifiableConfiguration(sub));
}
return res;
}
private static NodeModel<ImmutableNode> createNodeModel(
HierarchicalConfiguration<ImmutableNode> c)
{
ImmutableNode root = (c != null) ? obtainRootNode(c) : null;
return new InMemoryNodeModel(root);
}
private static ImmutableNode obtainRootNode(
HierarchicalConfiguration<ImmutableNode> c)
{
return c.getNodeModel().getNodeHandler().getRootNode();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5503,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5505,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5506,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5507,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5508,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5509,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5510,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5512,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5513,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5514,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5516,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5518,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5519,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5520,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5522,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5523,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5524,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5525,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5527,"{
@Override
public String lookup(String key)
{
Object value = ip.resolve(key);
return (value != null) ? value.toString() : null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5528,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,5531,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5532,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5533,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5534,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5535,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5536,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,5537,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5538,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5539,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5544,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5545,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5546,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5555,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5556,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5557,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5558,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5559,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5560,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5561,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5562,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5563,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5564,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5565,private List<ConfigData> configurations;,private List<ConfigData> configurations;
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5566,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5567,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5568,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,5569,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5571,protected Configuration configuration;,protected Configuration configuration;
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5572,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5573,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5574,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return result;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5575,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return empty;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5576,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return found;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5577,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,2,12,configuration,5578,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5579,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
AbstractConfiguration config = provider.getConfiguration(decl);
installInterpolator(decl, config);
return config;
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + tagName, ex2);
}
}
return null;
}
}
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,5580,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5581,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5582,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,5583,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,2,8,configuration,5584,"synchronized (configs)
","private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,5585,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,5586,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, CombinedConfiguration> configs =
new ConcurrentHashMap<String, CombinedConfiguration>();
private List<ConfigData> configurations = new ArrayList<ConfigData>();
private Map<String, AbstractConfiguration> namedConfigurations =
new HashMap<String, AbstractConfiguration>();
private String keyPattern;
private NodeCombiner nodeCombiner;
private String loggerName = DynamicCombinedConfiguration.class.getName();
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public DynamicCombinedConfiguration(NodeCombiner comb)
{
super();
setNodeCombiner(comb);
setIgnoreReloadExceptions(false);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
}
public DynamicCombinedConfiguration()
{
super();
setIgnoreReloadExceptions(false);
setLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));
}
public void setKeyPattern(String pattern)
{
this.keyPattern = pattern;
}
public String getKeyPattern()
{
return this.keyPattern;
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
@Override
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
@Override
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidateAll();
}
@Override
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
}
@Override
public int getNumberOfConfigurations()
{
return configurations.size();
}
@Override
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
@Override
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
@Override
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
@Override
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
@Override
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
}
}
return super.removeConfiguration(config);
}
@Override
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
return super.removeConfigurationAt(index);
}
@Override
public ConfigurationNode getRootNode()
{
return getCurrentConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (configs != null)
{
this.getCurrentConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public void addProperty(String key, Object value)
{
this.getCurrentConfig().addProperty(key, value);
}
@Override
public void clear()
{
if (configs != null)
{
this.getCurrentConfig().clear();
}
}
@Override
public void clearProperty(String key)
{
this.getCurrentConfig().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getCurrentConfig().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getCurrentConfig().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getCurrentConfig().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getCurrentConfig().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getCurrentConfig().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getCurrentConfig().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getCurrentConfig().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getCurrentConfig().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getCurrentConfig().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getCurrentConfig().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getCurrentConfig().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getCurrentConfig().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getCurrentConfig().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getCurrentConfig().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getCurrentConfig().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getCurrentConfig().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getCurrentConfig().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getCurrentConfig().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return this.getCurrentConfig().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getCurrentConfig().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getCurrentConfig().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getCurrentConfig().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getCurrentConfig().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getCurrentConfig().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getCurrentConfig().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getCurrentConfig().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getCurrentConfig().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getCurrentConfig().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getCurrentConfig().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getCurrentConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (configs != null)
{
this.getCurrentConfig().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getCurrentConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return this.getCurrentConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (configs != null)
{
this.getCurrentConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getCurrentConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getCurrentConfig().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getCurrentConfig().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getCurrentConfig().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getCurrentConfig().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getCurrentConfig().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getCurrentConfig().interpolatedConfiguration();
}
@Override
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
return getCurrentConfig().getSource(key);
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
for (CombinedConfiguration cc : configs.values())
{
cc.addConfigurationListener(l);
}
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeConfigurationListener(l);
}
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearConfigurationListeners();
}
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.addErrorListener(l);
}
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
for (CombinedConfiguration cc : configs.values())
{
cc.removeErrorListener(l);
}
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
for (CombinedConfiguration cc : configs.values())
{
cc.clearErrorListeners();
}
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
@Override
public Object clone()
{
return super.clone();
}
@Override
public void invalidate()
{
getCurrentConfig().invalidate();
}
public void invalidateAll()
{
if (configs == null)
{
return;
}
for (CombinedConfiguration cc : configs.values())
{
cc.invalidate();
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private CombinedConfiguration getCurrentConfig()
{
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null)
{
synchronized (configs)
{
config = configs.get(key);
if (config == null)
{
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners())
{
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners())
{
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations)
{
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
",private NodeCombiner nodeCombiner;
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5587,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5588,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,5592,private final Object reloadLock;,private final Object reloadLock;
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,5593,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
@Override
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,5594,private final Object reloadLock;,private final Object reloadLock;
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,5595,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,2,14,configuration,5596,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5597,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,5598,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5599,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,5600,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5601,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,5603,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,5604,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,5605,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,5606,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
public Object getReloadLock()
{
return config.getReloadLock();
}
@Override
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
public void clear()
{
getConfig().clear();
}
@Override
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
@Override
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return config.getKeys(makePath());
}
@Override
public Iterator<String> getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
public boolean isEmpty()
{
return getConfig().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public Node getRoot()
{
return getConfig().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
@Override
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","@Override
public long getLong(String key, long defaultValue) {
return config.getLong(makePath(key), defaultValue);
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5607,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5608,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5609,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5610,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5611,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5612,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5613,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5614,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5615,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,5616,private final String protocol;,private final String protocol;
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,5617,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5618,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,5619,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5620,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private DocumentBuilder documentBuilder;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5621,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;
BAD_PRACTICE,SE_INNER_CLASS,FP,3,19,configuration,5622,"{
super(name);
setReference(elem);
}
@Override
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
@Override
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection<org.w3c.dom.Node> textNodes = new ArrayList<org.w3c.dom.Node>();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (org.w3c.dom.Node tn : textNodes)
{
elem.removeChild(tn);
}
return result;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,5623,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}"
BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,2,16,configuration,5624,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,5625,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5626,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5627,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","private void writeProperty(PrintWriter out, String key, Object value) {
String k = StringEscapeUtils.escapeXml(key);
if (value != null) {
String v = StringEscapeUtils.escapeXml(String.valueOf(value));
v = StringUtils.replace(v, String.valueOf(getListDelimiter()), ""\\"" + getListDelimiter());
out.println(""  <entry key=\"""" + k + ""\"">"" + v + ""</entry>"");
} else {
out.println(""  <entry key=\"""" + k + ""\""/>"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5628,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,3,20,configuration,5629,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5630,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5631,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5632,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5633,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5634,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,5635,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,5636,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5637,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,5638,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5639,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,5640,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5641,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5642,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5643,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5644,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5645,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5646,private ConfigurationNode node;,private ConfigurationNode node;
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5702,"{
@Override
protected Object interpolate(final Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5703,"final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5704,"final PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5705,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5706,"dump(configuration, new PrintWriter(out));
","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5707,"catch (final Exception ex)
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,5708,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5709,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5710,"{
@Override
public void error(final SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5711,"catch (final Exception e)
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5712,"catch (final Exception ex)
","private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5714,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5716,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5717,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5718,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5720,"reloadingController.resetReloadingState();
","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5721,"catch (final Exception e)
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5722,"return new Double(n.doubleValue());
","public static Double toDouble(final Object value) throws ConversionException {
final Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
}
return new Double(n.doubleValue());
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5723,"return new Float(n.floatValue());
","public static Float toFloat(final Object value) throws ConversionException {
final Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
}
return new Float(n.floatValue());
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5725,"catch (final Exception e)
","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5728,"catch (final Exception ex)
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,5729,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5730,"catch (final Exception ex)
","private FileSystemOptions getOptions(final String scheme) {
final FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5731,"final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5732,"catch (final Exception e)
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,5733,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5734,"final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5735,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,5736,"return src != null ? src.clone() : null;
","private static <T> T[] defensiveCopy(final T[] src) {
return src != null ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5737,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5738,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5739,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5761,"return getFloat(key, new Float(defaultValue));
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue));
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5762,"return getShort(key, new Short(defaultValue));
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue));
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5763,"return getByte(key, new Byte(defaultValue));
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue));
}"
PERFORMANCE,DM_NUMBER_CTOR,FP,2,18,configuration,5764,"return getLong(key, new Long(defaultValue));
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue));
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5765,"return getDouble(key, new Double(defaultValue));
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue));
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5766,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5767,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5768,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,3,20,configuration,5769,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURI().toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = DefaultFileSystem.constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = DefaultFileSystem.constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5770,protected Configuration configuration;,protected Configuration configuration;
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5771,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5772,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
results.addAll(PropertyConverter.flatten(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
return (results.size() > 1) ? results : results.get(0);
} else {
return null;
}
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5773,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_IS_EMPTY, table), true);
ResultSet rs = ps.executeQuery();
return rs.next() ? rs.getInt(1) : null;
}"
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,2,20,configuration,5774,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_GET_KEYS, keyColumn, table), true);
ResultSet rs = ps.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
return null;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5775,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && nameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(nameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5776,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5777,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5782,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
","private ReloadingStrategy createReloadingStrategy() {
if (getReloadingStrategy() == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5783,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (getReloadingStrategy() == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5784,"public class MultiFileHierarchicalConfiguration extends AbstractHierarchicalFileConfiguration
implements ConfigurationListener, ConfigurationErrorListener, EntityResolverSupport
{
private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public <T> List<T> getList(String key, List<T> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public <T> List<T> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubConfiguration<ConfigurationNode> configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubConfiguration<ConfigurationNode> configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<SubConfiguration<ConfigurationNode>> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public ConfigurationNode getRootNode()
{
return getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Collection<ConfigurationListener> listeners = getConfigurationListeners();
for (ConfigurationListener listener : listeners)
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Collection<ConfigurationErrorListener> listeners = getErrorListeners();
for (ConfigurationErrorListener listener : listeners)
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractHierarchicalFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (getReloadingStrategy() == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,3,13,configuration,5785,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,5786,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,2,10,configuration,5787,"if (!init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (!init) {
super.setRootNode(rootNode);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5788,"catch (Exception ex)
","@Override
public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5790,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5791,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,5792,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5793,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5794,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5795,private FlatNode root;,private FlatNode root;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5796,"catch (Exception ex)
","public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5797,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","public String getPublicID() {
return publicID;
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5798,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5800,"public class CombinedConfiguration extends
AbstractHierarchicalConfiguration<Object> implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final CombinedNodeHandler COMBINED_NODE_HANDLER = new CombinedNodeHandler();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private CombinedNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
private boolean ignoreReloadExceptions = true;
public CombinedConfiguration(NodeCombiner comb)
{
super(new CombinedConfigurationNodeHandler());
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config,
String name, String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.getNodeHandler().initNodeHandlerRegistry(getCombinedNodeHandler());
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config,
String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractHierarchicalConfiguration<?>> getConfigurations()
{
List<AbstractHierarchicalConfiguration<?>> list = new ArrayList<AbstractHierarchicalConfiguration<?>>();
for (ConfigData configuration : configurations)
{
list.add(configuration.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>();
for (ConfigData configuration : configurations)
{
list.add((configuration).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
synchronized (getNodeCombiner()) 
{
combinedRoot = null;
}
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public Object getRootNode()
{
synchronized (getNodeCombiner())
{
if (combinedRoot == null)
{
getCombinedNodeHandler().setHandlers(createSubHandlers());
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy
.addConfiguration(
(AbstractHierarchicalConfiguration<?>) ConfigurationUtils
.cloneConfiguration(cd
.getConfiguration()), cd
.getName(), cd.getAt());
}
return copy;
}
catch (CloneNotSupportedException cnsex)
{
throw new ConfigurationRuntimeException(cnsex);
}
}
@Override
public Object getProperty(String key)
{
if (isForceReloadCheck())
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
return super.getProperty(key);
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
NodeList<Object> nodes = fetchNodeList(key);
if (nodes.size() == 0)
{
return null;
}
Configuration source = findSourceConfiguration(nodes, 0);
for (int idx = 1; idx < nodes.size(); idx++)
{
Configuration src = findSourceConfiguration(nodes, idx);
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected Map<Class<?>, NodeHandler<?>> createSubHandlers()
{
Map<Class<?>, NodeHandler<?>> result = new HashMap<Class<?>, NodeHandler<?>>();
for (ConfigData cd : configurations)
{
result.put(cd.getConfiguration().getRootNode().getClass(), cd
.getConfiguration().getNodeHandler());
}
return result;
}
@Override
protected NodeList<Object> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
private CombinedNode constructCombinedNode()
{
initSubHandlers();
if (getNumberOfConfigurations() < 1)
{
return new CombinedNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node, getNodeHandler(),
it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}
private void initSubHandlers()
{
Map<Class<?>, NodeHandler<?>> handlers = new HashMap<Class<?>, NodeHandler<?>>(
createSubHandlers());
handlers.put(CombinedNode.class, COMBINED_NODE_HANDLER);
getCombinedNodeHandler().setHandlers(handlers);
}
private Configuration findSourceConfiguration(Object node)
{
Object root = null;
Object current = node;
while (current != null)
{
root = current;
current = getNodeHandler().getParent(current);
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
}
private Configuration findSourceConfiguration(NodeList<Object> nl, int idx)
{
return nl.isNode(idx) ? findSourceConfiguration(nl.getNode(idx))
: findSourceConfiguration(nl.getAttributeParent(idx));
}
private CombinedConfigurationNodeHandler getCombinedNodeHandler()
{
return (CombinedConfigurationNodeHandler) getNodeHandler();
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5801,"PrintStream stream = new PrintStream(os);
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5802,"getLogger().debug(os.toString());
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,3,19,configuration,5803,"catch (Exception ex)
","protected void performReloadCheck() {
for (ConfigData cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5806,"public class ConfigurationNodeHandler extends AbstractNodeHandler<ConfigurationNode>
implements NodeHandler<ConfigurationNode>
{
public ConfigurationNode addChild(ConfigurationNode node, String name)
{
ConfigurationNode child = createNode(node, name);
node.addChild(child);
return child;
}
public Object getAttributeValue(ConfigurationNode node, String name)
{
List<ConfigurationNode> attrs = node.getAttributes(name);
if (attrs.isEmpty())
{
return null;
}
else if (attrs.size() == 1)
{
return attrs.get(0).getValue();
}
else
{
List<Object> result = new ArrayList<Object>(attrs.size());
for (ConfigurationNode attr : attrs)
{
result.add(attr.getValue());
}
return result;
}
}
public List<String> getAttributes(ConfigurationNode node)
{
List<ConfigurationNode> attrs = node.getAttributes();
assert attrs != null : ""Attribute list is null"";
List<String> names = new ArrayList<String>(attrs.size());
for (ConfigurationNode n : attrs)
{
names.add(n.getName());
}
return names;
}
@Override
public boolean hasAttributes(ConfigurationNode node)
{
return !node.getAttributes().isEmpty();
}
public ConfigurationNode getChild(ConfigurationNode node, int index)
{
return node.getChild(index);
}
public List<ConfigurationNode> getChildren(ConfigurationNode node)
{
return node.getChildren();
}
public List<ConfigurationNode> getChildren(ConfigurationNode node,
String name)
{
return node.getChildren(name);
}
public ConfigurationNode getParent(ConfigurationNode node)
{
return node.getParentNode();
}
public Object getValue(ConfigurationNode node)
{
return node.getValue();
}
public String nodeName(ConfigurationNode node)
{
return node.getName();
}
public void setAttributeValue(ConfigurationNode node, String name,
Object value)
{
node.removeAttribute(name);
addAttributeValue(node, name, value);
}
public void addAttributeValue(ConfigurationNode node, String name,
Object value)
{
ConfigurationNode attr = createNode(node, name);
attr.setValue(value);
node.addAttribute(attr);
}
public void setValue(ConfigurationNode node, Object value)
{
node.setValue(value);
}
protected ConfigurationNode createNode(ConfigurationNode parent, String name)
{
ConfigurationNode node = new DefaultConfigurationNode(name);
node.setParentNode(parent);
return node;
}
public void removeAttribute(ConfigurationNode node, String name)
{
node.removeAttribute(name);
}
public void removeChild(ConfigurationNode node, ConfigurationNode child)
{
node.removeChild(child);
}
public int getChildrenCount(ConfigurationNode node, String name)
{
return node.getChildrenCount(name);
","public void addAttributeValue(ConfigurationNode node, String name, Object value) {
ConfigurationNode attr = createNode(node, name);
attr.setValue(value);
node.addAttribute(attr);
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5807,"T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
","@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5808,"T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
","@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5809,private NodeHandler<T> nodeHandler;,private NodeHandler<T> nodeHandler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5810,"return new ConfigurationNodeIteratorChildren<T>(this, test, reverse,
","@SuppressWarnings(""unchecked"")
@Override
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
return new ConfigurationNodeIteratorChildren<T>(this, test, reverse, (ConfigurationNodePointer<T>) startWith);
}"
CORRECTNESS,NP_GUARANTEED_DEREF,FP,2,8,configuration,5812,"if (fileName.startsWith(""."" + File.separator))
","public static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}"
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,2,16,configuration,5813,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,2,17,configuration,5814,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5815,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,5816,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5817,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
BAD_PRACTICE,DE_MIGHT_IGNORE,FP,2,16,configuration,5818,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}"
BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,3,19,configuration,5819,"public static class Variables extends ArrayList<Variable>
{
public Variable getVariable()
{
if (size() > 0)
{
return get(size() - 1);
}
else
{
return null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5820,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5821,"List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(OBJECT_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
child = Property();
if (child != null) children.add(child);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
jj_consume_token(LIST_SEPARATOR);
child = Property();
if (child != null) children.add(child);
}
break;
default:
jj_la1[1] = jj_gen;
;
}
jj_consume_token(OBJECT_END);
JSONConfiguration configuration = new JSONConfiguration();
ConfigurationNode root = configuration.getRootNode();
for (int i = 0; i < children.size(); i++)
{
child = (ConfigurationNode) children.get(i);
root.addChild(child);
}
{if (true) return configuration;}
","final public JSONConfiguration Object() throws ParseException {
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(OBJECT_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
child = Property();
if (child != null)
children.add(child);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
jj_consume_token(LIST_SEPARATOR);
child = Property();
if (child != null)
children.add(child);
}
break;
default:
jj_la1[1] = jj_gen;
;
}
jj_consume_token(OBJECT_END);
JSONConfiguration configuration = new JSONConfiguration();
ConfigurationNode root = configuration.getRootNode();
for (int i = 0; i < children.size(); i++) {
child = (ConfigurationNode) children.get(i);
root.addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5822,"ReInit(stream, null);
}
","public void ReInit(java.io.InputStream stream) {
ReInit(stream, null);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5823,"Object value = null;
Token token;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{if (true) return value;}
break;
case OBJECT_BEGIN:
value = Object();
{if (true) return value;}
break;
case STRING:
value = String();
{if (true) return value;}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{if (true) return new BigInteger(token.image);}
break;
case REAL:
token = jj_consume_token(REAL);
{if (true) return new BigDecimal(token.image);}
break;
case TRUE:
token = jj_consume_token(TRUE);
{if (true) return Boolean.TRUE;}
break;
case FALSE:
token = jj_consume_token(FALSE);
{if (true) return Boolean.FALSE;}
break;
case NULL:
token = jj_consume_token(NULL);
{if (true) return null;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Value() throws ParseException {
Object value = null;
Token token;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{
if (true)
return value;
}
break;
case OBJECT_BEGIN:
value = Object();
{
if (true)
return value;
}
break;
case STRING:
value = String();
{
if (true)
return value;
}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{
if (true)
return new BigInteger(token.image);
}
break;
case REAL:
token = jj_consume_token(REAL);
{
if (true)
return new BigDecimal(token.image);
}
break;
case TRUE:
token = jj_consume_token(TRUE);
{
if (true)
return Boolean.TRUE;
}
break;
case FALSE:
token = jj_consume_token(FALSE);
{
if (true)
return Boolean.FALSE;
}
break;
case NULL:
token = jj_consume_token(NULL);
{
if (true)
return null;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5824,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5825,"String key = null;
Object value = null;
key = String();
jj_consume_token(SEPARATOR);
value = Value();
ConfigurationNode node = null;
if (value instanceof AbstractHierarchicalConfiguration)
{
AbstractHierarchicalConfiguration config = (AbstractHierarchicalConfiguration) value;
node = (ConfigurationNode) config.getRootNode();
node.setName(key);
}
else if (value != null)
{
node = new DefaultConfigurationNode();
node.setValue(value);
node.setName(key);
}
{if (true) return node;}
","final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
key = String();
jj_consume_token(SEPARATOR);
value = Value();
ConfigurationNode node = null;
if (value instanceof AbstractHierarchicalConfiguration) {
AbstractHierarchicalConfiguration config = (AbstractHierarchicalConfiguration) value;
node = (ConfigurationNode) config.getRootNode();
node.setName(key);
} else if (value != null) {
node = new DefaultConfigurationNode();
node.setValue(value);
node.setName(key);
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD,FP,2,11,configuration,5826,"token = jj_consume_token(TRUE);
","final public Object Value() throws ParseException {
Object value = null;
Token token;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{
if (true)
return value;
}
break;
case OBJECT_BEGIN:
value = Object();
{
if (true)
return value;
}
break;
case STRING:
value = String();
{
if (true)
return value;
}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{
if (true)
return new BigInteger(token.image);
}
break;
case REAL:
token = jj_consume_token(REAL);
{
if (true)
return new BigDecimal(token.image);
}
break;
case TRUE:
token = jj_consume_token(TRUE);
{
if (true)
return Boolean.TRUE;
}
break;
case FALSE:
token = jj_consume_token(FALSE);
{
if (true)
return Boolean.FALSE;
}
break;
case NULL:
token = jj_consume_token(NULL);
{
if (true)
return null;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5827,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
element = Value();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
element = Value();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
element = Value();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
element = Value();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5828,"Token token = null;
token = jj_consume_token(STRING);
{if (true) return StringEscapeUtils.unescapeJava(removeQuotes(token.image));}
","final public String String() throws ParseException {
Token token = null;
token = jj_consume_token(STRING);
{
if (true)
return StringEscapeUtils.unescapeJava(removeQuotes(token.image));
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5829,"try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}
","public void ReInit(java.io.InputStream stream, String encoding) {
try {
jj_input_stream.ReInit(stream, encoding, 1, 1);
} catch (java.io.UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5830,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}
","public void ReInit(JSONParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5831,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5832,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5833,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5834,"if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5835,"jjround = 0x80000001;
for (i = 31; i-- > 0;)
jjrounds[i] = 0x80000000;
}
","private void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 31; i-- > 0; ) jjrounds[i] = 0x80000000;
}"
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,5836,"retval += "" \"""";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer expected = new StringBuffer();
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected.append(""..."");
}
expected.append(eol).append(""    "");
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += "" "" + tokenImage[tok.kind];
retval += "" \"""";
retval += add_escapes(tok.image);
retval += "" \"""";
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected.toString();
return retval;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5837,public Token currentToken;,public Token currentToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5838,"ReInit(dstream, encoding, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5839,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5840,"this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5841,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (tabSize - (column % tabSize));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5842,"ReInit(dstream, encoding, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, 1, 1, 4096);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5843,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5844,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5845,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5846,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5847,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5848,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5849,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5850,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5851,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5852,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5853,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5854,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5855,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5856,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5857,"char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else
{
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
","public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5858,public int endLine;,public int endLine;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5859,public int endColumn;,public int endColumn;
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,5860,public Token specialToken;,public Token specialToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5861,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
CORRECTNESS,NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS,FP,2,8,configuration,5862,"return instance.getByteArray(null, null);
","public static synchronized byte[] decodeBase64(String base64String) {
instance.put(null, base64String);
return instance.getByteArray(null, null);
}"
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,2,18,configuration,5863,"retval += "" \"""";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer expected = new StringBuffer();
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected.append(""..."");
}
expected.append(eol).append(""    "");
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += "" "" + tokenImage[tok.kind];
retval += "" \"""";
retval += add_escapes(tok.image);
retval += "" \"""";
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected.toString();
return retval;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5864,public Token currentToken;,public Token currentToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5866,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5867,"String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,5868,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5869,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}"
DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,2,19,configuration,5870,"switch (i) {
case 0: jj_3_1(); break;
","private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
try {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5871,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5872,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5873,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5874,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof AbstractHierarchicalConfiguration)
{
AbstractHierarchicalConfiguration conf = (AbstractHierarchicalConfiguration) child.getValue();
ConfigurationNode root = (ConfigurationNode) conf.getRootNode();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (ConfigurationNode) children.get(i);
configuration.getRootNode().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof AbstractHierarchicalConfiguration) {
AbstractHierarchicalConfiguration conf = (AbstractHierarchicalConfiguration) child.getValue();
ConfigurationNode root = (ConfigurationNode) conf.getRootNode();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (ConfigurationNode) children.get(i);
configuration.getRootNode().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5875,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,3,20,configuration,5876,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5877,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5878,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5879,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5880,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5881,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5882,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5883,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5884,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5885,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5886,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5887,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5888,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5889,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5890,"this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5891,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5892,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5893,"ReInit(dstream, encoding, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}"
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5894,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (tabSize - (column % tabSize));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5895,public int endLine;,public int endLine;
DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,2,18,configuration,5896,public int endColumn;,public int endColumn;
DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,2,17,configuration,5897,public Token specialToken;,public Token specialToken;
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,3,19,configuration,5898,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5899,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5900,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,2,18,configuration,5901,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}"
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,2,11,configuration,5902,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5903,"fs = ((CatalogManager) catalogManager).getFileSystem();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5904,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,1,16,configuration,5905,"String name = (url == null) ? fileName : url.toString();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,5906,"staticCatalog = catalog;
","public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5907,"List<ConfigurationNode> nodes = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> nodes = namedNodes.remove(name);
if (nodes != null) {
detachNodes(nodes);
this.nodes.removeAll(nodes);
return true;
}
}
return false;
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5908,"List<ConfigurationNode> nodes = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
this.nodes.remove(node);
List<ConfigurationNode> nodes = namedNodes.get(node.getName());
if (nodes != null) {
nodes.remove(node);
if (nodes.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,3,20,configuration,5909,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5918,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5920,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {
Collection<ImmutableNode> subNodes = new LinkedList<>(refHandler.getChildren(node));
Iterator<ImmutableNode> children = subNodes.iterator();
ImmutableNode sibling1;
ImmutableNode nd = null;
while (children.hasNext()) {
do {
sibling1 = nd;
nd = children.next();
} while (refHandler.getReference(nd) != null && children.hasNext());
if (refHandler.getReference(nd) == null) {
List<ImmutableNode> newNodes = new LinkedList<>();
newNodes.add(nd);
while (children.hasNext()) {
nd = children.next();
if (refHandler.getReference(nd) == null) {
newNodes.add(nd);
} else {
break;
}
}
ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
for (ImmutableNode insertNode : newNodes) {
if (refHandler.getReference(insertNode) == null) {
insert(insertNode, node, sibling1, sibling2, refHandler);
sibling1 = insertNode;
}
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5921,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,3,20,configuration,5922,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<>();
namedConfigurations = new HashMap<>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5923,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,5924,"dump(configuration, new PrintWriter(out));
","public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5925,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,5926,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,5927,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5928,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5929,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5930,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5931,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,5933,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5935,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,5936,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5937,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5940,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,5941,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5942,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5944,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5948,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,5949,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5950,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,5951,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,5952,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,5953,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNodeBuilder.FORMAT) {
out.println(padding + ""<date>"" + PListNodeBuilder.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
for (Object o : (List<?>) value) {
printValue(out, indentLevel + 1, o);
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
@SuppressWarnings(""unchecked"")
HierarchicalConfiguration<ImmutableNode> config = (HierarchicalConfiguration<ImmutableNode>) value;
printNode(out, indentLevel, config.getNodeModel().getNodeHandler().getRootNode());
} else if (value instanceof ImmutableConfiguration) {
out.println(padding + ""<dict>"");
ImmutableConfiguration config = (ImmutableConfiguration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64;
try {
base64 = new String(Base64.encodeBase64((byte[]) value), DATA_ENCODING);
} catch (UnsupportedEncodingException e) {
throw new AssertionError(e);
}
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml10(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml10(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5954,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,5955,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5956,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,5957,"return (src != null) ? src.clone() : null;
","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5961,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,5962,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,5963,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,6120,"ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,6122,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {
Collection<ImmutableNode> subNodes = new LinkedList<>(refHandler.getChildren(node));
Iterator<ImmutableNode> children = subNodes.iterator();
ImmutableNode sibling1;
ImmutableNode nd = null;
while (children.hasNext()) {
do {
sibling1 = nd;
nd = children.next();
} while (refHandler.getReference(nd) != null && children.hasNext());
if (refHandler.getReference(nd) == null) {
List<ImmutableNode> newNodes = new LinkedList<>();
newNodes.add(nd);
while (children.hasNext()) {
nd = children.next();
if (refHandler.getReference(nd) == null) {
newNodes.add(nd);
} else {
break;
}
}
ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
for (ImmutableNode insertNode : newNodes) {
if (refHandler.getReference(insertNode) == null) {
insert(insertNode, node, sibling1, sibling2, refHandler);
sibling1 = insertNode;
}
}
}
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,6123,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,6124,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}"
I18N,DM_DEFAULT_ENCODING,FP,1,19,configuration,6126,"dump(configuration, new PrintWriter(out));
","public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,6127,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
BAD_PRACTICE,NM_CONFUSING,FP,3,19,configuration,6128,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}"
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,3,15,configuration,6129,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,6130,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,6131,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,6132,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,6133,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,3,19,configuration,6135,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,6137,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,6138,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,6139,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}"
Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,2,17,configuration,6141,private ReloadingController reloadingController;,private ReloadingController reloadingController;
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,6142,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}"
PERFORMANCE,DM_FP_NUMBER_CTOR,FP,3,20,configuration,6143,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,6144,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,6146,"{
@Override
public String lookup(String key)
{
Object value = ip.resolve(key);
return (value != null) ? value.toString() : null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,6147,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,6150,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}"
I18N,DM_CONVERT_CASE,FP,3,20,configuration,6151,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,URF_UNREAD_FIELD,FP,3,20,configuration,6152,private final String protocol;,private final String protocol;
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,6153,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,3,20,configuration,6154,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,REC_CATCH_EXCEPTION,FP,3,20,configuration,6155,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,6156,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}"
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,6157,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}"
DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,3,20,configuration,6158,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}"
DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,3,20,configuration,6159,"return (src != null) ? src.clone() : null;
","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}"
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,6163,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;
BAD_PRACTICE,SE_BAD_FIELD,FP,2,16,configuration,6164,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;
DODGY_CODE,BC_UNCONFIRMED_CAST,FP,3,20,configuration,6165,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}"
