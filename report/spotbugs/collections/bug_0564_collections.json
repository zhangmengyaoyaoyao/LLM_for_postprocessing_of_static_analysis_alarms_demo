{
    "category": "DODGY_CODE",
    "vtype": "UC_USELESS_CONDITION",
    "priority": "1",
    "rank": "14",
    "project": "collections",
    "warning_line": "left.relativePosition += relativePosition + (relativePosition > 0 ? 0 : 1);\n",
    "warning_method": "private AVLNode<E> removeSelf() {\nif (getRightSubTree() == null && getLeftSubTree() == null) {\nreturn null;\n}\nif (getRightSubTree() == null) {\nif (relativePosition > 0) {\nleft.relativePosition += relativePosition + (relativePosition > 0 ? 0 : 1);\n}\nleft.max().setRight(null, right);\nreturn left;\n}\nif (getLeftSubTree() == null) {\nright.relativePosition += relativePosition - (relativePosition < 0 ? 0 : 1);\nright.min().setLeft(null, left);\nreturn right;\n}\nif (heightRightMinusLeft() > 0) {\nfinal AVLNode<E> rightMin = right.min();\nvalue = rightMin.value;\nif (leftIsPrevious) {\nleft = rightMin.left;\n}\nright = right.removeMin();\nif (relativePosition < 0) {\nrelativePosition++;\n}\n} else {\nfinal AVLNode<E> leftMax = left.max();\nvalue = leftMax.value;\nif (rightIsNext) {\nright = leftMax.right;\n}\nfinal AVLNode<E> leftPrevious = left.left;\nleft = left.removeMax();\nif (left == null) {\nleft = leftPrevious;\nleftIsPrevious = true;\n}\nif (relativePosition > 0) {\nrelativePosition--;\n}\n}\nrecalcHeight();\nreturn this;\n}"
}