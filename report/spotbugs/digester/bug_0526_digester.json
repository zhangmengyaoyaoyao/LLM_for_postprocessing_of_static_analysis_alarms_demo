{
    "category": "PERFORMANCE",
    "vtype": "SIC_INNER_SHOULD_BE_STATIC_ANON",
    "priority": "3",
    "rank": "20",
    "project": "digester",
    "warning_line": "{\npublic Constructor<?>[] run()\n{\nreturn type.getDeclaredConstructors();\n",
    "warning_method": "@SuppressWarnings(\"unchecked\")\nprivate <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {\nClass<?> annotationType = annotation.annotationType();\nif (annotationType.isAnnotationPresent(DigesterRuleList.class)) {\nAnnotation[] annotations = getAnnotationsArrayValue(annotation);\nif (annotations != null && annotations.length > 0) {\nfor (Annotation ptr : annotations) {\nhandle(ptr, element);\n}\n}\n} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {\nDigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);\nClass<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();\ntry {\nAnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);\nhandler.handle(annotation, element, this.rulesBinder);\n} catch (Exception e) {\nrulesBinder.addError(e);\n}\n}\n}"
}