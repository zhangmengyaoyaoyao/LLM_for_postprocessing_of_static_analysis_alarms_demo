{
    "category": "PERFORMANCE",
    "vtype": "SIC_INNER_SHOULD_BE_STATIC_ANON",
    "priority": "3",
    "rank": "20",
    "project": "digester",
    "warning_line": "{\n@Override\nprotected void loadRules()\n{\nloadXMLRules( xmlRulesResource );\n}\n",
    "warning_method": "@Override\npublic void begin(final String namespace, final String name, final Attributes attributes) throws Exception {\nfinal String fileName = attributes.getValue(\"url\");\nif (fileName != null && !fileName.isEmpty()) {\nfinal URL xmlRulesResource;\nif (fileName.startsWith(CLASSPATH_URL_PREFIX)) {\nString path = fileName.substring(CLASSPATH_URL_PREFIX.length());\nif ('/' == path.charAt(0)) {\npath = path.substring(1);\n}\nxmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);\nif (xmlRulesResource == null) {\ntargetRulesBinder.addError(\"Resource '%s' not found, please make sure it is in the classpath\", path);\nreturn;\n}\n} else {\ntry {\nxmlRulesResource = new URL(fileName);\n} catch (final MalformedURLException e) {\ntargetRulesBinder.addError(\"An error occurred while inculing file from '%s': %s\", fileName, e.getMessage());\nreturn;\n}\n}\nfinal Set<String> includedFiles = memoryRulesBinder.getIncludedFiles();\nfinal String xmlRulesResourceString = xmlRulesResource.toString();\nif (includedFiles.add(xmlRulesResourceString)) {\ntry {\ninstall(new FromXmlRulesModule() {\n@Override\nprotected void loadRules() {\nloadXMLRules(xmlRulesResource);\n}\n});\n} finally {\nincludedFiles.remove(xmlRulesResourceString);\n}\n} else {\ntargetRulesBinder.addError(\"Circular file inclusion detected for XML rules: %s\", xmlRulesResource);\n}\n}\nfinal String className = attributes.getValue(\"class\");\nif (className != null && !className.isEmpty()) {\ntry {\nfinal Class<?> cls = Class.forName(className);\nif (!RulesModule.class.isAssignableFrom(cls)) {\ntargetRulesBinder.addError(\"Class '%s' if not a '%s' implementation\", className, RulesModule.class.getName());\nreturn;\n}\nfinal RulesModule rulesSource = (RulesModule) cls.newInstance();\ninstall(rulesSource);\n} catch (final Exception e) {\ntargetRulesBinder.addError(\"Impossible to include programmatic rules from class '%s': %s\", className, e.getMessage());\n}\n}\n}"
}