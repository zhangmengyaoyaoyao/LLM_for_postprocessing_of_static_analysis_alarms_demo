{
    "category": "PERFORMANCE",
    "vtype": "SBSC_USE_STRINGBUFFER_CONCATENATION",
    "priority": "2",
    "rank": "18",
    "project": "mavendp",
    "warning_line": "message += \"  \" + missingArtifact.getId() + \"\\n\";\n",
    "warning_method": "private void refreshDependenciesForProject(MavenProject project, List<String> inclusionPatterns, List<String> exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {\nMap<String, Artifact> artifactMap = createProjectArtifactMap(project);\nif (artifactMap.isEmpty()) {\ngetLog().info(\"Nothing to do for project: \" + project.getId());\nreturn;\n}\nMap<String, Artifact> depsAfterInclusion = new HashMap<String, Artifact>();\nif (!inclusionPatterns.isEmpty()) {\nfor (Iterator<Map.Entry<String, Artifact>> artifactIter = artifactMap.entrySet().iterator(); artifactIter.hasNext(); ) {\nMap.Entry<String, Artifact> artifactEntry = artifactIter.next();\nArtifact artifact = artifactEntry.getValue();\nif (resolutionFuzziness.equals(GROUP_ID_FUZZINESS)) {\nif (inclusionPatterns.contains(artifact.getGroupId())) {\nverbose(\"Including groupId: \" + artifact.getGroupId() + \" for refresh operation for project: \" + project.getId());\ndepsAfterInclusion.put(artifactEntry.getKey(), artifactEntry.getValue());\n}\n} else {\nString artifactKey = ArtifactUtils.versionlessKey(artifact);\nif (inclusionPatterns.contains(artifactKey)) {\nverbose(\"Including artifact: \" + artifactKey + \" for refresh operation for project: \" + project.getId());\ndepsAfterInclusion.put(artifactEntry.getKey(), artifactEntry.getValue());\n}\n}\n}\nif (depsAfterInclusion.isEmpty()) {\ngetLog().info(\"Nothing to include for project: \" + project.getId() + \". Ending purge.\");\nreturn;\n}\nartifactMap = depsAfterInclusion;\n}\nif (!exclusionPatterns.isEmpty()) {\nfor (String excludedKey : exclusionPatterns) {\nif (resolutionFuzziness.equals(GROUP_ID_FUZZINESS)) {\nverbose(\"Excluding groupId: \" + excludedKey + \" from refresh operation for project: \" + project.getId());\nfor (Iterator<Map.Entry<String, Artifact>> artifactIter = artifactMap.entrySet().iterator(); artifactIter.hasNext(); ) {\nMap.Entry<String, Artifact> artifactEntry = artifactIter.next();\nArtifact artifact = artifactEntry.getValue();\nif (artifact.getGroupId().equals(excludedKey)) {\nartifactIter.remove();\n}\n}\n} else {\nverbose(\"Excluding: \" + excludedKey + \" from refresh operation for project: \" + project.getId());\nartifactMap.remove(excludedKey);\n}\n}\n}\nverbose(\"Processing dependencies for project: \" + project.getId());\nList<Artifact> missingArtifacts = new ArrayList<Artifact>();\nfor (Map.Entry<String, Artifact> entry : artifactMap.entrySet()) {\nArtifact artifact = entry.getValue();\nverbose(\"Processing artifact: \" + artifact.getId());\nFile deleteTarget = findDeleteTarget(artifact);\nverbose(\"Deleting: \" + deleteTarget);\nif (deleteTarget.isDirectory()) {\ntry {\nFileUtils.deleteDirectory(deleteTarget);\n} catch (IOException e) {\nthrow new MojoFailureException(this, \"Cannot delete dependency from the local repository: \" + artifact.getId(), \"Failed to delete: \" + deleteTarget);\n}\n} else {\ndeleteTarget.delete();\n}\nif (reResolve) {\nverbose(\"Re-resolving.\");\nartifact.setResolved(false);\ntry {\nresolver.resolveAlways(artifact, project.getRemoteArtifactRepositories(), localRepository);\n} catch (ArtifactResolutionException e) {\ngetLog().debug(e.getMessage());\nmissingArtifacts.add(artifact);\n} catch (ArtifactNotFoundException e) {\ngetLog().debug(e.getMessage());\nmissingArtifacts.add(artifact);\n}\n}\n}\nif (missingArtifacts.size() > 0) {\nString message = \"required artifacts missing:\\n\";\nfor (Artifact missingArtifact : missingArtifacts) {\nmessage += \"  \" + missingArtifact.getId() + \"\\n\";\n}\nmessage += \"\\nfor the artifact:\";\nthrow new ArtifactResolutionException(message, project.getArtifact(), project.getRemoteArtifactRepositories());\n}\n}"
}