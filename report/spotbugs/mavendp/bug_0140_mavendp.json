{
    "category": "BAD_PRACTICE",
    "vtype": "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE",
    "priority": "2",
    "rank": "16",
    "project": "mavendp",
    "warning_line": "location.mkdirs();\n",
    "warning_method": "protected void unpack(Artifact artifact, File location, String includes, String excludes) throws MojoExecutionException {\nFile file = artifact.getFile();\ntry {\nlogUnpack(file, location, includes, excludes);\nlocation.mkdirs();\nif (file.isDirectory()) {\n// usual case is a future jar packaging, but there are special cases: classifier and other packaging\nthrow new MojoExecutionException(\"Artifact has not been packaged yet. When used on reactor artifact, \" + \"unpack should be executed after packaging: see MDEP-98.\");\n}\nUnArchiver unArchiver;\ntry {\nunArchiver = archiverManager.getUnArchiver(artifact.getType());\ngetLog().debug(\"Found unArchiver by type: \" + unArchiver);\n} catch (NoSuchArchiverException e) {\nunArchiver = archiverManager.getUnArchiver(file);\ngetLog().debug(\"Found unArchiver by extension: \" + unArchiver);\n}\nunArchiver.setUseJvmChmod(useJvmChmod);\nunArchiver.setIgnorePermissions(ignorePermissions);\nunArchiver.setSourceFile(file);\nunArchiver.setDestDirectory(location);\nif (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {\nIncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };\nif (StringUtils.isNotEmpty(excludes)) {\nselectors[0].setExcludes(excludes.split(\",\"));\n}\nif (StringUtils.isNotEmpty(includes)) {\nselectors[0].setIncludes(includes.split(\",\"));\n}\nunArchiver.setFileSelectors(selectors);\n}\nif (this.silent) {\nsilenceUnarchiver(unArchiver);\n}\nunArchiver.extract();\n} catch (NoSuchArchiverException e) {\nthrow new MojoExecutionException(\"Unknown archiver type\", e);\n} catch (ArchiverException e) {\nthrow new MojoExecutionException(\"Error unpacking file: \" + file + \" to: \" + location + \"\\r\\n\" + e.toString(), e);\n}\n}"
}