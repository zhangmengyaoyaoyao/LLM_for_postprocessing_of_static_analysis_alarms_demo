{
    "category": "PERFORMANCE",
    "vtype": "UPM_UNCALLED_PRIVATE_METHOD",
    "priority": "3",
    "rank": "20",
    "project": "mavendp",
    "warning_line": "if ( dependencyManagement != null && dependencyManagement.getDependencies() != null )\n{\nmap = new HashMap();\nfor ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )\n{\nDependency d = (Dependency) i.next();\ntry\n{\nVersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\nArtifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),\nversionRange, d.getType(), d\n.getClassifier(), d.getScope(), d\n.isOptional() );\nmap.put( d.getManagementKey(), artifact );\n}\ncatch ( InvalidVersionSpecificationException e )\n{\nthrow new MojoExecutionException( \"Unable to parse version\", e );\n}\n}\n}\nelse\n{\nmap = Collections.EMPTY_MAP;\n}\nreturn map;\n",
    "warning_method": "private Map createManagedVersionMap(ArtifactFactory artifactFactory, String projectId, DependencyManagement dependencyManagement) throws MojoExecutionException {\nMap map;\nif (dependencyManagement != null && dependencyManagement.getDependencies() != null) {\nmap = new HashMap();\nfor (Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); ) {\nDependency d = (Dependency) i.next();\ntry {\nVersionRange versionRange = VersionRange.createFromVersionSpec(d.getVersion());\nArtifact artifact = artifactFactory.createDependencyArtifact(d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional());\nmap.put(d.getManagementKey(), artifact);\n} catch (InvalidVersionSpecificationException e) {\nthrow new MojoExecutionException(\"Unable to parse version\", e);\n}\n}\n} else {\nmap = Collections.EMPTY_MAP;\n}\nreturn map;\n}"
}