{
    "category": "DODGY_CODE",
    "vtype": "UC_USELESS_CONDITION",
    "priority": "1",
    "rank": "14",
    "project": "mavendp",
    "warning_line": "if ( tokens.length < 3 && tokens.length > 5 )\n",
    "warning_method": "public void execute() throws MojoExecutionException, MojoFailureException {\nif (artifactId == null && artifact == null) {\nthrow new MojoFailureException(\"You must specify an artifact, \" + \"e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0\");\n}\nif (artifactId == null) {\nString[] tokens = StringUtils.split(artifact, \":\");\nif (tokens.length < 3 && tokens.length > 5) {\nthrow new MojoFailureException(\"Invalid artifact, you must specify groupId:artifactId:version[:packaging][:classifier] \" + artifact);\n}\ngroupId = tokens[0];\nartifactId = tokens[1];\nversion = tokens[2];\nif (tokens.length >= 4) {\npackaging = tokens[3];\n}\nif (tokens.length == 5) {\nclassifier = tokens[4];\n} else {\nclassifier = null;\n}\n}\nArtifact toDownload = classifier == null ? artifactFactory.createBuildArtifact(groupId, artifactId, version, packaging) : artifactFactory.createArtifactWithClassifier(groupId, artifactId, version, packaging, classifier);\nArtifact dummyOriginatingArtifact = artifactFactory.createBuildArtifact(\"org.apache.maven.plugins\", \"maven-downloader-plugin\", \"1.0\", \"jar\");\nArtifactRepositoryPolicy always = new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\nArtifactRepository remoteRepo = artifactRepositoryFactory.createArtifactRepository(repositoryId, repositoryUrl, repositoryLayout, always, always);\nif (pomRemoteRepositories == null) {\npomRemoteRepositories = new ArrayList();\n}\nList repoList = new ArrayList(pomRemoteRepositories);\nif (remoteRepositories != null) {\n// TODO: remote repositories as Strings?\nrepoList.addAll(Arrays.asList(StringUtils.split(remoteRepositories, \",\")));\n}\nrepoList.add(remoteRepo);\ntry {\nif (transitive) {\nartifactResolver.resolveTransitively(Collections.singleton(toDownload), dummyOriginatingArtifact, repoList, localRepository, source);\n} else {\nartifactResolver.resolve(toDownload, repoList, localRepository);\n}\n} catch (AbstractArtifactResolutionException e) {\nthrow new MojoExecutionException(\"Couldn't download artifact: \" + e.getMessage(), e);\n}\n}"
}