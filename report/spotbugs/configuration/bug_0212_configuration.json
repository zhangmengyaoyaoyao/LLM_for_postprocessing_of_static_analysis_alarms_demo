{
    "category": "BAD_PRACTICE",
    "vtype": "SE_NO_SERIALVERSIONID",
    "priority": "3",
    "rank": "19",
    "project": "configuration",
    "warning_line": "private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()\n{\n@Override\nprotected synchronized Boolean initialValue()\n{\nreturn Boolean.FALSE;\n}\n};\nprivate final ConcurrentMap<String, CombinedConfiguration> configs =\nnew ConcurrentHashMap<String, CombinedConfiguration>();\nprivate List<ConfigData> configurations = new ArrayList<ConfigData>();\nprivate Map<String, AbstractConfiguration> namedConfigurations =\nnew HashMap<String, AbstractConfiguration>();\nprivate String keyPattern;\nprivate NodeCombiner nodeCombiner;\nprivate String loggerName = DynamicCombinedConfiguration.class.getName();\nprivate StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());\npublic DynamicCombinedConfiguration(NodeCombiner comb)\n{\nsuper();\nsetNodeCombiner(comb);\nsetIgnoreReloadExceptions(false);\nsetLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));\n}\npublic DynamicCombinedConfiguration()\n{\nsuper();\nsetIgnoreReloadExceptions(false);\nsetLogger(LogFactory.getLog(DynamicCombinedConfiguration.class));\n}\npublic void setKeyPattern(String pattern)\n{\nthis.keyPattern = pattern;\n}\npublic String getKeyPattern()\n{\nreturn this.keyPattern;\n}\npublic void setLoggerName(String name)\n{\nthis.loggerName = name;\n}\n@Override\npublic NodeCombiner getNodeCombiner()\n{\nreturn nodeCombiner;\n}\n@Override\npublic void setNodeCombiner(NodeCombiner nodeCombiner)\n{\nif (nodeCombiner == null)\n{\nthrow new IllegalArgumentException(\n\"Node combiner must not be null!\");\n}\nthis.nodeCombiner = nodeCombiner;\ninvalidateAll();\n}\n@Override\npublic void addConfiguration(AbstractConfiguration config, String name,\nString at)\n{\nConfigData cd = new ConfigData(config, name, at);\nconfigurations.add(cd);\nif (name != null)\n{\nnamedConfigurations.put(name, config);\n}\n}\n@Override\npublic int getNumberOfConfigurations()\n{\nreturn configurations.size();\n}\n@Override\npublic Configuration getConfiguration(int index)\n{\nConfigData cd = configurations.get(index);\nreturn cd.getConfiguration();\n}\n@Override\npublic Configuration getConfiguration(String name)\n{\nreturn namedConfigurations.get(name);\n}\n@Override\npublic Set<String> getConfigurationNames()\n{\nreturn namedConfigurations.keySet();\n}\n@Override\npublic Configuration removeConfiguration(String name)\n{\nConfiguration conf = getConfiguration(name);\nif (conf != null)\n{\nremoveConfiguration(conf);\n}\nreturn conf;\n}\n@Override\npublic boolean removeConfiguration(Configuration config)\n{\nfor (int index = 0; index < getNumberOfConfigurations(); index++)\n{\nif (configurations.get(index).getConfiguration() == config)\n{\nremoveConfigurationAt(index);\n}\n}\nreturn super.removeConfiguration(config);\n}\n@Override\npublic Configuration removeConfigurationAt(int index)\n{\nConfigData cd = configurations.remove(index);\nif (cd.getName() != null)\n{\nnamedConfigurations.remove(cd.getName());\n}\nreturn super.removeConfigurationAt(index);\n}\n@Override\npublic ConfigurationNode getRootNode()\n{\nreturn getCurrentConfig().getRootNode();\n}\n@Override\npublic void setRootNode(ConfigurationNode rootNode)\n{\nif (configs != null)\n{\nthis.getCurrentConfig().setRootNode(rootNode);\n}\nelse\n{\nsuper.setRootNode(rootNode);\n}\n}\n@Override\npublic void addProperty(String key, Object value)\n{\nthis.getCurrentConfig().addProperty(key, value);\n}\n@Override\npublic void clear()\n{\nif (configs != null)\n{\nthis.getCurrentConfig().clear();\n}\n}\n@Override\npublic void clearProperty(String key)\n{\nthis.getCurrentConfig().clearProperty(key);\n}\n@Override\npublic boolean containsKey(String key)\n{\nreturn this.getCurrentConfig().containsKey(key);\n}\n@Override\npublic BigDecimal getBigDecimal(String key, BigDecimal defaultValue)\n{\nreturn this.getCurrentConfig().getBigDecimal(key, defaultValue);\n}\n@Override\npublic BigDecimal getBigDecimal(String key)\n{\nreturn this.getCurrentConfig().getBigDecimal(key);\n}\n@Override\npublic BigInteger getBigInteger(String key, BigInteger defaultValue)\n{\nreturn this.getCurrentConfig().getBigInteger(key, defaultValue);\n}\n@Override\npublic BigInteger getBigInteger(String key)\n{\nreturn this.getCurrentConfig().getBigInteger(key);\n}\n@Override\npublic boolean getBoolean(String key, boolean defaultValue)\n{\nreturn this.getCurrentConfig().getBoolean(key, defaultValue);\n}\n@Override\npublic Boolean getBoolean(String key, Boolean defaultValue)\n{\nreturn this.getCurrentConfig().getBoolean(key, defaultValue);\n}\n@Override\npublic boolean getBoolean(String key)\n{\nreturn this.getCurrentConfig().getBoolean(key);\n}\n@Override\npublic byte getByte(String key, byte defaultValue)\n{\nreturn this.getCurrentConfig().getByte(key, defaultValue);\n}\n@Override\npublic Byte getByte(String key, Byte defaultValue)\n{\nreturn this.getCurrentConfig().getByte(key, defaultValue);\n}\n@Override\npublic byte getByte(String key)\n{\nreturn this.getCurrentConfig().getByte(key);\n}\n@Override\npublic double getDouble(String key, double defaultValue)\n{\nreturn this.getCurrentConfig().getDouble(key, defaultValue);\n}\n@Override\npublic Double getDouble(String key, Double defaultValue)\n{\nreturn this.getCurrentConfig().getDouble(key, defaultValue);\n}\n@Override\npublic double getDouble(String key)\n{\nreturn this.getCurrentConfig().getDouble(key);\n}\n@Override\npublic float getFloat(String key, float defaultValue)\n{\nreturn this.getCurrentConfig().getFloat(key, defaultValue);\n}\n@Override\npublic Float getFloat(String key, Float defaultValue)\n{\nreturn this.getCurrentConfig().getFloat(key, defaultValue);\n}\n@Override\npublic float getFloat(String key)\n{\nreturn this.getCurrentConfig().getFloat(key);\n}\n@Override\npublic int getInt(String key, int defaultValue)\n{\nreturn this.getCurrentConfig().getInt(key, defaultValue);\n}\n@Override\npublic int getInt(String key)\n{\nreturn this.getCurrentConfig().getInt(key);\n}\n@Override\npublic Integer getInteger(String key, Integer defaultValue)\n{\nreturn this.getCurrentConfig().getInteger(key, defaultValue);\n}\n@Override\npublic Iterator<String> getKeys()\n{\nreturn this.getCurrentConfig().getKeys();\n}\n@Override\npublic Iterator<String> getKeys(String prefix)\n{\nreturn this.getCurrentConfig().getKeys(prefix);\n}\n@Override\npublic List<Object> getList(String key, List<?> defaultValue)\n{\nreturn this.getCurrentConfig().getList(key, defaultValue);\n}\n@Override\npublic List<Object> getList(String key)\n{\nreturn this.getCurrentConfig().getList(key);\n}\n@Override\npublic long getLong(String key, long defaultValue)\n{\nreturn this.getCurrentConfig().getLong(key, defaultValue);\n}\n@Override\npublic Long getLong(String key, Long defaultValue)\n{\nreturn this.getCurrentConfig().getLong(key, defaultValue);\n}\n@Override\npublic long getLong(String key)\n{\nreturn this.getCurrentConfig().getLong(key);\n}\n@Override\npublic Properties getProperties(String key)\n{\nreturn this.getCurrentConfig().getProperties(key);\n}\n@Override\npublic Object getProperty(String key)\n{\nreturn this.getCurrentConfig().getProperty(key);\n}\n@Override\npublic short getShort(String key, short defaultValue)\n{\nreturn this.getCurrentConfig().getShort(key, defaultValue);\n}\n@Override\npublic Short getShort(String key, Short defaultValue)\n{\nreturn this.getCurrentConfig().getShort(key, defaultValue);\n}\n@Override\npublic short getShort(String key)\n{\nreturn this.getCurrentConfig().getShort(key);\n}\n@Override\npublic String getString(String key, String defaultValue)\n{\nreturn this.getCurrentConfig().getString(key, defaultValue);\n}\n@Override\npublic String getString(String key)\n{\nreturn this.getCurrentConfig().getString(key);\n}\n@Override\npublic String[] getStringArray(String key)\n{\nreturn this.getCurrentConfig().getStringArray(key);\n}\n@Override\npublic boolean isEmpty()\n{\nreturn this.getCurrentConfig().isEmpty();\n}\n@Override\npublic void setProperty(String key, Object value)\n{\nif (configs != null)\n{\nthis.getCurrentConfig().setProperty(key, value);\n}\n}\n@Override\npublic Configuration subset(String prefix)\n{\nreturn this.getCurrentConfig().subset(prefix);\n}\n@Override\npublic Node getRoot()\n{\nreturn this.getCurrentConfig().getRoot();\n}\n@Override\npublic void setRoot(Node node)\n{\nif (configs != null)\n{\nthis.getCurrentConfig().setRoot(node);\n}\nelse\n{\nsuper.setRoot(node);\n}\n}\n@Override\npublic ExpressionEngine getExpressionEngine()\n{\nreturn super.getExpressionEngine();\n}\n@Override\npublic void setExpressionEngine(ExpressionEngine expressionEngine)\n{\nsuper.setExpressionEngine(expressionEngine);\n}\n@Override\npublic void addNodes(String key, Collection<? extends ConfigurationNode> nodes)\n{\nthis.getCurrentConfig().addNodes(key, nodes);\n}\n@Override\npublic SubnodeConfiguration configurationAt(String key, boolean supportUpdates)\n{\nreturn this.getCurrentConfig().configurationAt(key, supportUpdates);\n}\n@Override\npublic SubnodeConfiguration configurationAt(String key)\n{\nreturn this.getCurrentConfig().configurationAt(key);\n}\n@Override\npublic List<HierarchicalConfiguration> configurationsAt(String key)\n{\nreturn this.getCurrentConfig().configurationsAt(key);\n}\n@Override\npublic void clearTree(String key)\n{\nthis.getCurrentConfig().clearTree(key);\n}\n@Override\npublic int getMaxIndex(String key)\n{\nreturn this.getCurrentConfig().getMaxIndex(key);\n}\n@Override\npublic Configuration interpolatedConfiguration()\n{\nreturn this.getCurrentConfig().interpolatedConfiguration();\n}\n@Override\npublic Configuration getSource(String key)\n{\nif (key == null)\n{\nthrow new IllegalArgumentException(\"Key must not be null!\");\n}\nreturn getCurrentConfig().getSource(key);\n}\n@Override\npublic void addConfigurationListener(ConfigurationListener l)\n{\nsuper.addConfigurationListener(l);\nfor (CombinedConfiguration cc : configs.values())\n{\ncc.addConfigurationListener(l);\n}\n}\n@Override\npublic boolean removeConfigurationListener(ConfigurationListener l)\n{\nfor (CombinedConfiguration cc : configs.values())\n{\ncc.removeConfigurationListener(l);\n}\nreturn super.removeConfigurationListener(l);\n}\n@Override\npublic Collection<ConfigurationListener> getConfigurationListeners()\n{\nreturn super.getConfigurationListeners();\n}\n@Override\npublic void clearConfigurationListeners()\n{\nfor (CombinedConfiguration cc : configs.values())\n{\ncc.clearConfigurationListeners();\n}\nsuper.clearConfigurationListeners();\n}\n@Override\npublic void addErrorListener(ConfigurationErrorListener l)\n{\nfor (CombinedConfiguration cc : configs.values())\n{\ncc.addErrorListener(l);\n}\nsuper.addErrorListener(l);\n}\n@Override\npublic boolean removeErrorListener(ConfigurationErrorListener l)\n{\nfor (CombinedConfiguration cc : configs.values())\n{\ncc.removeErrorListener(l);\n}\nreturn super.removeErrorListener(l);\n}\n@Override\npublic void clearErrorListeners()\n{\nfor (CombinedConfiguration cc : configs.values())\n{\ncc.clearErrorListeners();\n}\nsuper.clearErrorListeners();\n}\n@Override\npublic Collection<ConfigurationErrorListener> getErrorListeners()\n{\nreturn super.getErrorListeners();\n}\n@Override\npublic Object clone()\n{\nreturn super.clone();\n}\n@Override\npublic void invalidate()\n{\ngetCurrentConfig().invalidate();\n}\npublic void invalidateAll()\n{\nif (configs == null)\n{\nreturn;\n}\nfor (CombinedConfiguration cc : configs.values())\n{\ncc.invalidate();\n}\n}\n@Override\nprotected Object resolveContainerStore(String key)\n{\nif (recursive.get().booleanValue())\n{\nreturn null;\n}\nrecursive.set(Boolean.TRUE);\ntry\n{\nreturn super.resolveContainerStore(key);\n}\nfinally\n{\nrecursive.set(Boolean.FALSE);\n}\n}\nprivate CombinedConfiguration getCurrentConfig()\n{\nString key = localSubst.replace(keyPattern);\nCombinedConfiguration config = configs.get(key);\nif (config == null)\n{\nsynchronized (configs)\n{\nconfig = configs.get(key);\nif (config == null)\n{\nconfig = new CombinedConfiguration(getNodeCombiner());\nif (loggerName != null)\n{\nLog log = LogFactory.getLog(loggerName);\nif (log != null)\n{\nconfig.setLogger(log);\n}\n}\nconfig.setIgnoreReloadExceptions(isIgnoreReloadExceptions());\nconfig.setExpressionEngine(this.getExpressionEngine());\nconfig.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\nconfig.setConversionExpressionEngine(getConversionExpressionEngine());\nconfig.setListDelimiter(getListDelimiter());\nfor (ConfigurationErrorListener listener : getErrorListeners())\n{\nconfig.addErrorListener(listener);\n}\nfor (ConfigurationListener listener : getConfigurationListeners())\n{\nconfig.addConfigurationListener(listener);\n}\nconfig.setForceReloadCheck(isForceReloadCheck());\nfor (ConfigData data : configurations)\n{\nconfig.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());\n}\nconfigs.put(key, config);\n}\n}\n}\nif (getLogger().isDebugEnabled())\n{\ngetLogger().debug(\"Returning config for \" + key + \": \" + config);\n}\nreturn config;\n",
    "warning_method": "private CombinedConfiguration getCurrentConfig() {\nString key = localSubst.replace(keyPattern);\nCombinedConfiguration config = configs.get(key);\nif (config == null) {\nsynchronized (configs) {\nconfig = configs.get(key);\nif (config == null) {\nconfig = new CombinedConfiguration(getNodeCombiner());\nif (loggerName != null) {\nLog log = LogFactory.getLog(loggerName);\nif (log != null) {\nconfig.setLogger(log);\n}\n}\nconfig.setIgnoreReloadExceptions(isIgnoreReloadExceptions());\nconfig.setExpressionEngine(this.getExpressionEngine());\nconfig.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\nconfig.setConversionExpressionEngine(getConversionExpressionEngine());\nconfig.setListDelimiter(getListDelimiter());\nfor (ConfigurationErrorListener listener : getErrorListeners()) {\nconfig.addErrorListener(listener);\n}\nfor (ConfigurationListener listener : getConfigurationListeners()) {\nconfig.addConfigurationListener(listener);\n}\nconfig.setForceReloadCheck(isForceReloadCheck());\nfor (ConfigData data : configurations) {\nconfig.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());\n}\nconfigs.put(key, config);\n}\n}\n}\nif (getLogger().isDebugEnabled()) {\ngetLogger().debug(\"Returning config for \" + key + \": \" + config);\n}\nreturn config;\n}"
}