{
    "category": "BAD_PRACTICE",
    "vtype": "SE_NO_SERIALVERSIONID",
    "priority": "3",
    "rank": "19",
    "project": "configuration",
    "warning_line": "public static final EventType<Event> ANY =\nnew EventType<Event>(null, \"ANY\");\nprivate static final String FMT_PROPERTY = \" %s=%s\";\nprivate static final int BUF_SIZE = 256;\nprivate final EventType<? extends Event> eventType;\npublic Event(Object source, EventType<? extends Event> evType)\n{\nsuper(source);\nif (evType == null)\n{\nthrow new IllegalArgumentException(\"Event type must not be null!\");\n}\neventType = evType;\n}\npublic EventType<? extends Event> getEventType()\n{\nreturn eventType;\n}\n@Override\npublic String toString()\n{\nStringBuilder buf = new StringBuilder(BUF_SIZE);\nbuf.append(getClass().getSimpleName());\nbuf.append(\" [\");\nappendPropertyRepresentation(buf, \"source\", getSource());\nappendPropertyRepresentation(buf, \"eventType\", getEventType());\nbuf.append(\" ]\");\nreturn buf.toString();\n}\nprotected void appendPropertyRepresentation(StringBuilder buf,\nString property, Object value)\n{\nbuf.append(String.format(FMT_PROPERTY, property, String.valueOf(value)));\n}\n",
    "warning_method": "private final EventType<? extends Event> eventType;"
}