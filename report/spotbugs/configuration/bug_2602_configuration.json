{
    "category": "DODGY_CODE",
    "vtype": "BC_UNCONFIRMED_CAST",
    "priority": "3",
    "rank": "20",
    "project": "configuration",
    "warning_line": "ConfigurationDeclaration decl = (ConfigurationDeclaration) data;\n",
    "warning_method": "public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {\nConfigurationDeclaration decl = (ConfigurationDeclaration) data;\nString tagName = decl.getNode().getName();\nConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);\nif (provider == null) {\nthrow new ConfigurationRuntimeException(\"No ConfigurationProvider registered for tag \" + tagName);\n}\ntry {\nAbstractConfiguration config = provider.getConfiguration(decl);\ninstallInterpolator(decl, config);\nreturn config;\n} catch (Exception ex) {\nif (!decl.isOptional()) {\nthrow ex;\n} else {\nif (logger.isDebugEnabled()) {\nlogger.debug(\"Load failed for optional configuration \" + tagName + \": \" + ex.getMessage());\n}\ndecl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);\nif (decl.isForceCreate()) {\ntry {\nreturn provider.getEmptyConfiguration(decl);\n} catch (Exception ex2) {\nlogger.warn(\"Could not create instance of optional configuration \" + tagName, ex2);\n}\n}\nreturn null;\n}\n}\n}"
}