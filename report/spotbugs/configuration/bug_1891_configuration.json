{
    "category": "BAD_PRACTICE",
    "vtype": "SE_NO_SERIALVERSIONID",
    "priority": "3",
    "rank": "19",
    "project": "configuration",
    "warning_line": "private static ThreadLocal recursive = new ThreadLocal()\n{\nprotected synchronized Object initialValue()\n{\nreturn Boolean.FALSE;\n}\n};\nprivate final AbstractHierarchicalFileConfiguration config;\nprivate final String path;\nprivate final boolean trailing;\nprivate boolean init;\npublic PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)\n{\nthis.config = config;\nthis.path = path;\nthis.trailing = path.endsWith(\"/\");\nthis.init = true;\n}\npublic void addProperty(String key, Object value)\n{\nconfig.addProperty(makePath(key), value);\n}\npublic void clear()\n{\ngetConfig().clear();\n}\npublic void clearProperty(String key)\n{\nconfig.clearProperty(makePath(key));\n}\npublic boolean containsKey(String key)\n{\nreturn config.containsKey(makePath(key));\n}\npublic BigDecimal getBigDecimal(String key, BigDecimal defaultValue)\n{\nreturn config.getBigDecimal(makePath(key), defaultValue);\n}\npublic BigDecimal getBigDecimal(String key)\n{\nreturn config.getBigDecimal(makePath(key));\n}\npublic BigInteger getBigInteger(String key, BigInteger defaultValue)\n{\nreturn config.getBigInteger(makePath(key), defaultValue);\n}\npublic BigInteger getBigInteger(String key)\n{\nreturn config.getBigInteger(makePath(key));\n}\npublic boolean getBoolean(String key, boolean defaultValue)\n{\nreturn config.getBoolean(makePath(key), defaultValue);\n}\npublic Boolean getBoolean(String key, Boolean defaultValue)\n{\nreturn config.getBoolean(makePath(key), defaultValue);\n}\npublic boolean getBoolean(String key)\n{\nreturn config.getBoolean(makePath(key));\n}\npublic byte getByte(String key, byte defaultValue)\n{\nreturn config.getByte(makePath(key), defaultValue);\n}\npublic Byte getByte(String key, Byte defaultValue)\n{\nreturn config.getByte(makePath(key), defaultValue);\n}\npublic byte getByte(String key)\n{\nreturn config.getByte(makePath(key));\n}\npublic double getDouble(String key, double defaultValue)\n{\nreturn config.getDouble(makePath(key), defaultValue);\n}\npublic Double getDouble(String key, Double defaultValue)\n{\nreturn config.getDouble(makePath(key), defaultValue);\n}\npublic double getDouble(String key)\n{\nreturn config.getDouble(makePath(key));\n}\npublic float getFloat(String key, float defaultValue)\n{\nreturn config.getFloat(makePath(key), defaultValue);\n}\npublic Float getFloat(String key, Float defaultValue)\n{\nreturn config.getFloat(makePath(key), defaultValue);\n}\npublic float getFloat(String key)\n{\nreturn config.getFloat(makePath(key));\n}\npublic int getInt(String key, int defaultValue)\n{\nreturn config.getInt(makePath(key), defaultValue);\n}\npublic int getInt(String key)\n{\nreturn config.getInt(makePath(key));\n}\npublic Integer getInteger(String key, Integer defaultValue)\n{\nreturn config.getInteger(makePath(key), defaultValue);\n}\npublic Iterator getKeys()\n{\nreturn config.getKeys(makePath());\n}\npublic Iterator getKeys(String prefix)\n{\nreturn config.getKeys(makePath(prefix));\n}\npublic List getList(String key, List defaultValue)\n{\nreturn config.getList(makePath(key), defaultValue);\n}\npublic List getList(String key)\n{\nreturn config.getList(makePath(key));\n}\npublic long getLong(String key, long defaultValue)\n{\nreturn config.getLong(makePath(key), defaultValue);\n}\npublic Long getLong(String key, Long defaultValue)\n{\nreturn config.getLong(makePath(key), defaultValue);\n}\npublic long getLong(String key)\n{\nreturn config.getLong(makePath(key));\n}\npublic Properties getProperties(String key)\n{\nreturn config.getProperties(makePath(key));\n}\npublic Object getProperty(String key)\n{\nreturn config.getProperty(makePath(key));\n}\npublic short getShort(String key, short defaultValue)\n{\nreturn config.getShort(makePath(key), defaultValue);\n}\npublic Short getShort(String key, Short defaultValue)\n{\nreturn config.getShort(makePath(key), defaultValue);\n}\npublic short getShort(String key)\n{\nreturn config.getShort(makePath(key));\n}\npublic String getString(String key, String defaultValue)\n{\nreturn config.getString(makePath(key), defaultValue);\n}\npublic String getString(String key)\n{\nreturn config.getString(makePath(key));\n}\npublic String[] getStringArray(String key)\n{\nreturn config.getStringArray(makePath(key));\n}\npublic boolean isEmpty()\n{\nreturn getConfig().isEmpty();\n}\npublic void setProperty(String key, Object value)\n{\ngetConfig().setProperty(key, value);\n}\npublic Configuration subset(String prefix)\n{\nreturn getConfig().subset(prefix);\n}\npublic Node getRoot()\n{\nreturn getConfig().getRoot();\n}\npublic void setRoot(Node node)\n{\nif (init)\n{\ngetConfig().setRoot(node);\n}\nelse\n{\nsuper.setRoot(node);\n}\n}\npublic ConfigurationNode getRootNode()\n{\nreturn getConfig().getRootNode();\n}\npublic void setRootNode(ConfigurationNode rootNode)\n{\nif (init)\n{\ngetConfig().setRootNode(rootNode);\n}\nelse\n{\nsuper.setRootNode(rootNode);\n}\n}\npublic ExpressionEngine getExpressionEngine()\n{\nreturn config.getExpressionEngine();\n}\npublic void setExpressionEngine(ExpressionEngine expressionEngine)\n{\nif (init)\n{\nconfig.setExpressionEngine(expressionEngine);\n}\nelse\n{\nsuper.setExpressionEngine(expressionEngine);\n}\n}\npublic void addNodes(String key, Collection nodes)\n{\ngetConfig().addNodes(key, nodes);\n}\npublic SubnodeConfiguration configurationAt(String key, boolean supportUpdates)\n{\nreturn config.configurationAt(makePath(key), supportUpdates);\n}\npublic SubnodeConfiguration configurationAt(String key)\n{\nreturn config.configurationAt(makePath(key));\n}\npublic List configurationsAt(String key)\n{\nreturn config.configurationsAt(makePath(key));\n}\npublic void clearTree(String key)\n{\nconfig.clearTree(makePath(key));\n}\npublic int getMaxIndex(String key)\n{\nreturn config.getMaxIndex(makePath(key));\n}\npublic Configuration interpolatedConfiguration()\n{\nreturn getConfig().interpolatedConfiguration();\n}\npublic void addConfigurationListener(ConfigurationListener l)\n{\ngetConfig().addConfigurationListener(l);\n}\npublic boolean removeConfigurationListener(ConfigurationListener l)\n{\nreturn getConfig().removeConfigurationListener(l);\n}\npublic Collection getConfigurationListeners()\n{\nreturn getConfig().getConfigurationListeners();\n}\npublic void clearConfigurationListeners()\n{\ngetConfig().clearConfigurationListeners();\n}\npublic void addErrorListener(ConfigurationErrorListener l)\n{\ngetConfig().addErrorListener(l);\n}\npublic boolean removeErrorListener(ConfigurationErrorListener l)\n{\nreturn getConfig().removeErrorListener(l);\n}\npublic void clearErrorListeners()\n{\ngetConfig().clearErrorListeners();\n}\npublic void save(Writer writer) throws ConfigurationException\n{\nconfig.save(writer);\n}\npublic void load(Reader reader) throws ConfigurationException\n{\nconfig.load(reader);\n}\npublic Collection getErrorListeners()\n{\nreturn getConfig().getErrorListeners();\n}\nprotected Object resolveContainerStore(String key)\n{\nif (((Boolean) recursive.get()).booleanValue())\n{\nreturn null;\n}\nrecursive.set(Boolean.TRUE);\ntry\n{\nreturn super.resolveContainerStore(key);\n}\nfinally\n{\nrecursive.set(Boolean.FALSE);\n}\n}\nprivate HierarchicalConfiguration getConfig()\n{\nreturn config.configurationAt(makePath());\n}\nprivate String makePath()\n{\nString pathPattern = trailing ? path.substring(0, path.length() - 1) : path;\nreturn getSubstitutor().replace(pathPattern);\n}\nprivate String makePath(String item)\n{\nString pathPattern;\nif ((item.length() == 0 || item.startsWith(\"/\")) && trailing)\n{\npathPattern = path.substring(0, path.length() - 1);\n}\nelse  if (!item.startsWith(\"/\") || !trailing)\n{\npathPattern = path + \"/\";\n}\nelse\n{\npathPattern = path;\n}\nreturn getSubstitutor().replace(pathPattern) + item;\n",
    "warning_method": "public void setRootNode(ConfigurationNode rootNode) {\nif (init) {\ngetConfig().setRootNode(rootNode);\n} else {\nsuper.setRootNode(rootNode);\n}\n}"
}