{
    "category": "PERFORMANCE",
    "vtype": "SIC_INNER_SHOULD_BE_STATIC_ANON",
    "priority": "3",
    "rank": "20",
    "project": "configuration",
    "warning_line": "{\n@Override\npublic InputSource resolveEntity(String publicId, String systemId)\n{\nreturn new InputSource(getClass().getClassLoader()\n.getResourceAsStream(\"PropertyList-1.0.dtd\"));\n",
    "warning_method": "private void printNode(PrintWriter out, int indentLevel, ImmutableNode node) {\nString padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\nif (node.getNodeName() != null) {\nout.println(padding + \"<key>\" + StringEscapeUtils.escapeXml10(node.getNodeName()) + \"</key>\");\n}\nList<ImmutableNode> children = node.getChildren();\nif (!children.isEmpty()) {\nout.println(padding + \"<dict>\");\nIterator<ImmutableNode> it = children.iterator();\nwhile (it.hasNext()) {\nImmutableNode child = it.next();\nprintNode(out, indentLevel + 1, child);\nif (it.hasNext()) {\nout.println();\n}\n}\nout.println(padding + \"</dict>\");\n} else if (node.getValue() == null) {\nout.println(padding + \"<dict/>\");\n} else {\nObject value = node.getValue();\nprintValue(out, indentLevel, value);\n}\n}"
}