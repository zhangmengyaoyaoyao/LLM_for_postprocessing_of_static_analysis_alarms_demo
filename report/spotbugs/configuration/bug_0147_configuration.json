{
    "category": "PERFORMANCE",
    "vtype": "SIC_INNER_SHOULD_BE_STATIC_ANON",
    "priority": "3",
    "rank": "20",
    "project": "configuration",
    "warning_line": "{\n@Override\nprotected Object interpolate(Object value)\n{\nreturn parent.interpolate(value);\n}\n@Override\npublic ConfigurationInterpolator getInterpolator()\n{\nreturn parent.getInterpolator();\n",
    "warning_method": "private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {\nCollection<ImmutableNode> subNodes = new LinkedList<ImmutableNode>(refHandler.getChildren(node));\nIterator<ImmutableNode> children = subNodes.iterator();\nImmutableNode sibling1;\nImmutableNode nd = null;\nwhile (children.hasNext()) {\ndo {\nsibling1 = nd;\nnd = children.next();\n} while (refHandler.getReference(nd) != null && children.hasNext());\nif (refHandler.getReference(nd) == null) {\nList<ImmutableNode> newNodes = new LinkedList<ImmutableNode>();\nnewNodes.add(nd);\nwhile (children.hasNext()) {\nnd = children.next();\nif (refHandler.getReference(nd) == null) {\nnewNodes.add(nd);\n} else {\nbreak;\n}\n}\nImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;\nfor (ImmutableNode insertNode : newNodes) {\nif (refHandler.getReference(insertNode) == null) {\ninsert(insertNode, node, sibling1, sibling2, refHandler);\nsibling1 = insertNode;\n}\n}\n}\n}\n}"
}