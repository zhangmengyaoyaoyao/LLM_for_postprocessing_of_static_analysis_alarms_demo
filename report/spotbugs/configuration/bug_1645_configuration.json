{
    "category": "PERFORMANCE",
    "vtype": "SIC_INNER_SHOULD_BE_STATIC_ANON",
    "priority": "3",
    "rank": "20",
    "project": "configuration",
    "warning_line": "{\n@Override\npublic void load() throws ConfigurationException\n{\n}\n@Override\npublic void save() throws ConfigurationException\n{\n}\n",
    "warning_method": "private AbstractHierarchicalFileConfiguration getConfiguration() {\nif (pattern == null) {\nthrow new ConfigurationRuntimeException(\"File pattern must be defined\");\n}\nString path = localSubst.replace(pattern);\nif (configurationsMap.containsKey(path)) {\nreturn configurationsMap.get(path);\n}\nif (path.equals(pattern)) {\nXMLConfiguration configuration = new XMLConfiguration() {\n@Override\npublic void load() throws ConfigurationException {\n}\n@Override\npublic void save() throws ConfigurationException {\n}\n};\nconfigurationsMap.putIfAbsent(pattern, configuration);\nreturn configuration;\n}\nXMLConfiguration configuration = new XMLConfiguration();\nif (loggerName != null) {\nLog log = LogFactory.getLog(loggerName);\nif (log != null) {\nconfiguration.setLogger(log);\n}\n}\nconfiguration.setBasePath(getBasePath());\nconfiguration.setFileName(path);\nconfiguration.setFileSystem(getFileSystem());\nconfiguration.setExpressionEngine(getExpressionEngine());\nReloadingStrategy strategy = createReloadingStrategy();\nif (strategy != null) {\nconfiguration.setReloadingStrategy(strategy);\n}\nconfiguration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\nconfiguration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());\nconfiguration.setValidating(validating);\nconfiguration.setSchemaValidation(schemaValidation);\nconfiguration.setEntityResolver(entityResolver);\nconfiguration.setListDelimiter(getListDelimiter());\nconfiguration.addConfigurationListener(this);\nconfiguration.addErrorListener(this);\ntry {\nconfiguration.load();\n} catch (ConfigurationException ce) {\nif (isThrowable(ce)) {\nthrow new ConfigurationRuntimeException(ce);\n}\n}\nconfigurationsMap.putIfAbsent(path, configuration);\nreturn configurationsMap.get(path);\n}"
}