{
    "category": "Multithreaded correctness",
    "vtype": "JLM_JSR166_UTILCONCURRENT_MONITORENTER",
    "priority": "2",
    "rank": "8",
    "project": "configuration",
    "warning_line": "synchronized (configs)\n",
    "warning_method": "private CombinedConfiguration getCurrentConfig() {\nString key = localSubst.replace(keyPattern);\nCombinedConfiguration config = configs.get(key);\nif (config == null) {\nsynchronized (configs) {\nconfig = configs.get(key);\nif (config == null) {\nconfig = new CombinedConfiguration(getNodeCombiner());\nif (loggerName != null) {\nLog log = LogFactory.getLog(loggerName);\nif (log != null) {\nconfig.setLogger(log);\n}\n}\nconfig.setIgnoreReloadExceptions(isIgnoreReloadExceptions());\nconfig.setExpressionEngine(this.getExpressionEngine());\nconfig.setDelimiterParsingDisabled(isDelimiterParsingDisabled());\nconfig.setConversionExpressionEngine(getConversionExpressionEngine());\nconfig.setListDelimiter(getListDelimiter());\nfor (ConfigurationErrorListener listener : getErrorListeners()) {\nconfig.addErrorListener(listener);\n}\nfor (ConfigurationListener listener : getConfigurationListeners()) {\nconfig.addConfigurationListener(listener);\n}\nconfig.setForceReloadCheck(isForceReloadCheck());\nfor (ConfigData data : configurations) {\nconfig.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());\n}\nconfigs.put(key, config);\n}\n}\n}\nif (getLogger().isDebugEnabled()) {\ngetLogger().debug(\"Returning config for \" + key + \": \" + config);\n}\nreturn config;\n}"
}