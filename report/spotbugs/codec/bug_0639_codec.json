{
    "category": "DODGY_CODE",
    "vtype": "SF_SWITCH_NO_DEFAULT",
    "priority": "2",
    "rank": "19",
    "project": "codec",
    "warning_line": "switch (context.modulus) {\ncase 2 : \ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);\nbreak;\ncase 3 : \ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);\nbreak;\ncase 4 : \ncontext.lbitWorkArea = context.lbitWorkArea >> 4; \ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\nbreak;\ncase 5 : \ncontext.lbitWorkArea = context.lbitWorkArea >> 1;\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\nbreak;\ncase 6 : \ncontext.lbitWorkArea = context.lbitWorkArea >> 6;\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\nbreak;\ncase 7 : \ncontext.lbitWorkArea = context.lbitWorkArea >> 3;\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n",
    "warning_method": "@Override\nvoid decode(byte[] in, int inPos, int inAvail, Context context) {\nif (context.eof) {\nreturn;\n}\nif (inAvail < 0) {\ncontext.eof = true;\n}\nfor (int i = 0; i < inAvail; i++) {\nbyte b = in[inPos++];\nif (b == PAD) {\ncontext.eof = true;\nbreak;\n} else {\nensureBufferSize(decodeSize, context);\nif (b >= 0 && b < this.decodeTable.length) {\nint result = this.decodeTable[b];\nif (result >= 0) {\ncontext.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;\ncontext.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;\nif (context.modulus == 0) {\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);\n}\n}\n}\n}\n}\n// Two forms of EOF as far as Base32 decoder is concerned: actual\nif (context.eof && context.modulus >= 2) {\nensureBufferSize(decodeSize, context);\nswitch(context.modulus) {\ncase 2:\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);\nbreak;\ncase 3:\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);\nbreak;\ncase 4:\ncontext.lbitWorkArea = context.lbitWorkArea >> 4;\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\nbreak;\ncase 5:\ncontext.lbitWorkArea = context.lbitWorkArea >> 1;\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\nbreak;\ncase 6:\ncontext.lbitWorkArea = context.lbitWorkArea >> 6;\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\nbreak;\ncase 7:\ncontext.lbitWorkArea = context.lbitWorkArea >> 3;\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\ncontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\nbreak;\n}\n}\n}"
}