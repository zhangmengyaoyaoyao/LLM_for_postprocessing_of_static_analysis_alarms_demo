{
    "category": "DODGY_CODE",
    "vtype": "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE",
    "priority": "3",
    "rank": "20",
    "project": "codec",
    "warning_line": "if (m == null || !m.find()) {\n",
    "warning_method": "public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {\nfinal int keyLen = keyBytes.length;\nString saltString;\nif (salt == null) {\nsaltString = B64.getRandomSalt(8);\n} else {\nfinal Pattern p = Pattern.compile(\"^\" + prefix.replace(\"$\", \"\\\\$\") + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\");\nfinal Matcher m = p.matcher(salt);\nif (m == null || !m.find()) {\nthrow new IllegalArgumentException(\"Invalid salt value: \" + salt);\n}\nsaltString = m.group(1);\n}\nfinal byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);\nfinal MessageDigest ctx = DigestUtils.getMd5Digest();\nctx.update(keyBytes);\nctx.update(prefix.getBytes(Charsets.UTF_8));\nctx.update(saltBytes);\nMessageDigest ctx1 = DigestUtils.getMd5Digest();\nctx1.update(keyBytes);\nctx1.update(saltBytes);\nctx1.update(keyBytes);\nbyte[] finalb = ctx1.digest();\nint ii = keyLen;\nwhile (ii > 0) {\nctx.update(finalb, 0, ii > 16 ? 16 : ii);\nii -= 16;\n}\nArrays.fill(finalb, (byte) 0);\nii = keyLen;\nfinal int j = 0;\nwhile (ii > 0) {\nif ((ii & 1) == 1) {\nctx.update(finalb[j]);\n} else {\nctx.update(keyBytes[j]);\n}\nii >>= 1;\n}\nfinal StringBuilder passwd = new StringBuilder(prefix + saltString + \"$\");\nfinalb = ctx.digest();\nfor (int i = 0; i < ROUNDS; i++) {\nctx1 = DigestUtils.getMd5Digest();\nif ((i & 1) != 0) {\nctx1.update(keyBytes);\n} else {\nctx1.update(finalb, 0, BLOCKSIZE);\n}\nif (i % 3 != 0) {\nctx1.update(saltBytes);\n}\nif (i % 7 != 0) {\nctx1.update(keyBytes);\n}\nif ((i & 1) != 0) {\nctx1.update(finalb, 0, BLOCKSIZE);\n} else {\nctx1.update(keyBytes);\n}\nfinalb = ctx1.digest();\n}\nB64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\nB64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\nB64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\nB64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\nB64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\nB64.b64from24bit((byte) 0, (byte) 0, finalb[11], 2, passwd);\nctx.reset();\nctx1.reset();\nArrays.fill(keyBytes, (byte) 0);\nArrays.fill(saltBytes, (byte) 0);\nArrays.fill(finalb, (byte) 0);\nreturn passwd.toString();\n}"
}