{
    "category": "DODGY_CODE",
    "vtype": "SF_SWITCH_FALLTHROUGH",
    "priority": "2",
    "rank": "17",
    "project": "codec",
    "warning_line": "k1 ^= (unprocessed[2] & 0xff) << 16;\ncase 2:\nk1 ^= (unprocessed[1] & 0xff) << 8;\n",
    "warning_method": "int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {\nint result = hash;\nint k1 = 0;\nswitch(unprocessedLength) {\ncase 3:\nk1 ^= (unprocessed[2] & 0xff) << 16;\ncase 2:\nk1 ^= (unprocessed[1] & 0xff) << 8;\ncase 1:\nk1 ^= (unprocessed[0] & 0xff);\nk1 *= C1_32;\nk1 = Integer.rotateLeft(k1, R1_32);\nk1 *= C2_32;\nresult ^= k1;\n}\nresult ^= totalLen;\nreturn fmix32(result);\n}"
}