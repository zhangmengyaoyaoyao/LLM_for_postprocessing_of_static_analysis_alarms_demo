{
    "category": "DODGY_CODE",
    "vtype": "UCF_USELESS_CONTROL_FLOW",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "if (!underTest.endEvictionTest(idleObjects)) {\n",
    "warning_method": "public void evict() throws Exception {\nassertOpen();\nif (getNumIdle() == 0) {\nreturn;\n}\nboolean testWhileIdle = _testWhileIdle;\nlong idleEvictTime = Long.MAX_VALUE;\nif (getMinEvictableIdleTimeMillis() > 0) {\nidleEvictTime = getMinEvictableIdleTimeMillis();\n}\nPooledObject<T> underTest = null;\nLinkedBlockingDeque<PooledObject<T>> idleObjects = null;\nfor (int i = 0, m = getNumTests(); i < m; i++) {\nif (evictionIterator == null || !evictionIterator.hasNext()) {\nif (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {\nList<K> keyCopy = new ArrayList<K>();\nkeyCopy.addAll(poolKeyList);\nevictionKeyIterator = keyCopy.iterator();\n}\nwhile (evictionKeyIterator.hasNext()) {\nevictionKey = evictionKeyIterator.next();\nObjectDeque<T> objectDeque = poolMap.get(evictionKey);\nif (objectDeque == null) {\ncontinue;\n}\nidleObjects = objectDeque.getIdleObjects();\nif (getLifo()) {\nevictionIterator = idleObjects.descendingIterator();\n} else {\nevictionIterator = idleObjects.iterator();\n}\nif (evictionIterator.hasNext()) {\nbreak;\n}\nevictionIterator = null;\n}\n}\nif (evictionIterator == null) {\nreturn;\n}\ntry {\nunderTest = evictionIterator.next();\n} catch (NoSuchElementException nsee) {\ni--;\nevictionIterator = null;\ncontinue;\n}\nif (!underTest.startEvictionTest()) {\ni--;\ncontinue;\n}\nif (idleEvictTime < underTest.getIdleTimeMillis()) {\ndestroy(evictionKey, underTest);\n} else {\nif (testWhileIdle) {\nboolean active = false;\ntry {\n_factory.activateObject(evictionKey, underTest.getObject());\nactive = true;\n} catch (Exception e) {\ndestroy(evictionKey, underTest);\n}\nif (active) {\nif (!_factory.validateObject(evictionKey, underTest.getObject())) {\ndestroy(evictionKey, underTest);\n} else {\ntry {\n_factory.passivateObject(evictionKey, underTest.getObject());\n} catch (Exception e) {\ndestroy(evictionKey, underTest);\n}\n}\n}\n}\nif (!underTest.endEvictionTest(idleObjects)) {\n}\n}\n}\n}"
}