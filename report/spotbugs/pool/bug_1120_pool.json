{
    "category": "DODGY_CODE",
    "vtype": "UCF_USELESS_CONTROL_FLOW",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "if (!underTest.endEvictionTest(idleObjects)) {\n",
    "warning_method": "@Override\npublic void evict() throws Exception {\nassertOpen();\nif (getNumIdle() == 0) {\nreturn;\n}\nPooledObject<T> underTest = null;\nEvictionPolicy<T> evictionPolicy = getEvictionPolicy();\nsynchronized (evictionLock) {\nEvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdlePerKey());\nboolean testWhileIdle = getTestWhileIdle();\nfor (int i = 0, m = getNumTests(); i < m; i++) {\nif (evictionIterator == null || !evictionIterator.hasNext()) {\nif (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {\nList<K> keyCopy = new ArrayList<K>();\nLock readLock = keyLock.readLock();\nreadLock.lock();\ntry {\nkeyCopy.addAll(poolKeyList);\n} finally {\nreadLock.unlock();\n}\nevictionKeyIterator = keyCopy.iterator();\n}\nwhile (evictionKeyIterator.hasNext()) {\nevictionKey = evictionKeyIterator.next();\nObjectDeque<T> objectDeque = poolMap.get(evictionKey);\nif (objectDeque == null) {\ncontinue;\n}\nfinal Deque<PooledObject<T>> idleObjects = objectDeque.getIdleObjects();\nevictionIterator = new EvictionIterator(idleObjects);\nif (evictionIterator.hasNext()) {\nbreak;\n}\nevictionIterator = null;\n}\n}\nif (evictionIterator == null) {\nreturn;\n}\nfinal Deque<PooledObject<T>> idleObjects;\ntry {\nunderTest = evictionIterator.next();\nidleObjects = evictionIterator.getIdleObjects();\n} catch (NoSuchElementException nsee) {\ni--;\nevictionIterator = null;\ncontinue;\n}\nif (!underTest.startEvictionTest()) {\ni--;\ncontinue;\n}\nboolean evict;\ntry {\nevict = evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size());\n} catch (Throwable t) {\nPoolUtils.checkRethrow(t);\nswallowException(new Exception(t));\nevict = false;\n}\nif (evict) {\ndestroy(evictionKey, underTest, true);\ndestroyedByEvictorCount.incrementAndGet();\n} else {\nif (testWhileIdle) {\nboolean active = false;\ntry {\nfactory.activateObject(evictionKey, underTest);\nactive = true;\n} catch (Exception e) {\ndestroy(evictionKey, underTest, true);\ndestroyedByEvictorCount.incrementAndGet();\n}\nif (active) {\nif (!factory.validateObject(evictionKey, underTest)) {\ndestroy(evictionKey, underTest, true);\ndestroyedByEvictorCount.incrementAndGet();\n} else {\ntry {\nfactory.passivateObject(evictionKey, underTest);\n} catch (Exception e) {\ndestroy(evictionKey, underTest, true);\ndestroyedByEvictorCount.incrementAndGet();\n}\n}\n}\n}\nif (!underTest.endEvictionTest(idleObjects)) {\n}\n}\n}\n}\n}"
}