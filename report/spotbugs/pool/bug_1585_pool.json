{
    "category": "DODGY_CODE",
    "vtype": "RI_REDUNDANT_INTERFACES",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "public SoftReferenceObjectPool() {\n_pool = new ArrayList();\n_factory = null;\n}\npublic SoftReferenceObjectPool(PoolableObjectFactory factory) {\n_pool = new ArrayList();\n_factory = factory;\n}\npublic SoftReferenceObjectPool(PoolableObjectFactory factory, int initSize) throws Exception, IllegalArgumentException {\nif (factory == null) {\nthrow new IllegalArgumentException(\"factory required to prefill the pool.\");\n}\n_pool = new ArrayList(initSize);\n_factory = factory;\nPoolUtils.prefill(this, initSize);\n}\npublic synchronized Object borrowObject() throws Exception {\nassertOpen();\nObject obj = null;\nboolean newlyCreated = false;\nwhile(null == obj) {\nif(_pool.isEmpty()) {\nif(null == _factory) {\nthrow new NoSuchElementException();\n} else {\nnewlyCreated = true;\nobj = _factory.makeObject();\n}\n} else {\nSoftReference ref = (SoftReference)(_pool.remove(_pool.size() - 1));\nobj = ref.get();\nref.clear(); \n}\nif (null != _factory && null != obj) {\ntry {\n_factory.activateObject(obj);\nif (!_factory.validateObject(obj)) {\nthrow new Exception(\"ValidateObject failed\");\n}\n} catch (Throwable t) {\ntry {\n_factory.destroyObject(obj);\n} catch (Throwable t2) {\n} finally {\nobj = null;\n}\nif (newlyCreated) {\nthrow new NoSuchElementException(\n\"Could not create a validated object, cause: \" +\nt.getMessage());\n}\n}\n}\n}\n_numActive++;\nreturn obj;\n}\npublic synchronized void returnObject(Object obj) throws Exception {\nboolean success = !isClosed();\nif (_factory != null) {\nif(!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\ntry {\n_factory.passivateObject(obj);\n} catch(Exception e) {\nsuccess = false;\n}\n}\n}\nboolean shouldDestroy = !success;\n_numActive--;\nif(success) {\n_pool.add(new SoftReference(obj, refQueue));\n}\nnotifyAll(); \nif (shouldDestroy && _factory != null) {\ntry {\n_factory.destroyObject(obj);\n} catch(Exception e) {\n}\n}\n}\npublic synchronized void invalidateObject(Object obj) throws Exception {\n_numActive--;\nif (_factory != null) {\n_factory.destroyObject(obj);\n}\nnotifyAll(); \n}\npublic synchronized void addObject() throws Exception {\nassertOpen();\nif (_factory == null) {\nthrow new IllegalStateException(\"Cannot add objects without a factory.\");\n}\nObject obj = _factory.makeObject();\nboolean success = true;\nif(!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\n_factory.passivateObject(obj);\n}\nboolean shouldDestroy = !success;\nif(success) {\n_pool.add(new SoftReference(obj, refQueue));\nnotifyAll(); \n}\nif(shouldDestroy) {\ntry {\n_factory.destroyObject(obj);\n} catch(Exception e) {\n}\n}\n}\npublic synchronized int getNumIdle() {\npruneClearedReferences();\nreturn _pool.size();\n}\npublic synchronized int getNumActive() {\nreturn _numActive;\n}\npublic synchronized void clear() {\nif(null != _factory) {\nIterator iter = _pool.iterator();\nwhile(iter.hasNext()) {\ntry {\nObject obj = ((SoftReference)iter.next()).get();\nif(null != obj) {\n_factory.destroyObject(obj);\n}\n} catch(Exception e) {\n}\n}\n}\n_pool.clear();\npruneClearedReferences();\n}\npublic void close() throws Exception {\nsuper.close();\nclear();\n}\npublic synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {\nassertOpen();\nif(0 < getNumActive()) {\nthrow new IllegalStateException(\"Objects are already active\");\n} else {\nclear();\n_factory = factory;\n}\n}\nprivate void pruneClearedReferences() {\nReference ref;\nwhile ((ref = refQueue.poll()) != null) {\ntry {\n_pool.remove(ref);\n} catch (UnsupportedOperationException uoe) {\n}\n}\n}\nprivate List _pool = null;\nprivate PoolableObjectFactory _factory = null;\nprivate final ReferenceQueue refQueue = new ReferenceQueue();\nprivate int _numActive = 0;\n",
    "warning_method": "public synchronized void addObject() throws Exception {\nassertOpen();\nif (_factory == null) {\nthrow new IllegalStateException(\"Cannot add objects without a factory.\");\n}\nObject obj = _factory.makeObject();\nboolean success = true;\nif (!_factory.validateObject(obj)) {\nsuccess = false;\n} else {\n_factory.passivateObject(obj);\n}\nboolean shouldDestroy = !success;\nif (success) {\n_pool.add(new SoftReference(obj, refQueue));\nnotifyAll();\n}\nif (shouldDestroy) {\ntry {\n_factory.destroyObject(obj);\n} catch (Exception e) {\n}\n}\n}"
}