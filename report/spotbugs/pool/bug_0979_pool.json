{
    "category": "DODGY_CODE",
    "vtype": "RI_REDUNDANT_INTERFACES",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "this(null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);\n}\npublic StackKeyedObjectPool(int max) {\nthis(null,max,DEFAULT_INIT_SLEEPING_CAPACITY);\n}\npublic StackKeyedObjectPool(int max, int init) {\nthis(null,max,init);\n}\npublic StackKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory) {\nthis(factory,DEFAULT_MAX_SLEEPING);\n}\npublic StackKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int max) {\nthis(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);\n}\npublic StackKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int max, int init) {\n_factory = factory;\n_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);\n_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);\n_pools = new HashMap<K, Stack<V>>();\n_activeCount = new HashMap<K, Integer>();\n}\n@Override\npublic synchronized V borrowObject(K key) throws Exception {\nassertOpen();\nStack<V> stack = (_pools.get(key));\nif(null == stack) {\nstack = new Stack<V>();\nstack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);\n_pools.put(key,stack);\n}\nV obj = null;\ndo {\nboolean newlyMade = false;\nif (!stack.empty()) {\nobj = stack.pop();\n_totIdle--;\n} else {\nif(null == _factory) {\nthrow new NoSuchElementException(\"pools without a factory cannot create new objects as needed.\");\n} else {\nobj = _factory.makeObject(key);\nnewlyMade = true;\n}\n}\nif (null != _factory && null != obj) {\ntry {\n_factory.activateObject(key, obj);\nif (!_factory.validateObject(key, obj)) {\nthrow new Exception(\"ValidateObject failed\");\n}\n} catch (Throwable t) {\nPoolUtils.checkRethrow(t);\ntry {\n_factory.destroyObject(key,obj);\n} catch (Throwable t2) {\nPoolUtils.checkRethrow(t2);\n} finally {\nobj = null;\n}\nif (newlyMade) {\nthrow new NoSuchElementException(\n\"Could not create a validated object, cause: \" +\nt.getMessage());\n}\n}\n}\n} while (obj == null);\nincrementActiveCount(key);\nreturn obj;\n}\n@Override\npublic synchronized void returnObject(K key, V obj) throws Exception {\ndecrementActiveCount(key);\nif (null != _factory) {\nif (_factory.validateObject(key, obj)) {\ntry {\n_factory.passivateObject(key, obj);\n} catch (Exception ex) {\n_factory.destroyObject(key, obj);\nreturn;\n}\n} else {\nreturn;\n}\n}\nif (isClosed()) {\nif (null != _factory) {\ntry {\n_factory.destroyObject(key, obj);\n} catch (Exception e) {\n}\n}\nreturn;\n}\nStack<V> stack = _pools.get(key);\nif(null == stack) {\nstack = new Stack<V>();\nstack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);\n_pools.put(key,stack);\n}\nfinal int stackSize = stack.size();\nif (stackSize >= _maxSleeping) {\nfinal V staleObj;\nif (stackSize > 0) {\nstaleObj = stack.remove(0);\n_totIdle--;\n} else {\nstaleObj = obj;\n}\nif(null != _factory) {\ntry {\n_factory.destroyObject(key, staleObj);\n} catch (Exception e) {\n}\n}\n}\nstack.push(obj);\n_totIdle++;\n}\n@Override\npublic synchronized void invalidateObject(K key, V obj) throws Exception {\ndecrementActiveCount(key);\nif(null != _factory) {\n_factory.destroyObject(key,obj);\n}\nnotifyAll(); \n}\n@Override\npublic synchronized void addObject(K key) throws Exception {\nassertOpen();\nif (_factory == null) {\nthrow new IllegalStateException(\"Cannot add objects without a factory.\");\n}\nV obj = _factory.makeObject(key);\ntry {\nif (!_factory.validateObject(key, obj)) {\nreturn;\n}\n} catch (Exception e) {\ntry {\n_factory.destroyObject(key, obj);\n} catch (Exception e2) {\n}\nreturn;\n}\n_factory.passivateObject(key, obj);\nStack<V> stack = _pools.get(key);\nif(null == stack) {\nstack = new Stack<V>();\nstack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);\n_pools.put(key,stack);\n}\nfinal int stackSize = stack.size();\nif (stackSize >= _maxSleeping) {\nfinal V staleObj;\nif (stackSize > 0) {\nstaleObj = stack.remove(0);\n_totIdle--;\n} else {\nstaleObj = obj;\n}\ntry {\n_factory.destroyObject(key, staleObj);\n} catch (Exception e) {\nif (obj == staleObj) {\nthrow e;\n}\n}\n} else {\nstack.push(obj);\n_totIdle++;\n}\n}\n@Override\npublic synchronized int getNumIdle() {\nreturn _totIdle;\n}\n@Override\npublic synchronized int getNumActive() {\nreturn _totActive;\n}\n@Override\npublic synchronized int getNumActive(K key) {\nreturn getActiveCount(key);\n}\n@Override\npublic synchronized int getNumIdle(K key) {\ntry {\nreturn(_pools.get(key)).size();\n} catch(Exception e) {\nreturn 0;\n}\n}\n@Override\npublic synchronized void clear() {\nIterator<K> it = _pools.keySet().iterator();\nwhile(it.hasNext()) {\nK key = it.next();\nStack<V> stack = _pools.get(key);\ndestroyStack(key,stack);\n}\n_totIdle = 0;\n_pools.clear();\n_activeCount.clear();\n}\n@Override\npublic synchronized void clear(K key) {\nStack<V> stack = _pools.remove(key);\ndestroyStack(key,stack);\n}\nprivate synchronized void destroyStack(K key, Stack<V> stack) {\nif(null == stack) {\nreturn;\n} else {\nif(null != _factory) {\nIterator<V> it = stack.iterator();\nwhile(it.hasNext()) {\ntry {\n_factory.destroyObject(key,it.next());\n} catch(Exception e) {\n}\n}\n}\n_totIdle -= stack.size();\n_activeCount.remove(key);\nstack.clear();\n}\n}\n@Override\npublic synchronized String toString() {\nStringBuffer buf = new StringBuffer();\nbuf.append(getClass().getName());\nbuf.append(\" contains \").append(_pools.size()).append(\" distinct pools: \");\nIterator<K> it = _pools.keySet().iterator();\nwhile(it.hasNext()) {\nK key = it.next();\nbuf.append(\" |\").append(key).append(\"|=\");\nStack<V> s = _pools.get(key);\nbuf.append(s.size());\n}\nreturn buf.toString();\n}\n@Override\npublic void close() throws Exception {\nsuper.close();\nclear();\n}\n@Deprecated\n@Override\npublic synchronized void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {\nif(0 < getNumActive()) {\nthrow new IllegalStateException(\"Objects are already active\");\n} else {\nclear();\n_factory = factory;\n}\n}\npublic synchronized KeyedPoolableObjectFactory<K, V> getFactory() {\nreturn _factory;\n}\nprivate int getActiveCount(K key) {\ntry {\nreturn _activeCount.get(key).intValue();\n} catch(NoSuchElementException e) {\nreturn 0;\n} catch(NullPointerException e) {\nreturn 0;\n}\n}\nprivate static final Integer ONE = Integer.valueOf(1);\nprivate void incrementActiveCount(K key) {\n_totActive++;\nInteger old = _activeCount.get(key);\nif(null == old) {\n_activeCount.put(key,ONE);\n} else {\n_activeCount.put(key,Integer.valueOf(old.intValue() + 1));\n}\n}\nprivate void decrementActiveCount(K key) {\n_totActive--;\nInteger active = _activeCount.get(key);\nif(null == active) {\n} else if(active.intValue() <= 1) {\n_activeCount.remove(key);\n} else {\n_activeCount.put(key, Integer.valueOf(active.intValue() - 1));\n}\n}\npublic Map<K, Stack<V>> getPools() {\nreturn _pools;\n}\npublic int getMaxSleeping() {\nreturn _maxSleeping;\n}\npublic int getInitSleepingCapacity() {\nreturn _initSleepingCapacity;\n}\npublic int getTotActive() {\nreturn _totActive;\n}\npublic int getTotIdle() {\nreturn _totIdle;\n}\npublic Map<K, Integer> getActiveCount() {\nreturn _activeCount;\n}\nprotected static final int DEFAULT_MAX_SLEEPING  = 8;\nprotected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;\n@Deprecated\nprotected HashMap<K, Stack<V>> _pools = null;\n@Deprecated\nprotected KeyedPoolableObjectFactory<K, V> _factory = null;\n@Deprecated\nprotected int _maxSleeping = DEFAULT_MAX_SLEEPING;\n@Deprecated\nprotected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;\n@Deprecated\nprotected int _totActive = 0;\n@Deprecated\nprotected int _totIdle = 0;\n@Deprecated\n",
    "warning_method": "@Override\npublic synchronized void addObject(K key) throws Exception {\nassertOpen();\nif (_factory == null) {\nthrow new IllegalStateException(\"Cannot add objects without a factory.\");\n}\nV obj = _factory.makeObject(key);\ntry {\nif (!_factory.validateObject(key, obj)) {\nreturn;\n}\n} catch (Exception e) {\ntry {\n_factory.destroyObject(key, obj);\n} catch (Exception e2) {\n}\nreturn;\n}\n_factory.passivateObject(key, obj);\nStack<V> stack = _pools.get(key);\nif (null == stack) {\nstack = new Stack<V>();\nstack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);\n_pools.put(key, stack);\n}\nfinal int stackSize = stack.size();\nif (stackSize >= _maxSleeping) {\nfinal V staleObj;\nif (stackSize > 0) {\nstaleObj = stack.remove(0);\n_totIdle--;\n} else {\nstaleObj = obj;\n}\ntry {\n_factory.destroyObject(key, staleObj);\n} catch (Exception e) {\nif (obj == staleObj) {\nthrow e;\n}\n}\n} else {\nstack.push(obj);\n_totIdle++;\n}\n}"
}