{
    "category": "BAD_PRACTICE",
    "vtype": "CN_IDIOM",
    "priority": "2",
    "rank": "16",
    "project": "pool",
    "warning_line": "private final Map objectPools = new HashMap();\n// XXX: Add better handling of when this instance is not Serializable\nprivate final ObjectPoolFactory poolFactory;\nprivate final transient ThreadLocal keys;\nprivate volatile boolean open = true;\nCompositeKeyedObjectPool(final ObjectPoolFactory poolFactory) throws IllegalArgumentException {\nif (poolFactory == null) {\nthrow new IllegalArgumentException(\"object pool factory must not be null.\");\n}\nthis.poolFactory = poolFactory;\nif (poolFactory instanceof CompositeObjectPoolFactory) {\nfinal PoolableObjectFactory pof = ((CompositeObjectPoolFactory)poolFactory).getFactory();\nif (pof instanceof KeyedPoolableObjectFactoryAdapter) {\nkeys = new ThreadLocal();\n((KeyedPoolableObjectFactoryAdapter)pof).setCompositeKeyedObjectPool(this);\n} else {\nkeys = null;\n}\n} else {\nkeys = null;\n}\n}\nprivate ObjectPool getObjectPool(final Object key) {\nObjectPool pool;\nsynchronized (objectPools) {\npool = (ObjectPool)objectPools.get(key);\nif (pool == null) {\npool = poolFactory.createPool();\nobjectPools.put(key, pool);\nif (pool instanceof CompositeObjectPool) {\n((CompositeObjectPool)pool).setOwningCompositeKeyedObjectPool(this);\n}\n}\n}\nreturn pool;\n}\npublic Object borrowObject(final Object key) throws Exception {\nassertOpen();\nfinal ObjectPool pool = getObjectPool(key);\ntry {\nif (keys != null) {\nkeys.set(key);\n}\nreturn pool.borrowObject();\n} finally {\nif (keys != null) {\nkeys.set(null); \n}\n}\n}\npublic void returnObject(final Object key, final Object obj) {\nfinal ObjectPool pool = getObjectPool(key);\ntry {\nif (keys != null) {\nkeys.set(key);\n}\npool.returnObject(obj);\n} catch (Exception e) {\n// XXX: In pool 3 this catch block will not be necessary and shouled be removed\n} finally {\nif (keys != null) {\nkeys.set(null); \n}\n}\n}\npublic void invalidateObject(final Object key, final Object obj) {\nfinal ObjectPool pool = getObjectPool(key);\ntry {\nif (keys != null) {\nkeys.set(key);\n}\npool.invalidateObject(obj);\n} catch (Exception e) {\n// XXX: In pool 3 this catch block will not be necessary and shouled be removed\n} finally {\nif (keys != null) {\nkeys.set(null); \n}\n}\n}\npublic void addObject(final Object key) throws Exception {\nassertOpen();\nfinal ObjectPool pool = getObjectPool(key);\ntry {\nif (keys != null) {\nkeys.set(key);\n}\npool.addObject();\n} finally {\nif (keys != null) {\nkeys.set(null); \n}\n}\n}\npublic int getNumIdle(final Object key) {\nfinal ObjectPool pool = getObjectPool(key);\ntry {\nif (keys != null) {\nkeys.set(key);\n}\nreturn pool.getNumIdle();\n} finally {\nif (keys != null) {\nkeys.set(null); \n}\n}\n}\npublic int getNumActive(final Object key) {\nfinal ObjectPool pool = getObjectPool(key);\ntry {\nif (keys != null) {\nkeys.set(key);\n}\nreturn pool.getNumActive();\n} finally {\nif (keys != null) {\nkeys.set(null); \n}\n}\n}\npublic int getNumIdle() {\nint numIdle = 0;\nsynchronized (objectPools) {\nfinal Iterator iter = objectPools.values().iterator();\nwhile (iter.hasNext()) {\nfinal ObjectPool pool = (ObjectPool)iter.next();\nnumIdle += pool.getNumIdle();\n}\n}\nreturn numIdle;\n}\npublic int getNumActive() {\nint numActive = 0;\nsynchronized (objectPools) {\nfinal Iterator iter = objectPools.values().iterator();\nwhile (iter.hasNext()) {\nfinal ObjectPool pool = (ObjectPool)iter.next();\nnumActive += pool.getNumActive();\n}\n}\nreturn numActive;\n}\npublic void clear() throws Exception {\nsynchronized (objectPools) {\nfinal Iterator iter = objectPools.keySet().iterator();\nwhile (iter.hasNext()) {\nfinal Object key = iter.next();\nclear(key);\n}\n}\n}\npublic void clear(final Object key) throws Exception {\nfinal ObjectPool pool = getObjectPool(key);\ntry {\nif (keys != null) {\nkeys.set(key);\n}\npool.clear();\nsynchronized (objectPools) {\nif (pool.getNumActive() == 0) {\nobjectPools.remove(key);\npool.close();\n}\n}\n} finally {\nif (keys != null) {\nkeys.set(null); \n}\n}\n}\npublic void close() {\nopen = false;\nThread.yield(); \nsynchronized (objectPools) {\nfinal Iterator iter = objectPools.keySet().iterator();\nwhile (iter.hasNext()) {\nfinal Object key = iter.next();\nclose(key);\n}\n}\n}\nprivate void close(final Object key) {\nfinal ObjectPool pool = getObjectPool(key);\ntry {\nif (keys != null) {\nkeys.set(key);\n}\npool.close();\nsynchronized (objectPools) {\nif (pool.getNumActive() == 0) {\nobjectPools.remove(key);\npool.close();\n}\n}\n} catch (Exception e) {\n// XXX: In pool 3 this catch block will not be necessary and shouled be removed\n} finally {\nif (keys != null) {\nkeys.set(null); \n}\n}\n}\npublic void setFactory(final KeyedPoolableObjectFactory factory) throws IllegalStateException, UnsupportedOperationException {\nthrow new UnsupportedOperationException(\"Replacing the factory not supported. Create a new pool instance instead.\");\n}\nprivate void assertOpen() throws IllegalStateException {\nif (!open) {\nthrow new IllegalStateException(\"keyed pool has been closed.\");\n}\n}\nThreadLocal getKeys() {\nreturn keys;\n}\npublic String toString() {\nfinal StringBuffer sb = new StringBuffer(128);\nsb.append(\"CompositeKeyedObjectPool{\");\nsb.append(\"poolFactory=\").append(poolFactory);\nsb.append(\", open=\").append(open);\ntry {\nfinal int numActive = getNumActive();\nsb.append(\", activeObjects=\").append(numActive);\n} catch (Exception e) {\n}\ntry {\nfinal int numIdle = getNumIdle();\nsb.append(\", idleObjects=\").append(numIdle);\n} catch (Exception e) {\n}\nsb.append('}');\nreturn sb.toString();\n}\nprivate Object readResolve() throws ObjectStreamException {\nfinal CompositeKeyedObjectPool pool = new CompositeKeyedObjectPool(poolFactory);\nif (!open) {\ntry {\npool.close();\n} catch (Exception e) {\nfinal InvalidObjectException ioe = new InvalidObjectException(\"pool close failed on serialized closed pool.\");\nioe.initCause(e);\nthrow ioe;\n}\n}\nreturn pool;\n",
    "warning_method": "public String toString() {\nfinal StringBuffer sb = new StringBuffer(128);\nsb.append(\"CompositeKeyedObjectPool{\");\nsb.append(\"poolFactory=\").append(poolFactory);\nsb.append(\", open=\").append(open);\ntry {\nfinal int numActive = getNumActive();\nsb.append(\", activeObjects=\").append(numActive);\n} catch (Exception e) {\n}\ntry {\nfinal int numIdle = getNumIdle();\nsb.append(\", idleObjects=\").append(numIdle);\n} catch (Exception e) {\n}\nsb.append('}');\nreturn sb.toString();\n}"
}