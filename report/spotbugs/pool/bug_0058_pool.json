{
    "category": "DODGY_CODE",
    "vtype": "UCF_USELESS_CONTROL_FLOW",
    "priority": "3",
    "rank": "20",
    "project": "pool",
    "warning_line": "if (!underTest.endEvictionTest(idleObjects)) {\n",
    "warning_method": "@Override\npublic void evict() throws Exception {\nassertOpen();\nif (!idleObjects.isEmpty()) {\nPooledObject<T> underTest = null;\nfinal EvictionPolicy<T> evictionPolicy = getEvictionPolicy();\nsynchronized (evictionLock) {\nfinal EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdle());\nfinal boolean testWhileIdle = getTestWhileIdle();\nfor (int i = 0, m = getNumTests(); i < m; i++) {\nif (evictionIterator == null || !evictionIterator.hasNext()) {\nevictionIterator = new EvictionIterator(idleObjects);\n}\nif (!evictionIterator.hasNext()) {\nreturn;\n}\ntry {\nunderTest = evictionIterator.next();\n} catch (final NoSuchElementException nsee) {\ni--;\nevictionIterator = null;\ncontinue;\n}\nif (!underTest.startEvictionTest()) {\ni--;\ncontinue;\n}\nboolean evict;\ntry {\nevict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());\n} catch (final Throwable t) {\nPoolUtils.checkRethrow(t);\nswallowException(new Exception(t));\nevict = false;\n}\nif (evict) {\ndestroy(underTest, DestroyMode.NORMAL);\ndestroyedByEvictorCount.incrementAndGet();\n} else {\nif (testWhileIdle) {\nboolean active = false;\ntry {\nfactory.activateObject(underTest);\nactive = true;\n} catch (final Exception e) {\ndestroy(underTest, DestroyMode.NORMAL);\ndestroyedByEvictorCount.incrementAndGet();\n}\nif (active) {\nif (!factory.validateObject(underTest)) {\ndestroy(underTest, DestroyMode.NORMAL);\ndestroyedByEvictorCount.incrementAndGet();\n} else {\ntry {\nfactory.passivateObject(underTest);\n} catch (final Exception e) {\ndestroy(underTest, DestroyMode.NORMAL);\ndestroyedByEvictorCount.incrementAndGet();\n}\n}\n}\n}\nif (!underTest.endEvictionTest(idleObjects)) {\n}\n}\n}\n}\n}\nfinal AbandonedConfig ac = this.abandonedConfig;\nif (ac != null && ac.getRemoveAbandonedOnMaintenance()) {\nremoveAbandoned(ac);\n}\n}"
}