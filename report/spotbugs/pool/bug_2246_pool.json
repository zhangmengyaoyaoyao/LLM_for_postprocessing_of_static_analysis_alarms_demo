{
    "category": "BAD_PRACTICE",
    "vtype": "DE_MIGHT_IGNORE",
    "priority": "3",
    "rank": "19",
    "project": "pool",
    "warning_line": "} catch(Exception e) {\n",
    "warning_method": "public synchronized void evict() throws Exception {\nassertOpen();\nif (!_pool.isEmpty()) {\nif (null == _evictionCursor) {\n_evictionCursor = (_pool.cursor(_lifo ? _pool.size() : 0));\n}\nfor (int i = 0, m = getNumTests(); i < m; i++) {\nif ((_lifo && !_evictionCursor.hasPrevious()) || !_lifo && !_evictionCursor.hasNext()) {\n_evictionCursor.close();\n_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);\n}\nboolean removeObject = false;\nfinal ObjectTimestampPair pair = _lifo ? (ObjectTimestampPair) _evictionCursor.previous() : (ObjectTimestampPair) _evictionCursor.next();\nfinal long idleTimeMilis = System.currentTimeMillis() - pair.tstamp;\nif ((_minEvictableIdleTimeMillis > 0) && (idleTimeMilis > _minEvictableIdleTimeMillis)) {\nremoveObject = true;\n} else if ((_softMinEvictableIdleTimeMillis > 0) && (idleTimeMilis > _softMinEvictableIdleTimeMillis) && (getNumIdle() > getMinIdle())) {\nremoveObject = true;\n}\nif (_testWhileIdle && !removeObject) {\nboolean active = false;\ntry {\n_factory.activateObject(pair.value);\nactive = true;\n} catch (Exception e) {\nremoveObject = true;\n}\nif (active) {\nif (!_factory.validateObject(pair.value)) {\nremoveObject = true;\n} else {\ntry {\n_factory.passivateObject(pair.value);\n} catch (Exception e) {\nremoveObject = true;\n}\n}\n}\n}\nif (removeObject) {\ntry {\n_evictionCursor.remove();\n_factory.destroyObject(pair.value);\n} catch (Exception e) {\n}\n}\n}\n}\n}"
}