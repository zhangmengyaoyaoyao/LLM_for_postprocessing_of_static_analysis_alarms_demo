{
    "category": "DODGY_CODE",
    "vtype": "NP_LOAD_OF_KNOWN_NULL_VALUE",
    "priority": "3",
    "rank": "19",
    "project": "bcel",
    "warning_line": "addLocalVariable(\"this\",  ObjectType.getInstance(className), start, end);\n",
    "warning_method": "public MethodGen(final int access_flags, final Type return_type, final Type[] argTypes, String[] argNames, final String method_name, final String className, final InstructionList il, final ConstantPoolGen cp) {\nsuper(access_flags);\nsetType(return_type);\nsetArgumentTypes(argTypes);\nsetArgumentNames(argNames);\nsetName(method_name);\nsetClassName(className);\nsetInstructionList(il);\nsetConstantPool(cp);\nfinal boolean abstract_ = isAbstract() || isNative();\nInstructionHandle start = null;\nfinal InstructionHandle end = null;\nif (!abstract_) {\nstart = il.getStart();\nif (!isStatic() && (className != null)) {\naddLocalVariable(\"this\", ObjectType.getInstance(className), start, end);\n}\n}\nif (argTypes != null) {\nfinal int size = argTypes.length;\nfor (final Type arg_type : argTypes) {\nif (Type.VOID == arg_type) {\nthrow new ClassGenException(\"'void' is an illegal argument type for a method\");\n}\n}\nif (argNames != null) {\nif (size != argNames.length) {\nthrow new ClassGenException(\"Mismatch in argument array lengths: \" + size + \" vs. \" + argNames.length);\n}\n} else {\nargNames = new String[size];\nfor (int i = 0; i < size; i++) {\nargNames[i] = \"arg\" + i;\n}\nsetArgumentNames(argNames);\n}\nif (!abstract_) {\nfor (int i = 0; i < size; i++) {\naddLocalVariable(argNames[i], argTypes[i], start, end);\n}\n}\n}\n}"
}