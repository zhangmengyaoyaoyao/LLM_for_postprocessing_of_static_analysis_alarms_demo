{
    "category": "BAD_PRACTICE",
    "vtype": "NM_CLASS_NOT_EXCEPTION",
    "priority": "2",
    "rank": "16",
    "project": "bcel",
    "warning_line": "this(c.getStartPC(), c.getEndPC(), c.getHandlerPC(), c.getCatchType());\n}\nCodeException(DataInput file) throws IOException {\nthis(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), file\n.readUnsignedShort());\n}\npublic CodeException(int start_pc, int end_pc, int handler_pc, int catch_type) {\nthis.start_pc = start_pc;\nthis.end_pc = end_pc;\nthis.handler_pc = handler_pc;\nthis.catch_type = catch_type;\n}\n@Override\npublic void accept( Visitor v ) {\nv.visitCodeException(this);\n}\npublic final void dump( DataOutputStream file ) throws IOException {\nfile.writeShort(start_pc);\nfile.writeShort(end_pc);\nfile.writeShort(handler_pc);\nfile.writeShort(catch_type);\n}\npublic final int getCatchType() {\nreturn catch_type;\n}\npublic final int getEndPC() {\nreturn end_pc;\n}\npublic final int getHandlerPC() {\nreturn handler_pc;\n}\npublic final int getStartPC() {\nreturn start_pc;\n}\npublic final void setCatchType( int catch_type ) {\nthis.catch_type = catch_type;\n}\npublic final void setEndPC( int end_pc ) {\nthis.end_pc = end_pc;\n}\npublic final void setHandlerPC( int handler_pc ) { \nthis.handler_pc = handler_pc;\n}\npublic final void setStartPC( int start_pc ) { \nthis.start_pc = start_pc;\n}\n@Override\npublic final String toString() {\nreturn \"CodeException(start_pc = \" + start_pc + \", end_pc = \" + end_pc + \", handler_pc = \"\n+ handler_pc + \", catch_type = \" + catch_type + \")\";\n}\npublic final String toString( ConstantPool cp, boolean verbose ) {\nString str;\nif (catch_type == 0) {\nstr = \"<Any exception>(0)\";\n} else {\nstr = Utility.compactClassName(cp.getConstantString(catch_type, Const.CONSTANT_Class), false)\n+ (verbose ? \"(\" + catch_type + \")\" : \"\");\n}\nreturn start_pc + \"\\t\" + end_pc + \"\\t\" + handler_pc + \"\\t\" + str;\n}\npublic final String toString( ConstantPool cp ) {\nreturn toString(cp, true);\n}\npublic CodeException copy() {\ntry {\nreturn (CodeException) clone();\n} catch (CloneNotSupportedException e) {\n}\nreturn null;\n",
    "warning_method": "public final int getEndPC() {\nreturn end_pc;\n}"
}