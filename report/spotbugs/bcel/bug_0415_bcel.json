{
    "category": "BAD_PRACTICE",
    "vtype": "NM_SAME_SIMPLE_NAME_AS_SUPERCLASS",
    "priority": "1",
    "rank": "14",
    "project": "bcel",
    "warning_line": "public static final String[] DEFAULT_IGNORED_PACKAGES = {\n\"java.\", \"javax.\", \"sun.\"\n};\nprivate final Hashtable<String, Class<?>> classes = new Hashtable<>();\nprivate final String[] ignored_packages;\nprivate Repository repository = SyntheticRepository.getInstance();\npublic ClassLoader() {\nthis(DEFAULT_IGNORED_PACKAGES);\n}\npublic ClassLoader(final java.lang.ClassLoader deferTo) {\nsuper(deferTo);\nthis.ignored_packages = DEFAULT_IGNORED_PACKAGES;\nthis.repository = new ClassLoaderRepository(deferTo);\n}\npublic ClassLoader(final String[] ignored_packages) {\nthis.ignored_packages = ignored_packages;\n}\npublic ClassLoader(final java.lang.ClassLoader deferTo, final String[] ignored_packages) {\nthis(ignored_packages);\nthis.repository = new ClassLoaderRepository(deferTo);\n}\n@Override\nprotected Class<?> loadClass( final String class_name, final boolean resolve ) throws ClassNotFoundException {\nClass<?> cl = null;\nif ((cl = classes.get(class_name)) == null) {\nfor (final String ignored_package : ignored_packages) {\nif (class_name.startsWith(ignored_package)) {\ncl = getParent().loadClass(class_name);\nbreak;\n}\n}\nif (cl == null) {\nJavaClass clazz = null;\nif (class_name.contains(BCEL_TOKEN)) {\nclazz = createClass(class_name);\n} else { // Fourth try: Load classes via repository\nif ((clazz = repository.loadClass(class_name)) != null) {\nclazz = modifyClass(clazz);\n} else {\nthrow new ClassNotFoundException(class_name);\n}\n}\nif (clazz != null) {\nfinal byte[] bytes = clazz.getBytes();\ncl = defineClass(class_name, bytes, 0, bytes.length);\n} else {\ncl = Class.forName(class_name);\n}\n}\nif (resolve) {\nresolveClass(cl);\n}\n}\nclasses.put(class_name, cl);\nreturn cl;\n}\nprotected JavaClass modifyClass( final JavaClass clazz ) {\nreturn clazz;\n}\nprotected JavaClass createClass( final String class_name ) {\nfinal int index = class_name.indexOf(BCEL_TOKEN);\nfinal String real_name = class_name.substring(index + BCEL_TOKEN.length());\nJavaClass clazz = null;\ntry {\nfinal byte[] bytes = Utility.decode(real_name, true);\nfinal ClassParser parser = new ClassParser(new ByteArrayInputStream(bytes), \"foo\");\nclazz = parser.parse();\n} catch (final IOException e) {\ne.printStackTrace();\nreturn null;\n}\nfinal ConstantPool cp = clazz.getConstantPool();\nfinal ConstantClass cl = (ConstantClass) cp.getConstant(clazz.getClassNameIndex(),\nConst.CONSTANT_Class);\nfinal ConstantUtf8 name = (ConstantUtf8) cp.getConstant(cl.getNameIndex(),\nConst.CONSTANT_Utf8);\nname.setBytes(class_name.replace('.', '/'));\nreturn clazz;\n",
    "warning_method": "public static final String[] DEFAULT_IGNORED_PACKAGES = { \"java.\", \"javax.\", \"sun.\" };"
}