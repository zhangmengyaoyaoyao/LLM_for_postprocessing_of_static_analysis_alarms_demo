{
    "category": "DODGY_CODE",
    "vtype": "REC_CATCH_EXCEPTION",
    "priority": "3",
    "rank": "20",
    "project": "dbcp",
    "warning_line": "} catch (final Exception t) {\n",
    "warning_method": "static ConnectionFactory createConnectionFactory(final BasicDataSource basicDataSource, final Driver driver) throws SQLException {\nfinal Properties connectionProperties = basicDataSource.getConnectionProperties();\nfinal String url = basicDataSource.getUrl();\nfinal String user = basicDataSource.getUsername();\nif (user != null) {\nconnectionProperties.put(Constants.KEY_USER, user);\n} else {\nbasicDataSource.log(\"DBCP DataSource configured without a 'username'\");\n}\nfinal String pwd = basicDataSource.getPassword();\nif (pwd != null) {\nconnectionProperties.put(\"password\", pwd);\n} else {\nbasicDataSource.log(\"DBCP DataSource configured without a 'password'\");\n}\nfinal String connectionFactoryClassName = basicDataSource.getConnectionFactoryClassName();\nif (connectionFactoryClassName != null) {\ntry {\nfinal Class<?> connectionFactoryFromCCL = Class.forName(connectionFactoryClassName);\nreturn (ConnectionFactory) connectionFactoryFromCCL.getConstructor(Driver.class, String.class, Properties.class).newInstance(driver, url, connectionProperties);\n} catch (final Exception t) {\nfinal String message = \"Cannot load ConnectionFactory implementation '\" + connectionFactoryClassName + \"'\";\nbasicDataSource.log(message, t);\nthrow new SQLException(message, t);\n}\n}\nreturn new DriverConnectionFactory(driver, url, connectionProperties);\n}"
}