{
    "category": "PERFORMANCE",
    "vtype": "DM_BOXED_PRIMITIVE_FOR_PARSING",
    "priority": "1",
    "rank": "16",
    "project": "dbcp",
    "warning_line": "dataSource.setDefaultQueryTimeout(Duration.ofSeconds(Integer.valueOf(value)));\n",
    "warning_method": "public static BasicDataSource createDataSource(final Properties properties) throws Exception {\nfinal BasicDataSource dataSource = new BasicDataSource();\nString value = properties.getProperty(PROP_DEFAULT_AUTO_COMMIT);\nif (value != null) {\ndataSource.setDefaultAutoCommit(Boolean.valueOf(value));\n}\nvalue = properties.getProperty(PROP_DEFAULT_READ_ONLY);\nif (value != null) {\ndataSource.setDefaultReadOnly(Boolean.valueOf(value));\n}\nvalue = properties.getProperty(PROP_DEFAULT_TRANSACTION_ISOLATION);\nif (value != null) {\nint level = PoolableConnectionFactory.UNKNOWN_TRANSACTION_ISOLATION;\nif (\"NONE\".equalsIgnoreCase(value)) {\nlevel = Connection.TRANSACTION_NONE;\n} else if (\"READ_COMMITTED\".equalsIgnoreCase(value)) {\nlevel = Connection.TRANSACTION_READ_COMMITTED;\n} else if (\"READ_UNCOMMITTED\".equalsIgnoreCase(value)) {\nlevel = Connection.TRANSACTION_READ_UNCOMMITTED;\n} else if (\"REPEATABLE_READ\".equalsIgnoreCase(value)) {\nlevel = Connection.TRANSACTION_REPEATABLE_READ;\n} else if (\"SERIALIZABLE\".equalsIgnoreCase(value)) {\nlevel = Connection.TRANSACTION_SERIALIZABLE;\n} else {\ntry {\nlevel = Integer.parseInt(value);\n} catch (final NumberFormatException e) {\nSystem.err.println(\"Could not parse defaultTransactionIsolation: \" + value);\nSystem.err.println(\"WARNING: defaultTransactionIsolation not set\");\nSystem.err.println(\"using default value of database driver\");\nlevel = PoolableConnectionFactory.UNKNOWN_TRANSACTION_ISOLATION;\n}\n}\ndataSource.setDefaultTransactionIsolation(level);\n}\nvalue = properties.getProperty(PROP_DEFAULT_CATALOG);\nif (value != null) {\ndataSource.setDefaultCatalog(value);\n}\nvalue = properties.getProperty(PROP_DEFAULT_SCHEMA);\nif (value != null) {\ndataSource.setDefaultSchema(value);\n}\nvalue = properties.getProperty(PROP_CACHE_STATE);\nif (value != null) {\ndataSource.setCacheState(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_DRIVER_CLASS_NAME);\nif (value != null) {\ndataSource.setDriverClassName(value);\n}\nvalue = properties.getProperty(PROP_LIFO);\nif (value != null) {\ndataSource.setLifo(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_MAX_TOTAL);\nif (value != null) {\ndataSource.setMaxTotal(Integer.parseInt(value));\n}\nvalue = properties.getProperty(PROP_MAX_IDLE);\nif (value != null) {\ndataSource.setMaxIdle(Integer.parseInt(value));\n}\nvalue = properties.getProperty(PROP_MIN_IDLE);\nif (value != null) {\ndataSource.setMinIdle(Integer.parseInt(value));\n}\nvalue = properties.getProperty(PROP_INITIAL_SIZE);\nif (value != null) {\ndataSource.setInitialSize(Integer.parseInt(value));\n}\nvalue = properties.getProperty(PROP_MAX_WAIT_MILLIS);\nif (value != null) {\ndataSource.setMaxWait(Duration.ofMillis(Long.parseLong(value)));\n}\nvalue = properties.getProperty(PROP_TEST_ON_CREATE);\nif (value != null) {\ndataSource.setTestOnCreate(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_TEST_ON_BORROW);\nif (value != null) {\ndataSource.setTestOnBorrow(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_TEST_ON_RETURN);\nif (value != null) {\ndataSource.setTestOnReturn(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_TIME_BETWEEN_EVICTION_RUNS_MILLIS);\nif (value != null) {\ndataSource.setDurationBetweenEvictionRuns(Duration.ofMillis(Long.parseLong(value)));\n}\nvalue = properties.getProperty(PROP_NUM_TESTS_PER_EVICTION_RUN);\nif (value != null) {\ndataSource.setNumTestsPerEvictionRun(Integer.parseInt(value));\n}\nvalue = properties.getProperty(PROP_MIN_EVICTABLE_IDLE_TIME_MILLIS);\nif (value != null) {\ndataSource.setMinEvictableIdle(Duration.ofMillis(Long.parseLong(value)));\n}\nvalue = properties.getProperty(PROP_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);\nif (value != null) {\ndataSource.setSoftMinEvictableIdle(Duration.ofMillis(Long.parseLong(value)));\n}\nvalue = properties.getProperty(PROP_EVICTION_POLICY_CLASS_NAME);\nif (value != null) {\ndataSource.setEvictionPolicyClassName(value);\n}\nvalue = properties.getProperty(PROP_TEST_WHILE_IDLE);\nif (value != null) {\ndataSource.setTestWhileIdle(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_PASSWORD);\nif (value != null) {\ndataSource.setPassword(value);\n}\nvalue = properties.getProperty(PROP_URL);\nif (value != null) {\ndataSource.setUrl(value);\n}\nvalue = properties.getProperty(PROP_USER_NAME);\nif (value != null) {\ndataSource.setUsername(value);\n}\nvalue = properties.getProperty(PROP_VALIDATION_QUERY);\nif (value != null) {\ndataSource.setValidationQuery(value);\n}\nvalue = properties.getProperty(PROP_VALIDATION_QUERY_TIMEOUT);\nif (value != null) {\ndataSource.setValidationQueryTimeout(Duration.ofSeconds(Integer.parseInt(value)));\n}\nvalue = properties.getProperty(PROP_ACCESS_TO_UNDERLYING_CONNECTION_ALLOWED);\nif (value != null) {\ndataSource.setAccessToUnderlyingConnectionAllowed(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_REMOVE_ABANDONED_ON_BORROW);\nif (value != null) {\ndataSource.setRemoveAbandonedOnBorrow(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_REMOVE_ABANDONED_ON_MAINTENANCE);\nif (value != null) {\ndataSource.setRemoveAbandonedOnMaintenance(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_REMOVE_ABANDONED_TIMEOUT);\nif (value != null) {\ndataSource.setRemoveAbandonedTimeout(Duration.ofSeconds(Integer.parseInt(value)));\n}\nvalue = properties.getProperty(PROP_LOG_ABANDONED);\nif (value != null) {\ndataSource.setLogAbandoned(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_ABANDONED_USAGE_TRACKING);\nif (value != null) {\ndataSource.setAbandonedUsageTracking(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_POOL_PREPARED_STATEMENTS);\nif (value != null) {\ndataSource.setPoolPreparedStatements(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_CLEAR_STATEMENT_POOL_ON_RETURN);\nif (value != null) {\ndataSource.setClearStatementPoolOnReturn(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_MAX_OPEN_PREPARED_STATEMENTS);\nif (value != null) {\ndataSource.setMaxOpenPreparedStatements(Integer.parseInt(value));\n}\nvalue = properties.getProperty(PROP_CONNECTION_INIT_SQLS);\nif (value != null) {\ndataSource.setConnectionInitSqls(parseList(value, ';'));\n}\nvalue = properties.getProperty(PROP_CONNECTION_PROPERTIES);\nif (value != null) {\nfinal Properties p = getProperties(value);\nfinal Enumeration<?> e = p.propertyNames();\nwhile (e.hasMoreElements()) {\nfinal String propertyName = (String) e.nextElement();\ndataSource.addConnectionProperty(propertyName, p.getProperty(propertyName));\n}\n}\nvalue = properties.getProperty(PROP_MAX_CONN_LIFETIME_MILLIS);\nif (value != null) {\ndataSource.setMaxConn(Duration.ofMillis(Long.parseLong(value)));\n}\nvalue = properties.getProperty(PROP_LOG_EXPIRED_CONNECTIONS);\nif (value != null) {\ndataSource.setLogExpiredConnections(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_JMX_NAME);\nif (value != null) {\ndataSource.setJmxName(value);\n}\nvalue = properties.getProperty(PROP_ENABLE_AUTO_COMMIT_ON_RETURN);\nif (value != null) {\ndataSource.setAutoCommitOnReturn(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_ROLLBACK_ON_RETURN);\nif (value != null) {\ndataSource.setRollbackOnReturn(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_DEFAULT_QUERY_TIMEOUT);\nif (value != null) {\ndataSource.setDefaultQueryTimeout(Duration.ofSeconds(Integer.valueOf(value)));\n}\nvalue = properties.getProperty(PROP_FAST_FAIL_VALIDATION);\nif (value != null) {\ndataSource.setFastFailValidation(Boolean.parseBoolean(value));\n}\nvalue = properties.getProperty(PROP_DISCONNECTION_SQL_CODES);\nif (value != null) {\ndataSource.setDisconnectionSqlCodes(parseList(value, ','));\n}\nvalue = properties.getProperty(PROP_CONNECTION_FACTORY_CLASS_NAME);\nif (value != null) {\ndataSource.setConnectionFactoryClassName(value);\n}\nif (dataSource.getInitialSize() > 0) {\ndataSource.getLogWriter();\n}\nreturn dataSource;\n}"
}